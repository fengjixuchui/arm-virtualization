/*
 * Copyright 2008 ARM Limited. All rights reserved.
 */

// The model of MPS system registers

component MPS_CAN
{
    properties 
    {
        version = "8.1.37";
        component_type = "Other";
        description = "MPS CAN Bus";
        documentation_file = "../../../#DUI0423#";
    }
    
    includes
    {
        #define MPS_CAN_TRACE if (!0) ; else printf
    }
    
    resources
    {
        PARAMETER { description("Dummy parameter"), type(uint32_t), default(0x01590500) } dummy_parameter;
        
        REGISTER { description("Dummy register"),       bitwidth(32), read_function(debug_read), write_function(debug_write), display_format("hex"), reg_number(0x00) } DUMMY_REGISTER;
    }
    
    composition
    {
        busslave : PVBusSlave(size = 0x1000);
    }
    
    connection
    {
        self.pvbus => busslave.pvbus_s;
        busslave.device => self.device;
    }
    
    // Implement device I/O
    internal slave port<PVDevice> device
    {
        // Pass on read/write requests to registerRead()/registerWrite().
        behavior read(pv::ReadTransaction tx) : pv::Tx_Result
        {
            if (tx.getAccessWidth() > pv::ACCESS_32_BITS || !tx.isAligned()) return tx.generateAbort();

            // Always do an aligned 32-bit read and let the bus extract the appropriate data
            return tx.setReturnData32(registerRead(tx.getAddress() & ~3));
        }
        
        behavior write(pv::WriteTransaction tx) : pv::Tx_Result
        {
            if (tx.getAccessWidth() != pv::ACCESS_32_BITS || !tx.isAligned()) return tx.generateAbort();
            registerWrite(tx.getAddress(),tx.getData32());
            return tx.writeComplete();
        }

        behavior debugRead(pv::ReadTransaction tx) : pv::Tx_Result
        {
            return device.read(tx);
        }

        behavior debugWrite(pv::WriteTransaction tx) : pv::Tx_Result
        {
            return device.write(tx);
        }        
    }
    
    slave port<PVBus> pvbus;

  
    behavior init()
    {
        composition.init();
    }
    
    behavior reset(int level)
    {
        composition.reset(level);
        DUMMY_REGISTER = dummy_parameter;
    }
                                                                         
    
    behavior registerRead(uint32_t device_addr) : uint32_t
    {
        uint32_t data = 0;

        switch(device_addr) 
        {
            case 0x00: // DUMMY_REGISTER
                data = DUMMY_REGISTER;
                MPS_CAN_TRACE("MPS_CAN: read(DUMMY_REGISTER) -> %x\n", data);
                break;

            default:
                MPS_CAN_TRACE("MPS_CAN: read(Undefined register) 0x%x\n", device_addr);
                break;

        }
        return data;
    }
    
    behavior registerWrite(uint32_t device_addr, uint32_t data)
    {
        switch (device_addr)
        {
            case 0x00: // DUMMY_REGISTER
                MPS_CAN_TRACE("MPS_CAN: write(DUMMY_REGISTER) <- %x -- Read only\n", data);
                break;

            default:
                MPS_CAN_TRACE("MPS_CAN: write(Undefined register) 0x%x\n", device_addr);
                break;

        }
    }
    
    // debugger register access support
    behaviour debug_read(CASIU32 reg_id, CASIU64* datap, bool side_effects) : CADIReturn_t
    {
        *datap = registerRead(reg_id);

        return eslapi::CADI_STATUS_OK;
    }

    behaviour debug_write(CASIU32 reg_id, const CASIU64* datap, bool side_effects) : CADIReturn_t
    {
        registerWrite(reg_id, (uint32_t)*datap);

        return eslapi::CADI_STATUS_OK;
    }
}
