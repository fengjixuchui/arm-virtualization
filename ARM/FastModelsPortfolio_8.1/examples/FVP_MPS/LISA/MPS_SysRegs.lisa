/*
 * Copyright 2008 ARM Limited. All rights reserved.
 */

// The model of MPS system registers

component MPS_SysRegs
{
    properties 
    {
        version = "8.1.37";
        component_type = "Other";
        description = "MPS system registers";
        documentation_file = "../../../#DUI0423#";
    }
    
    includes
    {
        #define MPSSYSREG_TRACE if (!0) ; else printf
    }
    
    resources
    {
       
        PARAMETER { description("System Identification Register"), type(uint32_t), default(0x11590500) } sys_id;
        PARAMETER { description("System memory configuration"), type(uint32_t), default(0x0) } memcfg_value;
        PARAMETER { description("User switches."), type(uint32_t), default(0x4) } user_switches_value;
        
        REGISTER { description("Board and FPGA identifier"),       bitwidth(32), read_function(debug_read), write_function(debug_write), display_format("hex"), reg_number(0x00) } SYS_ID;
        REGISTER { description("Controls memory Remap and Alias"), bitwidth(32), read_function(debug_read), write_function(debug_write), display_format("hex"), reg_number(0x04) } SYS_MEMCFG;
        REGISTER { description("Indicates user switch settings"),  bitwidth(32), read_function(debug_read), write_function(debug_write), display_format("hex"), reg_number(0x08) } SYS_SW;
        REGISTER { description("Sets LED outputs"),                bitwidth(32), read_function(debug_read), write_function(debug_write), display_format("hex"), reg_number(0x0C) } SYS_LED;
        REGISTER { description("TouchScreen register"),            bitwidth(32), read_function(debug_read), write_function(debug_write), display_format("hex"), reg_number(0x10) } SYS_TS;
    }
    
    composition
    {
        busslave : PVBusSlave(size = 0x1000);
    }
    
    connection
    {
        self.pvbus => busslave.pvbus_s;
        busslave.device => self.device;
    }
    
    // Implement device I/O
    internal slave port<PVDevice> device
    {
        // Pass on read/write requests to registerRead()/registerWrite().
        behavior read(pv::ReadTransaction tx) : pv::Tx_Result
        {
            if (tx.getAccessWidth() > pv::ACCESS_32_BITS || !tx.isAligned()) return tx.generateAbort();

            // Always do an aligned 32-bit read and let the bus extract the appropriate data
            return tx.setReturnData32(registerRead(tx.getAddress() & ~3));
        }
        
        behavior write(pv::WriteTransaction tx) : pv::Tx_Result
        {
            if (tx.getAccessWidth() != pv::ACCESS_32_BITS || !tx.isAligned()) return tx.generateAbort();

            registerWrite(tx.getAddress(),tx.getData32());
            return tx.writeComplete();
        }

        behavior debugRead(pv::ReadTransaction tx) : pv::Tx_Result
        {
            return device.read(tx);
        }

        behavior debugWrite(pv::WriteTransaction tx) : pv::Tx_Result
        {
            return device.write(tx);
        }        
    }
    
    slave port<PVBus> pvbus;
    master port<ValueState> user_switches
    {
        behavior getValue() : uint32_t
        {
            return SYS_SW;
        }
        behavior setValue(uint32_t data)
        {
            MPSSYSREG_TRACE("MPS_SysRegs:user_switches::setValue(0x%2X)\n", SYS_SW);
            SYS_SW = data;
#if SYSTEM_GENERATOR_VERSION_AT_LEAST(4,3,0)
            cadiRefresh(eslapi::CADI_REFRESH_REASON_REGISTERS);
#endif
        }
    }
    master port<StateSignal> remap
    {
        behavior getValue() : sg::Signal::State
        {
             return SYS_MEMCFG ? sg::Signal::Set : sg::Signal::Clear;
        }
    }
    master port<ValueState> leds

    {
        behavior getValue() : uint32_t
        {
             return SYS_LED;
        }
    }   
    
   
    behavior init()
    {
        composition.init();

        SYS_ID     = sys_id;
        SYS_MEMCFG = 0;
        SYS_SW     = 0;
        SYS_LED    = 0;
        SYS_TS     = 0;
    }
    
    behavior reset(int level)
    {
        composition.reset(level);
        SYS_ID     = sys_id;
        SYS_MEMCFG = memcfg_value;
        remap.setValue((SYS_MEMCFG & 1) ? sg::Signal::Set : sg::Signal::Clear);
        SYS_SW     = user_switches_value;
        SYS_LED    = 0;
        SYS_TS     = 0;
    }
                                                                         
    
    behavior registerRead(uint32_t device_addr) : uint32_t
    {
        uint32_t data = 0;

        switch(device_addr) 
        {
            case 0x00: // SYS_ID 
                data = sys_id;
                MPSSYSREG_TRACE("MPS_SysRegs: read(SYS_ID) -> %x\n", data);
                break;

            case 0x04: // SYS_MEMCFG
                data = SYS_MEMCFG;
                MPSSYSREG_TRACE("MPS_SysRegs: read(SYS_MEMCFG) -> %x\n", data);
                break;

            case 0x08: // SYS_SW
                data = SYS_SW;
                MPSSYSREG_TRACE("MPS_SysRegs: read(SYS_SW) -> %x\n", data);
                break;

            case 0x0C: // SYS_LED
                data = SYS_LED;
                MPSSYSREG_TRACE("MPS_SysRegs: read(SYS_LED) -> %x\n", data);
                break;

            case 0x10: // SYS_TS
                data = SYS_TS;
                MPSSYSREG_TRACE("MPS_SysRegs: read(SYS_TS) -> %x\n", data);
                break;

            default:
                MPSSYSREG_TRACE("MPS_SysRegs: read(Undefined register) 0x%x\n", device_addr);
                break;

        }
        return data;
    }
    
    behavior registerWrite(uint32_t device_addr, uint32_t data)
    {
        switch (device_addr)
        {
            case 0x00: // SYS_ID
                MPSSYSREG_TRACE("MPS_SysRegs: write(SYS_ID) <- %x -- Read only\n", data);
                break;

            case 0x04: // SYS_MEMCFG
                SYS_MEMCFG = data;
                MPSSYSREG_TRACE("MPS_SysRegs: write(SYS_MEMCFG) -> %x\n", data);
 
                if(remap.setValue.implemented())
                {
                    remap.setValue((SYS_MEMCFG & 1) ? sg::Signal::Set : sg::Signal::Clear);
                }
                break;

            case 0x08: // SYS_SW
                MPSSYSREG_TRACE("MPS_SysRegs: write(SYS_SW) <- %x -- Read only\n", data);
                break;

            case 0x0C: // SYS_LED
                MPSSYSREG_TRACE("MPS_SysRegs: write(SYS_LED) <- %x\n", data);
                SYS_LED = data;
                break;

            case 0x10: // SYS_TC
                MPSSYSREG_TRACE("MPS_SysRegs: write( SYS_TC) <- %x -- Read only\n", data);
                break;

            default:
                MPSSYSREG_TRACE("MPS_SysRegs: write(Undefined register) 0x%x\n", device_addr);
                break;

        }
    }
    
    // debugger register access support
    behaviour debug_read(CASIU32 reg_id, CASIU64* datap, bool side_effects) : CADIReturn_t
    {
        *datap = registerRead(reg_id);

        return eslapi::CADI_STATUS_OK;
    }

    behaviour debug_write(CASIU32 reg_id, const CASIU64* datap, bool side_effects) : CADIReturn_t
    {
        registerWrite(reg_id, (uint32_t)*datap);

        return eslapi::CADI_STATUS_OK;
    }
}
