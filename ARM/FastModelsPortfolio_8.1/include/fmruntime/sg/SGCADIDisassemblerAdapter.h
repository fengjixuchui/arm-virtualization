/*!
 * \file    SGCADIDisassemblerAdapter.h
 * \brief   Disassembler adapter for LISA components.
 * \date    Copyright 2011 ARM Limited. All rights reserved.
 *
 */
#ifndef SGCADIDisassemblerAdapter_h_
#define SGCADIDisassemblerAdapter_h_

// this file is always generated by simgen from CADIDisassemblerProtocol.lisa:
#include "protocol_CADIDisassemblerProtocol.h"
#include "eslapi/CADIDisassembler.h"

namespace sg
{

/// This class defines the interface for a disassembler module
class CADIDisassemblerAdapter: public eslapi::CADIDisassembler
{
public:
    // constructor
    CADIDisassemblerAdapter(protocol_CADIDisassemblerProtocol *interface_): port(interface_) {}
    
    // Distinguish different types of disassembly
    eslapi::CADIDisassemblerType GetType() const { return port->GetType(); }

    // return number of modes
    uint32_t GetModeCount() const { return port->GetModeCount(); }

    // Query names of all modes. Triggers callbacks to CADIDisassemblerCB::ReceiveModeName(), once for every mode.
    void GetModeNames(eslapi::CADIDisassemblerCB *callback) { return port->GetModeNames(callback); }

    // Get current execution mode. If modes are not supported by this target return 0. If modes are supported returns 0 < x <= GetModeCount().
    uint32_t GetCurrentMode() { return port->GetCurrentMode(); }

    // Retrieves source-level information. Triggers a call of CADIDisassemblerCB::ReceiveSourceReference().
    eslapi::CADIDisassemblerStatus GetSourceReferenceForAddress(eslapi::CADIDisassemblerCB *callback, const eslapi::CADIAddr_t &address) { return port->GetSourceReferenceForAddress(callback, address); }

    // First address corresponding generated for the given source line.
    eslapi::CADIDisassemblerStatus GetAddressForSourceReference(const char *sourceFile, uint32_t sourceLine, eslapi::CADIAddr_t &address) { return port->GetAddressForSourceReference(sourceFile, sourceLine, address); }

    // Function for standard type disassembly
    eslapi::CADIDisassemblerStatus GetDisassembly(eslapi::CADIDisassemblerCB *callback,
                                                  const eslapi::CADIAddr_t &address,
                                                  eslapi::CADIAddr_t &nextAddr,
                                                  const uint32_t mode,
                                                  uint32_t desiredCount) { return port->GetDisassembly(callback, address, nextAddr, mode, desiredCount); }
    
    // Query if an instruction is a call instruction
    eslapi::CADIDisassemblerStatus GetInstructionType(const eslapi::CADIAddr_t &address, eslapi::CADIDisassemblerInstructionType &insn_type) { return port->GetInstructionType(address, insn_type); }
    
private:
    protocol_CADIDisassemblerProtocol *port;
};
    
} // namespace sg

#endif

