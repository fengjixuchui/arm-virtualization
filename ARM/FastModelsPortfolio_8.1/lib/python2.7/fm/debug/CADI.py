# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _CADI.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CADI', [dirname(__file__)])
        except ImportError:
            import _CADI
            return _CADI
        if fp is not None:
            try:
                _mod = imp.load_module('_CADI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CADI = swig_import_helper()
    del swig_import_helper
else:
    import _CADI
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


AUTODOC_LEVEL = _CADI.AUTODOC_LEVEL
class CADILoaderException(Exception):
    """Proxy of C++ CADILoaderException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CADILoaderException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CADILoaderException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, message_) -> CADILoaderException"""
        _CADI.CADILoaderException_swiginit(self,_CADI.new_CADILoaderException(*args))
    __swig_destroy__ = _CADI.delete_CADILoaderException
    def what(self):
        """what(self) -> char const *"""
        return _CADI.CADILoaderException_what(self)

    def __str__(self):
        return self.what()

CADILoaderException.what = new_instancemethod(_CADI.CADILoaderException_what,None,CADILoaderException)
CADILoaderException_swigregister = _CADI.CADILoaderException_swigregister
CADILoaderException_swigregister(CADILoaderException)

class CADIDll(object):
    """Proxy of C++ CADIDll class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CADIDll"""
        _CADI.CADIDll_swiginit(self,_CADI.new_CADIDll())
    __swig_destroy__ = _CADI.delete_CADIDll
    def openDll(self, *args):
        """openDll(self, dll_name)"""
        return _CADI.CADIDll_openDll(self, *args)

    def CreateCADIBroker(self):
        """CreateCADIBroker(self) -> CADIBroker"""
        return _CADI.CADIDll_CreateCADIBroker(self)

CADIDll.openDll = new_instancemethod(_CADI.CADIDll_openDll,None,CADIDll)
CADIDll.CreateCADIBroker = new_instancemethod(_CADI.CADIDll_CreateCADIBroker,None,CADIDll)
CADIDll_swigregister = _CADI.CADIDll_swigregister
CADIDll_swigregister(CADIDll)

class CADIClient(object):
    """Proxy of C++ CADIClient class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CADIClient"""
        _CADI.CADIClient_swiginit(self,_CADI.new_CADIClient())
    __swig_destroy__ = _CADI.delete_CADIClient
    def CreateCADIBroker(self, *args):
        """CreateCADIBroker(self, address) -> CADIBroker"""
        return _CADI.CADIClient_CreateCADIBroker(self, *args)

CADIClient.CreateCADIBroker = new_instancemethod(_CADI.CADIClient_CreateCADIBroker,None,CADIClient)
CADIClient_swigregister = _CADI.CADIClient_swigregister
CADIClient_swigregister(CADIClient)

class CAInterface(object):
    """Proxy of C++ eslapi::CAInterface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CAInterface_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CAInterface_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    __swig_destroy__ = _CADI.delete_CAInterface
    def ObtainInterface(self, *args):
        """ObtainInterface(self, ifName, minRev) -> CAInterface"""
        return _CADI.CAInterface_ObtainInterface(self, *args)

CAInterface.ObtainInterface = new_instancemethod(_CADI.CAInterface_ObtainInterface,None,CAInterface)
CAInterface_swigregister = _CADI.CAInterface_swigregister
CAInterface_swigregister(CAInterface)

def CAInterface_IFNAME():
  """CAInterface_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CAInterface_IFNAME()

def CAInterface_IFREVISION():
  """CAInterface_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CAInterface_IFREVISION()

class CADIRegDetails_simple(object):
    """Proxy of C++ CADIRegDetails_simple class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, type_par=CADI_REGTYPE_Simple, count_par=0) -> CADIRegDetails_simple"""
        _CADI.CADIRegDetails_simple_swiginit(self,_CADI.new_CADIRegDetails_simple(*args, **kwargs))
    type = _swig_property(_CADI.CADIRegDetails_simple_type_get, _CADI.CADIRegDetails_simple_type_set)
    __swig_destroy__ = _CADI.delete_CADIRegDetails_simple
CADIRegDetails_simple_swigregister = _CADI.CADIRegDetails_simple_swigregister
CADIRegDetails_simple_swigregister(CADIRegDetails_simple)

CADI_REG_ALLGROUPS = _CADI.CADI_REG_ALLGROUPS
CADI_MEMBLOCK_ROOT = _CADI.CADI_MEMBLOCK_ROOT
CADI_NAME_SIZE = _CADI.CADI_NAME_SIZE
CADI_DESCRIPTION_SIZE = _CADI.CADI_DESCRIPTION_SIZE
CADI_ERROR_MESSAGE_SIZE = _CADI.CADI_ERROR_MESSAGE_SIZE
CADI_DESCRIPTION = _CADI.CADI_DESCRIPTION
CADI_INVALID_REGISTER_ID = _CADI.CADI_INVALID_REGISTER_ID
class CADISimulationInfo(object):
    """Proxy of C++ eslapi::CADISimulationInfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, id_par=0, name_par="", description_par=""): 
        """__init__(eslapi::CADISimulationInfo_t self, uint32_t id_par=0, char const * name_par="", char const * description_par="") -> CADISimulationInfo"""
        _CADI.CADISimulationInfo_swiginit(self,_CADI.new_CADISimulationInfo(id_par, name_par, description_par))
    id = _swig_property(_CADI.CADISimulationInfo_id_get, _CADI.CADISimulationInfo_id_set)
    name = _swig_property(_CADI.CADISimulationInfo_name_get, _CADI.CADISimulationInfo_name_set)
    description = _swig_property(_CADI.CADISimulationInfo_description_get, _CADI.CADISimulationInfo_description_set)
    __swig_destroy__ = _CADI.delete_CADISimulationInfo
CADISimulationInfo_swigregister = _CADI.CADISimulationInfo_swigregister
CADISimulationInfo_swigregister(CADISimulationInfo)

CADI_PARAM_INVALID = _CADI.CADI_PARAM_INVALID
CADI_PARAM_STRING = _CADI.CADI_PARAM_STRING
CADI_PARAM_BOOL = _CADI.CADI_PARAM_BOOL
CADI_PARAM_INT = _CADI.CADI_PARAM_INT
CADI_PARAM_ENUM_MAX = _CADI.CADI_PARAM_ENUM_MAX
class CADIParameterInfo(object):
    """Proxy of C++ eslapi::CADIParameterInfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIParameterInfo_t self, uint32_t id_par=0, char const * name_par="", eslapi::CADIValueDataType_t dataType_par=CADI_PARAM_INVALID, 
            char const * description_par="", uint32_t isRunTime_par=0, 
            int64_t minValue_par=0, int64_t maxValue_par=0, int64_t defaultValue_par=0, 
            char const * defaultString_par="") -> CADIParameterInfo
        """
        _CADI.CADIParameterInfo_swiginit(self,_CADI.new_CADIParameterInfo(*args, **kwargs))
    id = _swig_property(_CADI.CADIParameterInfo_id_get, _CADI.CADIParameterInfo_id_set)
    name = _swig_property(_CADI.CADIParameterInfo_name_get, _CADI.CADIParameterInfo_name_set)
    dataType = _swig_property(_CADI.CADIParameterInfo_dataType_get, _CADI.CADIParameterInfo_dataType_set)
    description = _swig_property(_CADI.CADIParameterInfo_description_get, _CADI.CADIParameterInfo_description_set)
    isRunTime = _swig_property(_CADI.CADIParameterInfo_isRunTime_get, _CADI.CADIParameterInfo_isRunTime_set)
    minValue = _swig_property(_CADI.CADIParameterInfo_minValue_get, _CADI.CADIParameterInfo_minValue_set)
    maxValue = _swig_property(_CADI.CADIParameterInfo_maxValue_get, _CADI.CADIParameterInfo_maxValue_set)
    defaultValue = _swig_property(_CADI.CADIParameterInfo_defaultValue_get, _CADI.CADIParameterInfo_defaultValue_set)
    defaultString = _swig_property(_CADI.CADIParameterInfo_defaultString_get, _CADI.CADIParameterInfo_defaultString_set)
    __swig_destroy__ = _CADI.delete_CADIParameterInfo
CADIParameterInfo_swigregister = _CADI.CADIParameterInfo_swigregister
CADIParameterInfo_swigregister(CADIParameterInfo)

class CADIParameterValue(object):
    """Proxy of C++ eslapi::CADIParameterValue_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIParameterValue_t self, uint32_t parameterID_par=static_cast< uint32_t >(-1), eslapi::CADIValueDataType_t dataType_par=CADI_PARAM_INVALID, 
            int64_t intValue_par=0, char const * stringValue_par="") -> CADIParameterValue
        """
        _CADI.CADIParameterValue_swiginit(self,_CADI.new_CADIParameterValue(*args, **kwargs))
    parameterID = _swig_property(_CADI.CADIParameterValue_parameterID_get, _CADI.CADIParameterValue_parameterID_set)
    dataType = _swig_property(_CADI.CADIParameterValue_dataType_get, _CADI.CADIParameterValue_dataType_set)
    intValue = _swig_property(_CADI.CADIParameterValue_intValue_get, _CADI.CADIParameterValue_intValue_set)
    stringValue = _swig_property(_CADI.CADIParameterValue_stringValue_get, _CADI.CADIParameterValue_stringValue_set)
    def value(self):
        if self.dataType == CADI_PARAM_INVALID:
            return None
        elif self.dataType == CADI_PARAM_STRING:
            return self.stringValue
        elif self.dataType == CADI_PARAM_BOOL:
            return True if self.intValue else False
        elif self.dataType == CADI_PARAM_INT:
            return self.intValue
        else:
            raise TypeError("Invalid parameter data type")

    def __str__(self):
        return str(self.value())


    __swig_destroy__ = _CADI.delete_CADIParameterValue
CADIParameterValue_swigregister = _CADI.CADIParameterValue_swigregister
CADIParameterValue_swigregister(CADIParameterValue)

class CADITargetInfo(object):
    """Proxy of C++ eslapi::CADITargetInfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, id_par=0, targetName_par="", instanceName_par="", version_par="", description_par="", 
    componentType_par="", numberOfParameters_par=0, executesSoftware_par=False, 
    isHardwareModel_par=0, systemName_par="", systemID_par=0, systemDescription_par="", 
    canRunInBackground_par=False): 
        """
        __init__(eslapi::CADITargetInfo_t self, uint32_t id_par=0, char const * targetName_par="", char const * instanceName_par="", 
            char const * version_par="", char const * description_par="", char const * componentType_par="", 
            uint32_t numberOfParameters_par=0, bool executesSoftware_par=False, 
            uint32_t isHardwareModel_par=0, char const * systemName_par="", 
            uint32_t systemID_par=0, char const * systemDescription_par="", bool canRunInBackground_par=False) -> CADITargetInfo
        """
        _CADI.CADITargetInfo_swiginit(self,_CADI.new_CADITargetInfo(id_par, targetName_par, instanceName_par, version_par, description_par, componentType_par, 
    numberOfParameters_par, executesSoftware_par, isHardwareModel_par, 
    systemName_par, systemID_par, systemDescription_par, canRunInBackground_par))
    id = _swig_property(_CADI.CADITargetInfo_id_get, _CADI.CADITargetInfo_id_set)
    targetName = _swig_property(_CADI.CADITargetInfo_targetName_get, _CADI.CADITargetInfo_targetName_set)
    instanceName = _swig_property(_CADI.CADITargetInfo_instanceName_get, _CADI.CADITargetInfo_instanceName_set)
    version = _swig_property(_CADI.CADITargetInfo_version_get, _CADI.CADITargetInfo_version_set)
    description = _swig_property(_CADI.CADITargetInfo_description_get, _CADI.CADITargetInfo_description_set)
    componentType = _swig_property(_CADI.CADITargetInfo_componentType_get, _CADI.CADITargetInfo_componentType_set)
    numberOfParameters = _swig_property(_CADI.CADITargetInfo_numberOfParameters_get, _CADI.CADITargetInfo_numberOfParameters_set)
    executesSoftware = _swig_property(_CADI.CADITargetInfo_executesSoftware_get, _CADI.CADITargetInfo_executesSoftware_set)
    isHardwareModel = _swig_property(_CADI.CADITargetInfo_isHardwareModel_get, _CADI.CADITargetInfo_isHardwareModel_set)
    systemName = _swig_property(_CADI.CADITargetInfo_systemName_get, _CADI.CADITargetInfo_systemName_set)
    systemID = _swig_property(_CADI.CADITargetInfo_systemID_get, _CADI.CADITargetInfo_systemID_set)
    systemDescription = _swig_property(_CADI.CADITargetInfo_systemDescription_get, _CADI.CADITargetInfo_systemDescription_set)
    canRunInBackground = _swig_property(_CADI.CADITargetInfo_canRunInBackground_get, _CADI.CADITargetInfo_canRunInBackground_set)
    __swig_destroy__ = _CADI.delete_CADITargetInfo
CADITargetInfo_swigregister = _CADI.CADITargetInfo_swigregister
CADITargetInfo_swigregister(CADITargetInfo)

CADIFACT_ERROR_OK = _CADI.CADIFACT_ERROR_OK
CADIFACT_ERROR_LICENSE_FOUND_BUT_EXPIRED = _CADI.CADIFACT_ERROR_LICENSE_FOUND_BUT_EXPIRED
CADIFACT_ERROR_LICENSE_NOT_FOUND = _CADI.CADIFACT_ERROR_LICENSE_NOT_FOUND
CADIFACT_ERROR_LICENSE_COUNT_EXCEEDED = _CADI.CADIFACT_ERROR_LICENSE_COUNT_EXCEEDED
CADIFACT_ERROR_CANNOT_CONTACT_LICENSE_SERVER = _CADI.CADIFACT_ERROR_CANNOT_CONTACT_LICENSE_SERVER
CADIFACT_ERROR_WARNING_LICENSE_WILL_EXPIRE_SOON = _CADI.CADIFACT_ERROR_WARNING_LICENSE_WILL_EXPIRE_SOON
CADIFACT_ERROR_GENERAL_LICENSE_ERROR = _CADI.CADIFACT_ERROR_GENERAL_LICENSE_ERROR
CADIFACT_ERROR_PARAMETER_TYPE_MISMATCH = _CADI.CADIFACT_ERROR_PARAMETER_TYPE_MISMATCH
CADIFACT_ERROR_PARAMETER_VALUE_OUT_OF_RANGE = _CADI.CADIFACT_ERROR_PARAMETER_VALUE_OUT_OF_RANGE
CADIFACT_ERROR_PARAMETER_VALUE_INVALID = _CADI.CADIFACT_ERROR_PARAMETER_VALUE_INVALID
CADIFACT_ERROR_UNKNOWN_PARAMETER_ID = _CADI.CADIFACT_ERROR_UNKNOWN_PARAMETER_ID
CADIFACT_ERROR_GENERAL_PARAMETER_ERROR = _CADI.CADIFACT_ERROR_GENERAL_PARAMETER_ERROR
CADIFACT_ERROR_GENERAL_ERROR = _CADI.CADIFACT_ERROR_GENERAL_ERROR
CADIFACT_ERROR_GENERAL_WARNING = _CADI.CADIFACT_ERROR_GENERAL_WARNING
CADIFACT_ERROR_MAX = _CADI.CADIFACT_ERROR_MAX
CADIFACT_SEVERITY_OK = _CADI.CADIFACT_SEVERITY_OK
CADIFACT_SEVERITY_WARNING = _CADI.CADIFACT_SEVERITY_WARNING
CADIFACT_SEVERITY_ERROR = _CADI.CADIFACT_SEVERITY_ERROR
CADIFACT_SEVERITY_MAX = _CADI.CADIFACT_SEVERITY_MAX
class CADIFactoryErrorMessage(object):
    """Proxy of C++ eslapi::CADIFactoryErrorMessage_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIFactoryErrorMessage_t self, eslapi::CADIFactoryErrorCode_t errorCode_par=CADIFACT_ERROR_OK, uint32_t erroneousParameterId_par=~0U, 
            char const * message_par="", eslapi::CADIFactorySeverityCode_t severity_par=CADIFACT_SEVERITY_OK) -> CADIFactoryErrorMessage
        """
        _CADI.CADIFactoryErrorMessage_swiginit(self,_CADI.new_CADIFactoryErrorMessage(*args, **kwargs))
    errorCode = _swig_property(_CADI.CADIFactoryErrorMessage_errorCode_get, _CADI.CADIFactoryErrorMessage_errorCode_set)
    erroneousParameterId = _swig_property(_CADI.CADIFactoryErrorMessage_erroneousParameterId_get, _CADI.CADIFactoryErrorMessage_erroneousParameterId_set)
    message = _swig_property(_CADI.CADIFactoryErrorMessage_message_get, _CADI.CADIFactoryErrorMessage_message_set)
    severity = _swig_property(_CADI.CADIFactoryErrorMessage_severity_get, _CADI.CADIFactoryErrorMessage_severity_set)
    __swig_destroy__ = _CADI.delete_CADIFactoryErrorMessage
CADIFactoryErrorMessage_swigregister = _CADI.CADIFactoryErrorMessage_swigregister
CADIFactoryErrorMessage_swigregister(CADIFactoryErrorMessage)

CADI_STATUS_OK = _CADI.CADI_STATUS_OK
CADI_STATUS_GeneralError = _CADI.CADI_STATUS_GeneralError
CADI_STATUS_UnknownCommand = _CADI.CADI_STATUS_UnknownCommand
CADI_STATUS_IllegalArgument = _CADI.CADI_STATUS_IllegalArgument
CADI_STATUS_CmdNotSupported = _CADI.CADI_STATUS_CmdNotSupported
CADI_STATUS_ArgNotSupported = _CADI.CADI_STATUS_ArgNotSupported
CADI_STATUS_InsufficientResources = _CADI.CADI_STATUS_InsufficientResources
CADI_STATUS_TargetNotResponding = _CADI.CADI_STATUS_TargetNotResponding
CADI_STATUS_TargetBusy = _CADI.CADI_STATUS_TargetBusy
CADI_STATUS_BufferSize = _CADI.CADI_STATUS_BufferSize
CADI_STATUS_SecurityViolation = _CADI.CADI_STATUS_SecurityViolation
CADI_STATUS_PermissionDenied = _CADI.CADI_STATUS_PermissionDenied
CADI_STATUS_ENUM_MAX = _CADI.CADI_STATUS_ENUM_MAX
class CADITargetFeatures(object):
    """Proxy of C++ eslapi::CADITargetFeatures_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADITargetFeatures_t self, char const * targetName_par="", char const * targetVersion_par="", uint32_t nrBreakpointsAvailable_par=0, 
            uint8_t fOverlaySupportAvailable_par=0, uint8_t fProfilingAvailable_par=0, 
            uint32_t nrResetLevels_par=0, uint32_t nrExecModes_par=0, 
            uint32_t nrExceptions_par=0, uint32_t nrMemSpaces_par=0, uint32_t nrRegisterGroups_par=0, 
            uint32_t nrPipeStages_par=0, uint32_t nPCRegNum_par=CADI_INVALID_REGISTER_ID, 
            uint16_t handledBreakpoints_par=0, uint32_t nrOfHWThreads_par=0, 
            uint32_t nExtendedTargetFeaturesRegNum_par=CADI_INVALID_REGISTER_ID, 
            char const * canonicalRegisterDescription_par="", char const * canonicalMemoryDescription_par="", 
            uint8_t canCompleteMultipleInstructionsPerCycle_par=0) -> CADITargetFeatures
        """
        _CADI.CADITargetFeatures_swiginit(self,_CADI.new_CADITargetFeatures(*args, **kwargs))
    targetName = _swig_property(_CADI.CADITargetFeatures_targetName_get, _CADI.CADITargetFeatures_targetName_set)
    targetVersion = _swig_property(_CADI.CADITargetFeatures_targetVersion_get, _CADI.CADITargetFeatures_targetVersion_set)
    nrBreakpointsAvailable = _swig_property(_CADI.CADITargetFeatures_nrBreakpointsAvailable_get, _CADI.CADITargetFeatures_nrBreakpointsAvailable_set)
    fOverlaySupportAvailable = _swig_property(_CADI.CADITargetFeatures_fOverlaySupportAvailable_get, _CADI.CADITargetFeatures_fOverlaySupportAvailable_set)
    fProfilingAvailable = _swig_property(_CADI.CADITargetFeatures_fProfilingAvailable_get, _CADI.CADITargetFeatures_fProfilingAvailable_set)
    nrResetLevels = _swig_property(_CADI.CADITargetFeatures_nrResetLevels_get, _CADI.CADITargetFeatures_nrResetLevels_set)
    nrExecModes = _swig_property(_CADI.CADITargetFeatures_nrExecModes_get, _CADI.CADITargetFeatures_nrExecModes_set)
    nrExceptions = _swig_property(_CADI.CADITargetFeatures_nrExceptions_get, _CADI.CADITargetFeatures_nrExceptions_set)
    nrMemSpaces = _swig_property(_CADI.CADITargetFeatures_nrMemSpaces_get, _CADI.CADITargetFeatures_nrMemSpaces_set)
    nrRegisterGroups = _swig_property(_CADI.CADITargetFeatures_nrRegisterGroups_get, _CADI.CADITargetFeatures_nrRegisterGroups_set)
    nrPipeStages = _swig_property(_CADI.CADITargetFeatures_nrPipeStages_get, _CADI.CADITargetFeatures_nrPipeStages_set)
    nPCRegNum = _swig_property(_CADI.CADITargetFeatures_nPCRegNum_get, _CADI.CADITargetFeatures_nPCRegNum_set)
    handledBreakpoints = _swig_property(_CADI.CADITargetFeatures_handledBreakpoints_get, _CADI.CADITargetFeatures_handledBreakpoints_set)
    nrOfHWThreads = _swig_property(_CADI.CADITargetFeatures_nrOfHWThreads_get, _CADI.CADITargetFeatures_nrOfHWThreads_set)
    nExtendedTargetFeaturesRegNumValid = _swig_property(_CADI.CADITargetFeatures_nExtendedTargetFeaturesRegNumValid_get, _CADI.CADITargetFeatures_nExtendedTargetFeaturesRegNumValid_set)
    nExtendedTargetFeaturesRegNum = _swig_property(_CADI.CADITargetFeatures_nExtendedTargetFeaturesRegNum_get, _CADI.CADITargetFeatures_nExtendedTargetFeaturesRegNum_set)
    canonicalRegisterDescription = _swig_property(_CADI.CADITargetFeatures_canonicalRegisterDescription_get, _CADI.CADITargetFeatures_canonicalRegisterDescription_set)
    canonicalMemoryDescription = _swig_property(_CADI.CADITargetFeatures_canonicalMemoryDescription_get, _CADI.CADITargetFeatures_canonicalMemoryDescription_set)
    canCompleteMultipleInstructionsPerCycle = _swig_property(_CADI.CADITargetFeatures_canCompleteMultipleInstructionsPerCycle_get, _CADI.CADITargetFeatures_canCompleteMultipleInstructionsPerCycle_set)
    __swig_destroy__ = _CADI.delete_CADITargetFeatures
CADITargetFeatures_swigregister = _CADI.CADITargetFeatures_swigregister
CADITargetFeatures_swigregister(CADITargetFeatures)

CADI_CB_AppliOpen = _CADI.CADI_CB_AppliOpen
CADI_CB_AppliInput = _CADI.CADI_CB_AppliInput
CADI_CB_AppliOutput = _CADI.CADI_CB_AppliOutput
CADI_CB_AppliClose = _CADI.CADI_CB_AppliClose
CADI_CB_String = _CADI.CADI_CB_String
CADI_CB_ModeChange = _CADI.CADI_CB_ModeChange
CADI_CB_Reset = _CADI.CADI_CB_Reset
CADI_CB_CycleTick = _CADI.CADI_CB_CycleTick
CADI_CB_KillInterface = _CADI.CADI_CB_KillInterface
CADI_CB_Bypass = _CADI.CADI_CB_Bypass
CADI_CB_LookupSymbol = _CADI.CADI_CB_LookupSymbol
CADI_CB_DisasmNotifyModeChange = _CADI.CADI_CB_DisasmNotifyModeChange
CADI_CB_DisasmNotifyFileChange = _CADI.CADI_CB_DisasmNotifyFileChange
CADI_CB_Refresh = _CADI.CADI_CB_Refresh
CADI_CB_ProfileResourceAccess = _CADI.CADI_CB_ProfileResourceAccess
CADI_CB_ProfileRegisterHazard = _CADI.CADI_CB_ProfileRegisterHazard
CADI_CB_Count = _CADI.CADI_CB_Count
CADI_CB_ENUM_MAX = _CADI.CADI_CB_ENUM_MAX
CADI_SIM_CB_Message = _CADI.CADI_SIM_CB_Message
CADI_SIM_CB_Shutdown = _CADI.CADI_SIM_CB_Shutdown
CADI_SIM_CB_Kill = _CADI.CADI_SIM_CB_Kill
CADI_SIM_CB_Count = _CADI.CADI_SIM_CB_Count
CADI_SIM_ENUM_MAX = _CADI.CADI_SIM_ENUM_MAX
CADI_PIPESTAGE_Invalid = _CADI.CADI_PIPESTAGE_Invalid
CADI_PIPESTAGE_OpcodeOnly = _CADI.CADI_PIPESTAGE_OpcodeOnly
CADI_PIPESTAGE_DisassemblyOnly = _CADI.CADI_PIPESTAGE_DisassemblyOnly
CADI_PIPESTAGE_Instruction = _CADI.CADI_PIPESTAGE_Instruction
CADI_PIPESTAGE_ENUM_COUNT = _CADI.CADI_PIPESTAGE_ENUM_COUNT
CADI_PIPESTAGE_MAX = _CADI.CADI_PIPESTAGE_MAX
class CADIPipeStageField(object):
    """Proxy of C++ eslapi::CADIPipeStageField_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(eslapi::CADIPipeStageField_t self, uint32_t pipeStageId_par=0, uint32_t registerId_par=CADI_INVALID_REGISTER_ID) -> CADIPipeStageField"""
        _CADI.CADIPipeStageField_swiginit(self,_CADI.new_CADIPipeStageField(*args, **kwargs))
    pipeStageId = _swig_property(_CADI.CADIPipeStageField_pipeStageId_get, _CADI.CADIPipeStageField_pipeStageId_set)
    registerId = _swig_property(_CADI.CADIPipeStageField_registerId_get, _CADI.CADIPipeStageField_registerId_set)
    __swig_destroy__ = _CADI.delete_CADIPipeStageField
CADIPipeStageField_swigregister = _CADI.CADIPipeStageField_swigregister
CADIPipeStageField_swigregister(CADIPipeStageField)

class CADIPipeStage(object):
    """Proxy of C++ eslapi::CADIPipeStage_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIPipeStage_t self, uint32_t id_par=0, char const * name_par="", uint32_t pc_par=CADI_INVALID_REGISTER_ID, 
            uint32_t contentInfoRegisterId_par=CADI_INVALID_REGISTER_ID) -> CADIPipeStage
        """
        _CADI.CADIPipeStage_swiginit(self,_CADI.new_CADIPipeStage(*args, **kwargs))
    id = _swig_property(_CADI.CADIPipeStage_id_get, _CADI.CADIPipeStage_id_set)
    name = _swig_property(_CADI.CADIPipeStage_name_get, _CADI.CADIPipeStage_name_set)
    pc = _swig_property(_CADI.CADIPipeStage_pc_get, _CADI.CADIPipeStage_pc_set)
    contentInfoRegisterId = _swig_property(_CADI.CADIPipeStage_contentInfoRegisterId_get, _CADI.CADIPipeStage_contentInfoRegisterId_set)
    __swig_destroy__ = _CADI.delete_CADIPipeStage
CADIPipeStage_swigregister = _CADI.CADIPipeStage_swigregister
CADIPipeStage_swigregister(CADIPipeStage)

class CADIAddr(object):
    """Proxy of C++ eslapi::CADIAddr_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, space_par=0, addr_par=0): 
        """__init__(eslapi::CADIAddr_t self, eslapi::CADIMemSpace_t space_par=0, eslapi::CADIAddrSimple_t addr_par=0) -> CADIAddr"""
        _CADI.CADIAddr_swiginit(self,_CADI.new_CADIAddr(space_par, addr_par))
    def __eq__(self, *args, **kwargs):
        """__eq__(CADIAddr self, CADIAddr other) -> bool"""
        return _CADI.CADIAddr___eq__(self, *args, **kwargs)

    space = _swig_property(_CADI.CADIAddr_space_get, _CADI.CADIAddr_space_set)
    addr = _swig_property(_CADI.CADIAddr_addr_get, _CADI.CADIAddr_addr_set)
    __swig_destroy__ = _CADI.delete_CADIAddr
CADIAddr.__eq__ = new_instancemethod(_CADI.CADIAddr___eq__,None,CADIAddr)
CADIAddr_swigregister = _CADI.CADIAddr_swigregister
CADIAddr_swigregister(CADIAddr)
cvar = _CADI.cvar
CADI_MEM_SPACE_NOTSUPPORTED = cvar.CADI_MEM_SPACE_NOTSUPPORTED
CADI_NO_OVERLAY = cvar.CADI_NO_OVERLAY

class CADIAddrComplete(object):
    """Proxy of C++ eslapi::CADIAddrComplete_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(eslapi::CADIAddrComplete_t self, eslapi::CADIOverlayId_t overlay_par=0, CADIAddr location_par=eslapi::CADIAddr_t()) -> CADIAddrComplete"""
        _CADI.CADIAddrComplete_swiginit(self,_CADI.new_CADIAddrComplete(*args, **kwargs))
    def __eq__(self, *args, **kwargs):
        """__eq__(CADIAddrComplete self, CADIAddrComplete other) -> bool"""
        return _CADI.CADIAddrComplete___eq__(self, *args, **kwargs)

    overlay = _swig_property(_CADI.CADIAddrComplete_overlay_get, _CADI.CADIAddrComplete_overlay_set)
    location = _swig_property(_CADI.CADIAddrComplete_location_get, _CADI.CADIAddrComplete_location_set)
    __swig_destroy__ = _CADI.delete_CADIAddrComplete
CADIAddrComplete.__eq__ = new_instancemethod(_CADI.CADIAddrComplete___eq__,None,CADIAddrComplete)
CADIAddrComplete_swigregister = _CADI.CADIAddrComplete_swigregister
CADIAddrComplete_swigregister(CADIAddrComplete)

CADI_BPT_TRIGGER_ON_READ = _CADI.CADI_BPT_TRIGGER_ON_READ
CADI_BPT_TRIGGER_ON_WRITE = _CADI.CADI_BPT_TRIGGER_ON_WRITE
CADI_BPT_TRIGGER_ON_MODIFY = _CADI.CADI_BPT_TRIGGER_ON_MODIFY
CADI_BPT_CLEAR_ALL_TEMPORARY_BPTS = _CADI.CADI_BPT_CLEAR_ALL_TEMPORARY_BPTS
CADI_BPT_PROGRAM = _CADI.CADI_BPT_PROGRAM
CADI_BPT_MEMORY = _CADI.CADI_BPT_MEMORY
CADI_BPT_REGISTER = _CADI.CADI_BPT_REGISTER
CADI_BPT_INST_STEP = _CADI.CADI_BPT_INST_STEP
CADI_BPT_PROGRAM_RANGE = _CADI.CADI_BPT_PROGRAM_RANGE
CADI_BPT_EXCEPTION = _CADI.CADI_BPT_EXCEPTION
CADI_BPT_USER_DEFINED = _CADI.CADI_BPT_USER_DEFINED
CADI_TARGET_FEATURE_BPT_PROGRAM = _CADI.CADI_TARGET_FEATURE_BPT_PROGRAM
CADI_TARGET_FEATURE_BPT_MEMORY = _CADI.CADI_TARGET_FEATURE_BPT_MEMORY
CADI_TARGET_FEATURE_BPT_REGISTER = _CADI.CADI_TARGET_FEATURE_BPT_REGISTER
CADI_TARGET_FEATURE_BPT_INST_STEP = _CADI.CADI_TARGET_FEATURE_BPT_INST_STEP
CADI_TARGET_FEATURE_BPT_PROGRAM_RANGE = _CADI.CADI_TARGET_FEATURE_BPT_PROGRAM_RANGE
CADI_TARGET_FEATURE_BPT_EXCEPTION = _CADI.CADI_TARGET_FEATURE_BPT_EXCEPTION
CADI_BPT_COND_UNCONDITIONAL = _CADI.CADI_BPT_COND_UNCONDITIONAL
CADI_BPT_COND_EQUALS = _CADI.CADI_BPT_COND_EQUALS
CADI_BPT_COND_NOT_EQUALS = _CADI.CADI_BPT_COND_NOT_EQUALS
CADI_BPT_COND_GREATER_THAN_SIGNED = _CADI.CADI_BPT_COND_GREATER_THAN_SIGNED
CADI_BPT_COND_GREATER_THAN_OR_EQUALS_SIGNED = _CADI.CADI_BPT_COND_GREATER_THAN_OR_EQUALS_SIGNED
CADI_BPT_COND_LESS_THAN_SIGNED = _CADI.CADI_BPT_COND_LESS_THAN_SIGNED
CADI_BPT_COND_LESS_THAN_OR_EQUALS_SIGNED = _CADI.CADI_BPT_COND_LESS_THAN_OR_EQUALS_SIGNED
CADI_BPT_COND_GREATER_THAN_UNSIGNED = _CADI.CADI_BPT_COND_GREATER_THAN_UNSIGNED
CADI_BPT_COND_GREATER_THAN_OR_EQUALS_UNSIGNED = _CADI.CADI_BPT_COND_GREATER_THAN_OR_EQUALS_UNSIGNED
CADI_BPT_COND_LESS_THAN_UNSIGNED = _CADI.CADI_BPT_COND_LESS_THAN_UNSIGNED
CADI_BPT_COND_LESS_THAN_OR_EQUALS_UNSIGNED = _CADI.CADI_BPT_COND_LESS_THAN_OR_EQUALS_UNSIGNED
CADI_BPT_COND_ENUM_COUNT = _CADI.CADI_BPT_COND_ENUM_COUNT
CADI_BPT_COND_GREATER_THAN = _CADI.CADI_BPT_COND_GREATER_THAN
CADI_BPT_COND_GREATER_THAN_OR_EQUALS = _CADI.CADI_BPT_COND_GREATER_THAN_OR_EQUALS
CADI_BPT_COND_LESS_THAN = _CADI.CADI_BPT_COND_LESS_THAN
CADI_BPT_COND_LESS_THAN_OR_EQUALS = _CADI.CADI_BPT_COND_LESS_THAN_OR_EQUALS
CADI_BPT_COND_THREADID = _CADI.CADI_BPT_COND_THREADID
CADI_BPT_COND_ENUM_MAX = _CADI.CADI_BPT_COND_ENUM_MAX
class CADIBptCondition(object):
    """Proxy of C++ eslapi::CADIBptCondition_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIBptCondition_t self, eslapi::CADIBptConditionOperator_t conditionOperator_par=CADI_BPT_COND_UNCONDITIONAL, 
            int64_t comparisonValue_par=0, uint32_t threadID_par=0, uint32_t ignoreCount_par=0, 
            uint32_t bitwidth_par=0) -> CADIBptCondition
        """
        _CADI.CADIBptCondition_swiginit(self,_CADI.new_CADIBptCondition(*args, **kwargs))
    conditionOperator = _swig_property(_CADI.CADIBptCondition_conditionOperator_get, _CADI.CADIBptCondition_conditionOperator_set)
    comparisonValue = _swig_property(_CADI.CADIBptCondition_comparisonValue_get, _CADI.CADIBptCondition_comparisonValue_set)
    threadID = _swig_property(_CADI.CADIBptCondition_threadID_get, _CADI.CADIBptCondition_threadID_set)
    ignoreCount = _swig_property(_CADI.CADIBptCondition_ignoreCount_get, _CADI.CADIBptCondition_ignoreCount_set)
    bitwidth = _swig_property(_CADI.CADIBptCondition_bitwidth_get, _CADI.CADIBptCondition_bitwidth_set)
    __swig_destroy__ = _CADI.delete_CADIBptCondition
CADIBptCondition_swigregister = _CADI.CADIBptCondition_swigregister
CADIBptCondition_swigregister(CADIBptCondition)

class CADIBptRequest(object):
    """Proxy of C++ eslapi::CADIBptRequest_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIBptRequest_t self, CADIAddrComplete address_par=eslapi::CADIAddrComplete_t(), uint64_t sizeOfAddressRange_par=0, 
            int32_t enabled_par=0, char const * conditions_par="", bool useFormalCondition_par=1, 
            CADIBptCondition formalCondition_par=eslapi::CADIBptCondition_t(), 
            eslapi::CADIBptType_t type_par=CADI_BPT_PROGRAM, uint32_t regNumber_par=0, 
            int32_t temporary_par=False, uint8_t triggerType_par=0, uint32_t continueExecution_par=False) -> CADIBptRequest
        """
        _CADI.CADIBptRequest_swiginit(self,_CADI.new_CADIBptRequest(*args, **kwargs))
    address = _swig_property(_CADI.CADIBptRequest_address_get, _CADI.CADIBptRequest_address_set)
    sizeOfAddressRange = _swig_property(_CADI.CADIBptRequest_sizeOfAddressRange_get, _CADI.CADIBptRequest_sizeOfAddressRange_set)
    enabled = _swig_property(_CADI.CADIBptRequest_enabled_get, _CADI.CADIBptRequest_enabled_set)
    conditions = _swig_property(_CADI.CADIBptRequest_conditions_get, _CADI.CADIBptRequest_conditions_set)
    useFormalCondition = _swig_property(_CADI.CADIBptRequest_useFormalCondition_get, _CADI.CADIBptRequest_useFormalCondition_set)
    formalCondition = _swig_property(_CADI.CADIBptRequest_formalCondition_get, _CADI.CADIBptRequest_formalCondition_set)
    type = _swig_property(_CADI.CADIBptRequest_type_get, _CADI.CADIBptRequest_type_set)
    regNumber = _swig_property(_CADI.CADIBptRequest_regNumber_get, _CADI.CADIBptRequest_regNumber_set)
    temporary = _swig_property(_CADI.CADIBptRequest_temporary_get, _CADI.CADIBptRequest_temporary_set)
    triggerType = _swig_property(_CADI.CADIBptRequest_triggerType_get, _CADI.CADIBptRequest_triggerType_set)
    continueExecution = _swig_property(_CADI.CADIBptRequest_continueExecution_get, _CADI.CADIBptRequest_continueExecution_set)
    __swig_destroy__ = _CADI.delete_CADIBptRequest
CADIBptRequest_swigregister = _CADI.CADIBptRequest_swigregister
CADIBptRequest_swigregister(CADIBptRequest)

class CADIBptDescription(object):
    """Proxy of C++ eslapi::CADIBptDescription_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(eslapi::CADIBptDescription_t self, eslapi::CADIBptNumber_t bptNumber_par=0, CADIBptRequest bptInfo_par=eslapi::CADIBptRequest_t()) -> CADIBptDescription"""
        _CADI.CADIBptDescription_swiginit(self,_CADI.new_CADIBptDescription(*args, **kwargs))
    bptNumber = _swig_property(_CADI.CADIBptDescription_bptNumber_get, _CADI.CADIBptDescription_bptNumber_set)
    bptInfo = _swig_property(_CADI.CADIBptDescription_bptInfo_get, _CADI.CADIBptDescription_bptInfo_set)
    __swig_destroy__ = _CADI.delete_CADIBptDescription
CADIBptDescription_swigregister = _CADI.CADIBptDescription_swigregister
CADIBptDescription_swigregister(CADIBptDescription)

CADI_BPT_Disable = _CADI.CADI_BPT_Disable
CADI_BPT_Enable = _CADI.CADI_BPT_Enable
CADI_EXECMODE_Stop = _CADI.CADI_EXECMODE_Stop
CADI_EXECMODE_Run = _CADI.CADI_EXECMODE_Run
CADI_EXECMODE_Bpt = _CADI.CADI_EXECMODE_Bpt
CADI_EXECMODE_Error = _CADI.CADI_EXECMODE_Error
CADI_EXECMODE_HighLevelStep = _CADI.CADI_EXECMODE_HighLevelStep
CADI_EXECMODE_RunUnconditionally = _CADI.CADI_EXECMODE_RunUnconditionally
CADI_EXECMODE_ResetDone = _CADI.CADI_EXECMODE_ResetDone
CADI_EXECMODE_ENUM_MAX = _CADI.CADI_EXECMODE_ENUM_MAX
class CADIExecMode(object):
    """Proxy of C++ eslapi::CADIExecMode_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, number_par=0, name_par=""): 
        """__init__(eslapi::CADIExecMode_t self, uint32_t number_par=0, char const * name_par="") -> CADIExecMode"""
        _CADI.CADIExecMode_swiginit(self,_CADI.new_CADIExecMode(number_par, name_par))
    number = _swig_property(_CADI.CADIExecMode_number_get, _CADI.CADIExecMode_number_set)
    name = _swig_property(_CADI.CADIExecMode_name_get, _CADI.CADIExecMode_name_set)
    __swig_destroy__ = _CADI.delete_CADIExecMode
CADIExecMode_swigregister = _CADI.CADIExecMode_swigregister
CADIExecMode_swigregister(CADIExecMode)

class CADIResetLevel(object):
    """Proxy of C++ eslapi::CADIResetLevel_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, number_par=0, name_par=""): 
        """__init__(eslapi::CADIResetLevel_t self, uint32_t number_par=0, char const * name_par="") -> CADIResetLevel"""
        _CADI.CADIResetLevel_swiginit(self,_CADI.new_CADIResetLevel(number_par, name_par))
    number = _swig_property(_CADI.CADIResetLevel_number_get, _CADI.CADIResetLevel_number_set)
    name = _swig_property(_CADI.CADIResetLevel_name_get, _CADI.CADIResetLevel_name_set)
    __swig_destroy__ = _CADI.delete_CADIResetLevel
CADIResetLevel_swigregister = _CADI.CADIResetLevel_swigregister
CADIResetLevel_swigregister(CADIResetLevel)

class CADIException(object):
    """Proxy of C++ eslapi::CADIException_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(eslapi::CADIException_t self, uint32_t number_par=0, char const * name_par="", CADIAddr vector_par=eslapi::CADIAddr_t()) -> CADIException"""
        _CADI.CADIException_swiginit(self,_CADI.new_CADIException(*args, **kwargs))
    number = _swig_property(_CADI.CADIException_number_get, _CADI.CADIException_number_set)
    name = _swig_property(_CADI.CADIException_name_get, _CADI.CADIException_name_set)
    vector = _swig_property(_CADI.CADIException_vector_get, _CADI.CADIException_vector_set)
    __swig_destroy__ = _CADI.delete_CADIException
CADIException_swigregister = _CADI.CADIException_swigregister
CADIException_swigregister(CADIException)

CADI_EXCEPTION_Raise = _CADI.CADI_EXCEPTION_Raise
CADI_EXCEPTION_Lower = _CADI.CADI_EXCEPTION_Lower
CADI_EXCEPTION_Pulse = _CADI.CADI_EXCEPTION_Pulse
CADI_EXCEPTION_ENUM_MAX = _CADI.CADI_EXCEPTION_ENUM_MAX
CADI_REG_READ_WRITE = _CADI.CADI_REG_READ_WRITE
CADI_REG_READ_ONLY = _CADI.CADI_REG_READ_ONLY
CADI_REG_WRITE_ONLY = _CADI.CADI_REG_WRITE_ONLY
CADI_REG_READ_WRITE_RESTRICTED = _CADI.CADI_REG_READ_WRITE_RESTRICTED
CADI_REG_READ_ONLY_RESTRICTED = _CADI.CADI_REG_READ_ONLY_RESTRICTED
CADI_REG_WRITE_ONLY_RESTRICTED = _CADI.CADI_REG_WRITE_ONLY_RESTRICTED
CADI_REG_ATTR_MAX = _CADI.CADI_REG_ATTR_MAX
class CADIReg(object):
    """Proxy of C++ eslapi::CADIReg_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIReg_t self, uint32_t regNumber_par=0, uint64_t bytes_par=0, uint16_t offset128_par=0, bool isUndefined_par=False, 
            eslapi::CADIRegAccessAttribute_t attribute_par=CADI_REG_READ_WRITE) -> CADIReg
        """
        _CADI.CADIReg_swiginit(self,_CADI.new_CADIReg(*args, **kwargs))
    regNumber = _swig_property(_CADI.CADIReg_regNumber_get, _CADI.CADIReg_regNumber_set)
    bytes = _swig_property(_CADI.CADIReg_bytes_get, _CADI.CADIReg_bytes_set)
    offset128 = _swig_property(_CADI.CADIReg_offset128_get, _CADI.CADIReg_offset128_set)
    isUndefined = _swig_property(_CADI.CADIReg_isUndefined_get, _CADI.CADIReg_isUndefined_set)
    attribute = _swig_property(_CADI.CADIReg_attribute_get, _CADI.CADIReg_attribute_set)
    __swig_destroy__ = _CADI.delete_CADIReg
CADIReg_swigregister = _CADI.CADIReg_swigregister
CADIReg_swigregister(CADIReg)

class CADIRegGroup(object):
    """Proxy of C++ eslapi::CADIRegGroup_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, groupID_par=0, description_par="", numRegsInGroup_par=0, name_par="", isPseudoRegister_par=False): 
        """
        __init__(eslapi::CADIRegGroup_t self, uint32_t groupID_par=0, char const * description_par="", uint32_t numRegsInGroup_par=0, 
            char const * name_par="", bool isPseudoRegister_par=False) -> CADIRegGroup
        """
        _CADI.CADIRegGroup_swiginit(self,_CADI.new_CADIRegGroup(groupID_par, description_par, numRegsInGroup_par, name_par, isPseudoRegister_par))
    groupID = _swig_property(_CADI.CADIRegGroup_groupID_get, _CADI.CADIRegGroup_groupID_set)
    description = _swig_property(_CADI.CADIRegGroup_description_get, _CADI.CADIRegGroup_description_set)
    numRegsInGroup = _swig_property(_CADI.CADIRegGroup_numRegsInGroup_get, _CADI.CADIRegGroup_numRegsInGroup_set)
    name = _swig_property(_CADI.CADIRegGroup_name_get, _CADI.CADIRegGroup_name_set)
    isPseudoRegister = _swig_property(_CADI.CADIRegGroup_isPseudoRegister_get, _CADI.CADIRegGroup_isPseudoRegister_set)
    __swig_destroy__ = _CADI.delete_CADIRegGroup
CADIRegGroup_swigregister = _CADI.CADIRegGroup_swigregister
CADIRegGroup_swigregister(CADIRegGroup)

CADI_REGTYPE_HEX = _CADI.CADI_REGTYPE_HEX
CADI_REGTYPE_UINT = _CADI.CADI_REGTYPE_UINT
CADI_REGTYPE_INT = _CADI.CADI_REGTYPE_INT
CADI_REGTYPE_BOOL = _CADI.CADI_REGTYPE_BOOL
CADI_REGTYPE_FLOAT = _CADI.CADI_REGTYPE_FLOAT
CADI_REGTYPE_SYMBOL = _CADI.CADI_REGTYPE_SYMBOL
CADI_REGTYPE_STRING = _CADI.CADI_REGTYPE_STRING
CADI_REGTYPE_PC = _CADI.CADI_REGTYPE_PC
CADI_REGTYPE_BIN = _CADI.CADI_REGTYPE_BIN
CADI_REGTYPE_OCT = _CADI.CADI_REGTYPE_OCT
class CADIRegSymbols(object):
    """Proxy of C++ eslapi::CADIRegSymbols_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, numSymbols_par=0, Symbols_par=None): 
        """__init__(eslapi::CADIRegSymbols_t self, uint32_t numSymbols_par=0, char ** Symbols_par=None) -> CADIRegSymbols"""
        _CADI.CADIRegSymbols_swiginit(self,_CADI.new_CADIRegSymbols(numSymbols_par, Symbols_par))
    numSymbols = _swig_property(_CADI.CADIRegSymbols_numSymbols_get, _CADI.CADIRegSymbols_numSymbols_set)
    Symbols = _swig_property(_CADI.CADIRegSymbols_Symbols_get, _CADI.CADIRegSymbols_Symbols_set)
    def get_list(self):
        """
        get_list() -> list
        Returns the list of symbols
        """
        return _CADI.CADIRegSymbols_get_list(self)

    __swig_destroy__ = _CADI.delete_CADIRegSymbols
CADIRegSymbols.get_list = new_instancemethod(_CADI.CADIRegSymbols_get_list,None,CADIRegSymbols)
CADIRegSymbols_swigregister = _CADI.CADIRegSymbols_swigregister
CADIRegSymbols_swigregister(CADIRegSymbols)

class CADIRegFloatFormat(object):
    """Proxy of C++ eslapi::CADIRegFloatFormat_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, format_par=""): 
        """__init__(eslapi::CADIRegFloatFormat_t self, char const * format_par="") -> CADIRegFloatFormat"""
        _CADI.CADIRegFloatFormat_swiginit(self,_CADI.new_CADIRegFloatFormat(format_par))
    format = _swig_property(_CADI.CADIRegFloatFormat_format_get, _CADI.CADIRegFloatFormat_format_set)
    __swig_destroy__ = _CADI.delete_CADIRegFloatFormat
CADIRegFloatFormat_swigregister = _CADI.CADIRegFloatFormat_swigregister
CADIRegFloatFormat_swigregister(CADIRegFloatFormat)

CADI_REGTYPE_Simple = _CADI.CADI_REGTYPE_Simple
CADI_REGTYPE_Compound = _CADI.CADI_REGTYPE_Compound
class CADIRegInfo(object):
    """Proxy of C++ eslapi::CADIRegInfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIRegInfo_t self, char const * name_par="", char const * description_par="", uint32_t regNumber_par=0, 
            uint32_t bitsWide_par=0, int32_t hasSideEffects_par=0, eslapi::CADIRegDetails_t details_par=eslapi::CADIRegDetails_t(), 
            eslapi::CADIRegDisplay_t display_par=CADI_REGTYPE_HEX, 
            CADIRegSymbols symbols_par=eslapi::CADIRegSymbols_t(), 
            CADIRegFloatFormat fpFormat_par=eslapi::CADIRegFloatFormat_t(), uint32_t lsbOffset_par=0, 
            uint32_t dwarfIndex_par=~0U, bool isProfiled_par=False, 
            bool isPipeStageField_par=False, uint32_t threadID_par=0, eslapi::CADIRegAccessAttribute_t attribute_par=CADI_REG_READ_WRITE, 
            uint32_t canonicalRegisterNumber_par=0) -> CADIRegInfo
        """
        _CADI.CADIRegInfo_swiginit(self,_CADI.new_CADIRegInfo(*args, **kwargs))
    name = _swig_property(_CADI.CADIRegInfo_name_get, _CADI.CADIRegInfo_name_set)
    description = _swig_property(_CADI.CADIRegInfo_description_get, _CADI.CADIRegInfo_description_set)
    regNumber = _swig_property(_CADI.CADIRegInfo_regNumber_get, _CADI.CADIRegInfo_regNumber_set)
    bitsWide = _swig_property(_CADI.CADIRegInfo_bitsWide_get, _CADI.CADIRegInfo_bitsWide_set)
    hasSideEffects = _swig_property(_CADI.CADIRegInfo_hasSideEffects_get, _CADI.CADIRegInfo_hasSideEffects_set)
    details = _swig_property(_CADI.CADIRegInfo_details_get, _CADI.CADIRegInfo_details_set)
    display = _swig_property(_CADI.CADIRegInfo_display_get, _CADI.CADIRegInfo_display_set)
    symbols = _swig_property(_CADI.CADIRegInfo_symbols_get, _CADI.CADIRegInfo_symbols_set)
    fpFormat = _swig_property(_CADI.CADIRegInfo_fpFormat_get, _CADI.CADIRegInfo_fpFormat_set)
    lsbOffset = _swig_property(_CADI.CADIRegInfo_lsbOffset_get, _CADI.CADIRegInfo_lsbOffset_set)
    CADI_REGINFO_NO_DWARF_INDEX = _CADI.CADIRegInfo_CADI_REGINFO_NO_DWARF_INDEX
    dwarfIndex = _swig_property(_CADI.CADIRegInfo_dwarfIndex_get, _CADI.CADIRegInfo_dwarfIndex_set)
    isProfiled = _swig_property(_CADI.CADIRegInfo_isProfiled_get, _CADI.CADIRegInfo_isProfiled_set)
    isPipeStageField = _swig_property(_CADI.CADIRegInfo_isPipeStageField_get, _CADI.CADIRegInfo_isPipeStageField_set)
    threadID = _swig_property(_CADI.CADIRegInfo_threadID_get, _CADI.CADIRegInfo_threadID_set)
    attribute = _swig_property(_CADI.CADIRegInfo_attribute_get, _CADI.CADIRegInfo_attribute_set)
    canonicalRegisterNumber = _swig_property(_CADI.CADIRegInfo_canonicalRegisterNumber_get, _CADI.CADIRegInfo_canonicalRegisterNumber_set)
    def get_details(self):
        """get_details(self) -> PyObject *"""
        return _CADI.CADIRegInfo_get_details(self)

    __swig_destroy__ = _CADI.delete_CADIRegInfo
CADIRegInfo.get_details = new_instancemethod(_CADI.CADIRegInfo_get_details,None,CADIRegInfo)
CADIRegInfo_swigregister = _CADI.CADIRegInfo_swigregister
CADIRegInfo_swigregister(CADIRegInfo)

CADI_MAU_MULTIPLES_LIST_SIZE = _CADI.CADI_MAU_MULTIPLES_LIST_SIZE
class CADIMemSpaceInfo(object):
    """Proxy of C++ eslapi::CADIMemSpaceInfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIMemSpaceInfo_t self, char const * memSpaceName_par="", char const * description_par="", uint32_t memSpaceId_par=0, 
            uint32_t bitsPerMau_par=0, eslapi::CADIAddrSimple_t maxAddress_par=0, 
            uint32_t nrMemBlocks_par=0, int32_t isProgramMemory_par=False, eslapi::CADIAddrSimple_t minAddress_par=0, 
            int32_t isVirtualMemory_par=False, uint32_t isCache_par=False, 
            uint8_t endianness_par=0, uint8_t invariance_par=0, 
            uint32_t dwarfMemSpaceId_par=NO_DWARF_ID) -> CADIMemSpaceInfo
        """
        _CADI.CADIMemSpaceInfo_swiginit(self,_CADI.new_CADIMemSpaceInfo(*args, **kwargs))
    memSpaceName = _swig_property(_CADI.CADIMemSpaceInfo_memSpaceName_get, _CADI.CADIMemSpaceInfo_memSpaceName_set)
    description = _swig_property(_CADI.CADIMemSpaceInfo_description_get, _CADI.CADIMemSpaceInfo_description_set)
    memSpaceId = _swig_property(_CADI.CADIMemSpaceInfo_memSpaceId_get, _CADI.CADIMemSpaceInfo_memSpaceId_set)
    bitsPerMau = _swig_property(_CADI.CADIMemSpaceInfo_bitsPerMau_get, _CADI.CADIMemSpaceInfo_bitsPerMau_set)
    maxAddress = _swig_property(_CADI.CADIMemSpaceInfo_maxAddress_get, _CADI.CADIMemSpaceInfo_maxAddress_set)
    nrMemBlocks = _swig_property(_CADI.CADIMemSpaceInfo_nrMemBlocks_get, _CADI.CADIMemSpaceInfo_nrMemBlocks_set)
    isProgramMemory = _swig_property(_CADI.CADIMemSpaceInfo_isProgramMemory_get, _CADI.CADIMemSpaceInfo_isProgramMemory_set)
    minAddress = _swig_property(_CADI.CADIMemSpaceInfo_minAddress_get, _CADI.CADIMemSpaceInfo_minAddress_set)
    isVirtualMemory = _swig_property(_CADI.CADIMemSpaceInfo_isVirtualMemory_get, _CADI.CADIMemSpaceInfo_isVirtualMemory_set)
    isCache = _swig_property(_CADI.CADIMemSpaceInfo_isCache_get, _CADI.CADIMemSpaceInfo_isCache_set)
    endianness = _swig_property(_CADI.CADIMemSpaceInfo_endianness_get, _CADI.CADIMemSpaceInfo_endianness_set)
    invariance = _swig_property(_CADI.CADIMemSpaceInfo_invariance_get, _CADI.CADIMemSpaceInfo_invariance_set)
    NO_DWARF_ID = _CADI.CADIMemSpaceInfo_NO_DWARF_ID
    dwarfMemSpaceId = _swig_property(_CADI.CADIMemSpaceInfo_dwarfMemSpaceId_get, _CADI.CADIMemSpaceInfo_dwarfMemSpaceId_set)
    canonicalMemoryNumber = _swig_property(_CADI.CADIMemSpaceInfo_canonicalMemoryNumber_get, _CADI.CADIMemSpaceInfo_canonicalMemoryNumber_set)
    __swig_destroy__ = _CADI.delete_CADIMemSpaceInfo
CADIMemSpaceInfo_swigregister = _CADI.CADIMemSpaceInfo_swigregister
CADIMemSpaceInfo_swigregister(CADIMemSpaceInfo)

CADI_MEM_ReadOnly = _CADI.CADI_MEM_ReadOnly
CADI_MEM_WriteOnly = _CADI.CADI_MEM_WriteOnly
CADI_MEM_ReadWrite = _CADI.CADI_MEM_ReadWrite
CADI_MEM_ENUM_MAX = _CADI.CADI_MEM_ENUM_MAX
class CADIMemBlockInfo(object):
    """Proxy of C++ eslapi::CADIMemBlockInfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(eslapi::CADIMemBlockInfo_t self, char const * name_par="", char const * description_par="", uint16_t id_par=0, uint16_t parentID_par=0, 
            eslapi::CADIAddrSimple_t startAddr_par=0, eslapi::CADIAddrSimple_t endAddr_par=0, 
            uint32_t cyclesToAccess_par=0, eslapi::CADIMemReadWrite_t readWrite_par=CADI_MEM_ReadWrite, 
            uint32_t * supportedMultiplesOfMAU_par=None, 
            uint32_t endianness_par=0, uint32_t invariance_par=0) -> CADIMemBlockInfo
        """
        _CADI.CADIMemBlockInfo_swiginit(self,_CADI.new_CADIMemBlockInfo(*args, **kwargs))
    name = _swig_property(_CADI.CADIMemBlockInfo_name_get, _CADI.CADIMemBlockInfo_name_set)
    description = _swig_property(_CADI.CADIMemBlockInfo_description_get, _CADI.CADIMemBlockInfo_description_set)
    id = _swig_property(_CADI.CADIMemBlockInfo_id_get, _CADI.CADIMemBlockInfo_id_set)
    parentID = _swig_property(_CADI.CADIMemBlockInfo_parentID_get, _CADI.CADIMemBlockInfo_parentID_set)
    startAddr = _swig_property(_CADI.CADIMemBlockInfo_startAddr_get, _CADI.CADIMemBlockInfo_startAddr_set)
    endAddr = _swig_property(_CADI.CADIMemBlockInfo_endAddr_get, _CADI.CADIMemBlockInfo_endAddr_set)
    cyclesToAccess = _swig_property(_CADI.CADIMemBlockInfo_cyclesToAccess_get, _CADI.CADIMemBlockInfo_cyclesToAccess_set)
    readWrite = _swig_property(_CADI.CADIMemBlockInfo_readWrite_get, _CADI.CADIMemBlockInfo_readWrite_set)
    supportedMultiplesOfMAU = _swig_property(_CADI.CADIMemBlockInfo_supportedMultiplesOfMAU_get, _CADI.CADIMemBlockInfo_supportedMultiplesOfMAU_set)
    endianness = _swig_property(_CADI.CADIMemBlockInfo_endianness_get, _CADI.CADIMemBlockInfo_endianness_set)
    invariance = _swig_property(_CADI.CADIMemBlockInfo_invariance_get, _CADI.CADIMemBlockInfo_invariance_set)
    __swig_destroy__ = _CADI.delete_CADIMemBlockInfo
CADIMemBlockInfo_swigregister = _CADI.CADIMemBlockInfo_swigregister
CADIMemBlockInfo_swigregister(CADIMemBlockInfo)

class CADICacheInfo(object):
    """Proxy of C++ eslapi::CADICacheInfo_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, cacheLineSize_par=0, cacheTagBits_par=0, associativity_par=0, writeThrough_par=False): 
        """
        __init__(eslapi::CADICacheInfo_t self, uint16_t cacheLineSize_par=0, uint16_t cacheTagBits_par=0, uint16_t associativity_par=0, 
            bool writeThrough_par=False) -> CADICacheInfo
        """
        _CADI.CADICacheInfo_swiginit(self,_CADI.new_CADICacheInfo(cacheLineSize_par, cacheTagBits_par, associativity_par, writeThrough_par))
    cacheLineSize = _swig_property(_CADI.CADICacheInfo_cacheLineSize_get, _CADI.CADICacheInfo_cacheLineSize_set)
    cacheTagBits = _swig_property(_CADI.CADICacheInfo_cacheTagBits_get, _CADI.CADICacheInfo_cacheTagBits_set)
    associativity = _swig_property(_CADI.CADICacheInfo_associativity_get, _CADI.CADICacheInfo_associativity_set)
    writeThrough = _swig_property(_CADI.CADICacheInfo_writeThrough_get, _CADI.CADICacheInfo_writeThrough_set)
    __swig_destroy__ = _CADI.delete_CADICacheInfo
CADICacheInfo_swigregister = _CADI.CADICacheInfo_swigregister
CADICacheInfo_swigregister(CADICacheInfo)

CADI_TRACE_CNTL_StartContinuous = _CADI.CADI_TRACE_CNTL_StartContinuous
CADI_TRACE_CNTL_StartDiscontinuity = _CADI.CADI_TRACE_CNTL_StartDiscontinuity
CADI_TRACE_CNTL_Stop = _CADI.CADI_TRACE_CNTL_Stop
CADI_TRACE_BUFF_Wrap = _CADI.CADI_TRACE_BUFF_Wrap
CADI_TRACE_BUFF_StopOnFull = _CADI.CADI_TRACE_BUFF_StopOnFull
CADI_TRACE_OVERLAY_Manager = _CADI.CADI_TRACE_OVERLAY_Manager
CADI_TRACE_OVERLAY_Memory = _CADI.CADI_TRACE_OVERLAY_Memory
CADI_TRACE_BLK_Address = _CADI.CADI_TRACE_BLK_Address
CADI_TRACE_BLK_Overlay = _CADI.CADI_TRACE_BLK_Overlay
CADI_INPUT_KEYBOARD = _CADI.CADI_INPUT_KEYBOARD
CADI_INPUT_POINTING_DEVICE = _CADI.CADI_INPUT_POINTING_DEVICE
class CADISemiHostingInputChannel(object):
    """Proxy of C++ eslapi::CADISemiHostingInputChannel_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(eslapi::CADISemiHostingInputChannel_t self, uint32_t ID_par=0, char const * name_par="", eslapi::CADISemiHostingInputChannelType_t type_par=CADI_INPUT_KEYBOARD) -> CADISemiHostingInputChannel"""
        _CADI.CADISemiHostingInputChannel_swiginit(self,_CADI.new_CADISemiHostingInputChannel(*args, **kwargs))
    ID = _swig_property(_CADI.CADISemiHostingInputChannel_ID_get, _CADI.CADISemiHostingInputChannel_ID_set)
    name = _swig_property(_CADI.CADISemiHostingInputChannel_name_get, _CADI.CADISemiHostingInputChannel_name_set)
    type = _swig_property(_CADI.CADISemiHostingInputChannel_type_get, _CADI.CADISemiHostingInputChannel_type_set)
    __swig_destroy__ = _CADI.delete_CADISemiHostingInputChannel
CADISemiHostingInputChannel_swigregister = _CADI.CADISemiHostingInputChannel_swigregister
CADISemiHostingInputChannel_swigregister(CADISemiHostingInputChannel)

class CADIConsoleChannel(object):
    """Proxy of C++ eslapi::CADIConsoleChannel_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(eslapi::CADIConsoleChannel_t self, uint32_t streamID_par, char const * name_par="", bool blocking_par=False, bool characterInput_par=False) -> CADIConsoleChannel"""
        _CADI.CADIConsoleChannel_swiginit(self,_CADI.new_CADIConsoleChannel(*args, **kwargs))
    streamID = _swig_property(_CADI.CADIConsoleChannel_streamID_get, _CADI.CADIConsoleChannel_streamID_set)
    name = _swig_property(_CADI.CADIConsoleChannel_name_get, _CADI.CADIConsoleChannel_name_set)
    blocking = _swig_property(_CADI.CADIConsoleChannel_blocking_get, _CADI.CADIConsoleChannel_blocking_set)
    characterInput = _swig_property(_CADI.CADIConsoleChannel_characterInput_get, _CADI.CADIConsoleChannel_characterInput_set)
    __swig_destroy__ = _CADI.delete_CADIConsoleChannel
CADIConsoleChannel_swigregister = _CADI.CADIConsoleChannel_swigregister
CADIConsoleChannel_swigregister(CADIConsoleChannel)

CADI_STREAMID_STDIN = _CADI.CADI_STREAMID_STDIN
CADI_STREAMID_STDOUT = _CADI.CADI_STREAMID_STDOUT
CADI_STREAMID_STDERR = _CADI.CADI_STREAMID_STDERR
CADI_REFRESH_REASON_MEMORY = _CADI.CADI_REFRESH_REASON_MEMORY
CADI_REFRESH_REASON_REGISTERS = _CADI.CADI_REFRESH_REASON_REGISTERS
CADI_REFRESH_REASON_BREAKPOINTS = _CADI.CADI_REFRESH_REASON_BREAKPOINTS
CADI_REFRESH_REASON_PARAMETERS = _CADI.CADI_REFRESH_REASON_PARAMETERS
CADI_REFRESH_REASON_OTHER = _CADI.CADI_REFRESH_REASON_OTHER
CADI_REFRESH_REASON_ALL = _CADI.CADI_REFRESH_REASON_ALL

def new_uint32p():
  """new_uint32p() -> uint32_t *"""
  return _CADI.new_uint32p()

def copy_uint32p(*args, **kwargs):
  """copy_uint32p(uint32_t value) -> uint32_t *"""
  return _CADI.copy_uint32p(*args, **kwargs)

def delete_uint32p(*args, **kwargs):
  """delete_uint32p(uint32_t * obj)"""
  return _CADI.delete_uint32p(*args, **kwargs)

def uint32p_assign(*args, **kwargs):
  """uint32p_assign(uint32_t * obj, uint32_t value)"""
  return _CADI.uint32p_assign(*args, **kwargs)

def uint32p_value(*args, **kwargs):
  """uint32p_value(uint32_t * obj) -> uint32_t"""
  return _CADI.uint32p_value(*args, **kwargs)

def new_int32p():
  """new_int32p() -> int32_t *"""
  return _CADI.new_int32p()

def copy_int32p(*args, **kwargs):
  """copy_int32p(int32_t value) -> int32_t *"""
  return _CADI.copy_int32p(*args, **kwargs)

def delete_int32p(*args, **kwargs):
  """delete_int32p(int32_t * obj)"""
  return _CADI.delete_int32p(*args, **kwargs)

def int32p_assign(*args, **kwargs):
  """int32p_assign(int32_t * obj, int32_t value)"""
  return _CADI.int32p_assign(*args, **kwargs)

def int32p_value(*args, **kwargs):
  """int32p_value(int32_t * obj) -> int32_t"""
  return _CADI.int32p_value(*args, **kwargs)

def new_int64p():
  """new_int64p() -> int64_t *"""
  return _CADI.new_int64p()

def copy_int64p(*args, **kwargs):
  """copy_int64p(int64_t value) -> int64_t *"""
  return _CADI.copy_int64p(*args, **kwargs)

def delete_int64p(*args, **kwargs):
  """delete_int64p(int64_t * obj)"""
  return _CADI.delete_int64p(*args, **kwargs)

def int64p_assign(*args, **kwargs):
  """int64p_assign(int64_t * obj, int64_t value)"""
  return _CADI.int64p_assign(*args, **kwargs)

def int64p_value(*args, **kwargs):
  """int64p_value(int64_t * obj) -> int64_t"""
  return _CADI.int64p_value(*args, **kwargs)

def new_uint8p():
  """new_uint8p() -> uint8_t *"""
  return _CADI.new_uint8p()

def copy_uint8p(*args, **kwargs):
  """copy_uint8p(uint8_t value) -> uint8_t *"""
  return _CADI.copy_uint8p(*args, **kwargs)

def delete_uint8p(*args, **kwargs):
  """delete_uint8p(uint8_t * obj)"""
  return _CADI.delete_uint8p(*args, **kwargs)

def uint8p_assign(*args, **kwargs):
  """uint8p_assign(uint8_t * obj, uint8_t value)"""
  return _CADI.uint8p_assign(*args, **kwargs)

def uint8p_value(*args, **kwargs):
  """uint8p_value(uint8_t * obj) -> uint8_t"""
  return _CADI.uint8p_value(*args, **kwargs)

def new_CADIFactoryErrorMessage_ptr():
  """new_CADIFactoryErrorMessage_ptr() -> CADIFactoryErrorMessage"""
  return _CADI.new_CADIFactoryErrorMessage_ptr()

def copy_CADIFactoryErrorMessage_ptr(*args, **kwargs):
  """copy_CADIFactoryErrorMessage_ptr(CADIFactoryErrorMessage value) -> CADIFactoryErrorMessage"""
  return _CADI.copy_CADIFactoryErrorMessage_ptr(*args, **kwargs)

def delete_CADIFactoryErrorMessage_ptr(*args, **kwargs):
  """delete_CADIFactoryErrorMessage_ptr(CADIFactoryErrorMessage obj)"""
  return _CADI.delete_CADIFactoryErrorMessage_ptr(*args, **kwargs)

def CADIFactoryErrorMessage_ptr_assign(*args, **kwargs):
  """CADIFactoryErrorMessage_ptr_assign(CADIFactoryErrorMessage obj, CADIFactoryErrorMessage value)"""
  return _CADI.CADIFactoryErrorMessage_ptr_assign(*args, **kwargs)

def CADIFactoryErrorMessage_ptr_value(*args, **kwargs):
  """CADIFactoryErrorMessage_ptr_value(CADIFactoryErrorMessage obj) -> CADIFactoryErrorMessage"""
  return _CADI.CADIFactoryErrorMessage_ptr_value(*args, **kwargs)

def new_uint32Array(*args, **kwargs):
  """new_uint32Array(size_t nelements) -> uint32_t *"""
  return _CADI.new_uint32Array(*args, **kwargs)

def delete_uint32Array(*args, **kwargs):
  """delete_uint32Array(uint32_t * ary)"""
  return _CADI.delete_uint32Array(*args, **kwargs)

def uint32Array_getitem(*args, **kwargs):
  """uint32Array_getitem(uint32_t * ary, size_t index) -> uint32_t"""
  return _CADI.uint32Array_getitem(*args, **kwargs)

def uint32Array_setitem(*args, **kwargs):
  """uint32Array_setitem(uint32_t * ary, size_t index, uint32_t value)"""
  return _CADI.uint32Array_setitem(*args, **kwargs)

def new_uint64Array(*args, **kwargs):
  """new_uint64Array(size_t nelements) -> uint64_t *"""
  return _CADI.new_uint64Array(*args, **kwargs)

def delete_uint64Array(*args, **kwargs):
  """delete_uint64Array(uint64_t * ary)"""
  return _CADI.delete_uint64Array(*args, **kwargs)

def uint64Array_getitem(*args, **kwargs):
  """uint64Array_getitem(uint64_t * ary, size_t index) -> uint64_t"""
  return _CADI.uint64Array_getitem(*args, **kwargs)

def uint64Array_setitem(*args, **kwargs):
  """uint64Array_setitem(uint64_t * ary, size_t index, uint64_t value)"""
  return _CADI.uint64Array_setitem(*args, **kwargs)

def new_uint8_array(*args, **kwargs):
  """new_uint8_array(size_t nelements) -> uint8_t *"""
  return _CADI.new_uint8_array(*args, **kwargs)

def delete_uint8_array(*args, **kwargs):
  """delete_uint8_array(uint8_t * ary)"""
  return _CADI.delete_uint8_array(*args, **kwargs)

def uint8_array_getitem(*args, **kwargs):
  """uint8_array_getitem(uint8_t * ary, size_t index) -> uint8_t"""
  return _CADI.uint8_array_getitem(*args, **kwargs)

def uint8_array_setitem(*args, **kwargs):
  """uint8_array_setitem(uint8_t * ary, size_t index, uint8_t value)"""
  return _CADI.uint8_array_setitem(*args, **kwargs)

def new_CADIParameterValue_array(*args, **kwargs):
  """new_CADIParameterValue_array(size_t nelements) -> CADIParameterValue"""
  return _CADI.new_CADIParameterValue_array(*args, **kwargs)

def delete_CADIParameterValue_array(*args, **kwargs):
  """delete_CADIParameterValue_array(CADIParameterValue ary)"""
  return _CADI.delete_CADIParameterValue_array(*args, **kwargs)

def CADIParameterValue_array_getitem(*args, **kwargs):
  """CADIParameterValue_array_getitem(CADIParameterValue ary, size_t index) -> CADIParameterValue"""
  return _CADI.CADIParameterValue_array_getitem(*args, **kwargs)

def CADIParameterValue_array_setitem(*args, **kwargs):
  """CADIParameterValue_array_setitem(CADIParameterValue ary, size_t index, CADIParameterValue value)"""
  return _CADI.CADIParameterValue_array_setitem(*args, **kwargs)

def new_CADIReg_array(*args, **kwargs):
  """new_CADIReg_array(size_t nelements) -> CADIReg"""
  return _CADI.new_CADIReg_array(*args, **kwargs)

def delete_CADIReg_array(*args, **kwargs):
  """delete_CADIReg_array(CADIReg ary)"""
  return _CADI.delete_CADIReg_array(*args, **kwargs)

def CADIReg_array_getitem(*args, **kwargs):
  """CADIReg_array_getitem(CADIReg ary, size_t index) -> CADIReg"""
  return _CADI.CADIReg_array_getitem(*args, **kwargs)

def CADIReg_array_setitem(*args, **kwargs):
  """CADIReg_array_setitem(CADIReg ary, size_t index, CADIReg value)"""
  return _CADI.CADIReg_array_setitem(*args, **kwargs)
from Exceptions import TargetError, TargetBusyError, SecurityError
__cadi_exception_map = {}
__cadi_exception_map[CADI_STATUS_GeneralError] = TargetError
__cadi_exception_map[CADI_STATUS_UnknownCommand] = ValueError
__cadi_exception_map[CADI_STATUS_IllegalArgument] = ValueError
__cadi_exception_map[CADI_STATUS_CmdNotSupported] = NotImplementedError
__cadi_exception_map[CADI_STATUS_ArgNotSupported] = ValueError
__cadi_exception_map[CADI_STATUS_InsufficientResources] = MemoryError
__cadi_exception_map[CADI_STATUS_TargetNotResponding] = TargetError
__cadi_exception_map[CADI_STATUS_TargetBusy] = TargetBusyError
__cadi_exception_map[CADI_STATUS_BufferSize] = SystemError
__cadi_exception_map[CADI_STATUS_SecurityViolation] = SecurityError
__cadi_exception_map[CADI_STATUS_PermissionDenied] = SecurityError

__cadi_return_names = dict(enumerate(["CADI_STATUS_OK", "CADI_STATUS_GeneralError",
                                      "CADI_STATUS_UnknownCommand", "CADI_STATUS_IllegalArgument",
                                      "CADI_STATUS_CmdNotSupported", "CADI_STATUS_ArgNotSupported",
                                      "CADI_STATUS_InsufficientResources", "CADI_STATUS_TargetNotResponding",
                                      "CADI_STATUS_TargetBusy", "CADI_STATUS_BufferSize",
                                      "CADI_STATUS_SecurityViolation", "CADI_STATUS_PermissionDenied"]))

def check_status(result, method_name, extra_message=None, cadi=None, empty_list_error=None):
    try:
        code = result[0]
        result = result[1]
    except TypeError:
        code = result
        result = None
    if code == CADI_STATUS_OK:
        return result
    else:
        if code == empty_list_error:
            return []
        messages = ["Model returned %s" % __cadi_return_names[code]]
        if cadi:
            cadi_error = cadi.CADIXfaceGetError()
            if cadi_error:
                messages.append(cadi_error)
        if extra_message:
            messages.append(extra_message)
        raise __cadi_exception_map[code]("\n".join(messages))

MAX_RESPONSE_LENGTH = _CADI.MAX_RESPONSE_LENGTH
STR_LENGTH = _CADI.STR_LENGTH
DESIRED_NUM = _CADI.DESIRED_NUM
from Exceptions import *

CADICallbacks = [
CADI_CB_AppliOpen,
CADI_CB_AppliInput,
CADI_CB_AppliOutput,
CADI_CB_AppliClose,
CADI_CB_String,
CADI_CB_ModeChange,
CADI_CB_Reset,
CADI_CB_CycleTick,
CADI_CB_KillInterface,
CADI_CB_Bypass,
CADI_CB_LookupSymbol,
CADI_CB_DisasmNotifyModeChange,
CADI_CB_DisasmNotifyFileChange,
CADI_CB_Refresh,
CADI_CB_ProfileResourceAccess,
CADI_CB_ProfileRegisterHazard]



def CAInterface_CADI(*args):
  """CAInterface_CADI(self) -> CADI"""
  return _CADI.CAInterface_CADI(*args)
class CADICallbackObj(CAInterface):
    """Proxy of C++ eslapi::CADICallbackObj class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CADICallbackObj_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CADICallbackObj_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    def appliOpen(self, *args):
        """appliOpen(self, sFileName, mode) -> uint32_t"""
        return _CADI.CADICallbackObj_appliOpen(self, *args)

    def appliInput(self, *args):
        """appliInput(self, streamId, count, actualCount, buffer)"""
        return _CADI.CADICallbackObj_appliInput(self, *args)

    def appliOutput(self, *args):
        """appliOutput(self, streamId, count, actualCount, buffer)"""
        return _CADI.CADICallbackObj_appliOutput(self, *args)

    def appliClose(self, *args):
        """appliClose(self, streamID) -> uint32_t"""
        return _CADI.CADICallbackObj_appliClose(self, *args)

    def doString(self, *args):
        """doString(self, stringArg)"""
        return _CADI.CADICallbackObj_doString(self, *args)

    def modeChange(self, *args):
        """modeChange(self, newMode, bptNumber)"""
        return _CADI.CADICallbackObj_modeChange(self, *args)

    def reset(self, *args):
        """reset(self, resetLevel)"""
        return _CADI.CADICallbackObj_reset(self, *args)

    def cycleTick(self):
        """cycleTick(self)"""
        return _CADI.CADICallbackObj_cycleTick(self)

    def killInterface(self):
        """killInterface(self)"""
        return _CADI.CADICallbackObj_killInterface(self)

    def bypass(self, *args):
        """bypass(self, commandLength) -> uint32_t"""
        return _CADI.CADICallbackObj_bypass(self, *args)

    def lookupSymbol(self, *args):
        """lookupSymbol(self, symbolLength, symbol) -> uint32_t"""
        return _CADI.CADICallbackObj_lookupSymbol(self, *args)

    def refresh(self, *args):
        """refresh(self, refreshReason)"""
        return _CADI.CADICallbackObj_refresh(self, *args)

    def __init__(self): 
        """__init__(self) -> CADICallbackObj"""
        if self.__class__ == CADICallbackObj:
            _self = None
        else:
            _self = self
        _CADI.CADICallbackObj_swiginit(self,_CADI.new_CADICallbackObj(_self, ))
    __swig_destroy__ = _CADI.delete_CADICallbackObj
    def __disown__(self):
        self.this.disown()
        _CADI.disown_CADICallbackObj(self)
        return weakref_proxy(self)
CADICallbackObj.appliOpen = new_instancemethod(_CADI.CADICallbackObj_appliOpen,None,CADICallbackObj)
CADICallbackObj.appliInput = new_instancemethod(_CADI.CADICallbackObj_appliInput,None,CADICallbackObj)
CADICallbackObj.appliOutput = new_instancemethod(_CADI.CADICallbackObj_appliOutput,None,CADICallbackObj)
CADICallbackObj.appliClose = new_instancemethod(_CADI.CADICallbackObj_appliClose,None,CADICallbackObj)
CADICallbackObj.doString = new_instancemethod(_CADI.CADICallbackObj_doString,None,CADICallbackObj)
CADICallbackObj.modeChange = new_instancemethod(_CADI.CADICallbackObj_modeChange,None,CADICallbackObj)
CADICallbackObj.reset = new_instancemethod(_CADI.CADICallbackObj_reset,None,CADICallbackObj)
CADICallbackObj.cycleTick = new_instancemethod(_CADI.CADICallbackObj_cycleTick,None,CADICallbackObj)
CADICallbackObj.killInterface = new_instancemethod(_CADI.CADICallbackObj_killInterface,None,CADICallbackObj)
CADICallbackObj.bypass = new_instancemethod(_CADI.CADICallbackObj_bypass,None,CADICallbackObj)
CADICallbackObj.lookupSymbol = new_instancemethod(_CADI.CADICallbackObj_lookupSymbol,None,CADICallbackObj)
CADICallbackObj.refresh = new_instancemethod(_CADI.CADICallbackObj_refresh,None,CADICallbackObj)
CADICallbackObj_swigregister = _CADI.CADICallbackObj_swigregister
CADICallbackObj_swigregister(CADICallbackObj)

def CADICallbackObj_IFNAME():
  """CADICallbackObj_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CADICallbackObj_IFNAME()

def CADICallbackObj_IFREVISION():
  """CADICallbackObj_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CADICallbackObj_IFREVISION()

class CADI(CAInterface):
    """Proxy of C++ eslapi::CADI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CADI_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CADI_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    def _CADIXfaceGetFeatures(self):
        """_CADIXfaceGetFeatures(self) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIXfaceGetFeatures(self)

    def _CADIXfaceGetError(self):
        """_CADIXfaceGetError(self) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIXfaceGetError(self)

    def _CADIXfaceAddCallback(self, *args):
        """_CADIXfaceAddCallback(self, callbackObj, enable) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIXfaceAddCallback(self, *args)

    def _CADIXfaceRemoveCallback(self, *args):
        """_CADIXfaceRemoveCallback(self, callbackObj) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIXfaceRemoveCallback(self, *args)

    def _CADIXfaceBypass(self, *args):
        """_CADIXfaceBypass(self, commandLength) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIXfaceBypass(self, *args)

    def _CADIGetTargetInfo(self):
        """_CADIGetTargetInfo(self) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIGetTargetInfo(self)

    def _CADIGetParameters(self, *args):
        """_CADIGetParameters(self, startIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIGetParameters(self, *args)

    def _CADIGetParameterInfo(self, *args):
        """_CADIGetParameterInfo(self, parameterName) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIGetParameterInfo(self, *args)

    def _CADIGetParameterValues(self, *args):
        """CADIGetParameterValues(IDs) -> list"""
        return _CADI.CADI__CADIGetParameterValues(self, *args)

    def _CADISetParameters(self, *args):
        """CADISetParameters(parameter_list)"""
        return _CADI.CADI__CADISetParameters(self, *args)

    def _CADIExecGetModes(self, *args):
        """_CADIExecGetModes(self, startModeIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecGetModes(self, *args)

    def _CADIExecGetResetLevels(self, *args):
        """_CADIExecGetResetLevels(self, startResetLevelIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecGetResetLevels(self, *args)

    def CADIExecSetMode(self, *args):
        """CADIExecSetMode(self, execMode) -> eslapi::CADIReturn_t"""
        return _CADI.CADI_CADIExecSetMode(self, *args)

    def _CADIExecGetMode(self):
        """_CADIExecGetMode(self) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecGetMode(self)

    def _CADIExecSingleStep(self, *args):
        """_CADIExecSingleStep(self, instructionCount, stepCycle, stepOver) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecSingleStep(self, *args)

    def _CADIExecReset(self, *args):
        """_CADIExecReset(self, resetLevel) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecReset(self, *args)

    def _CADIExecContinue(self):
        """_CADIExecContinue(self) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecContinue(self)

    def _CADIExecStop(self):
        """_CADIExecStop(self) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecStop(self)

    def _CADIExecGetExceptions(self, *args):
        """_CADIExecGetExceptions(self, startExceptionIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecGetExceptions(self, *args)

    def CADIExecAssertException(self, *args):
        """CADIExecAssertException(self, exception, action) -> eslapi::CADIReturn_t"""
        return _CADI.CADI_CADIExecAssertException(self, *args)

    def _CADIExecGetPipeStages(self, *args):
        """_CADIExecGetPipeStages(self, startPipeStageIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecGetPipeStages(self, *args)

    def _CADIExecGetPipeStageFields(self, *args):
        """_CADIExecGetPipeStageFields(self, startPipeStageFieldIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecGetPipeStageFields(self, *args)

    def _CADIExecLoadApplication(self, *args):
        """_CADIExecLoadApplication(self, filename, loadData, verbose, parameters) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIExecLoadApplication(self, *args)

    def CADIExecUnloadApplication(self, *args):
        """CADIExecUnloadApplication(self, filename) -> eslapi::CADIReturn_t"""
        return _CADI.CADI_CADIExecUnloadApplication(self, *args)

    def _CADIExecGetLoadedApplications(self, *args):
        """CADIExecGetLoadedApplications(addr, linesToRead, doSideEffects) -> list"""
        return _CADI.CADI__CADIExecGetLoadedApplications(self, *args)

    def _CADIGetInstructionCount(self):
        """_CADIGetInstructionCount(self) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIGetInstructionCount(self)

    def _CADIGetCycleCount(self, *args):
        """_CADIGetCycleCount(self, systemCycles) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIGetCycleCount(self, *args)

    def _CADIRegGetGroups(self, *args):
        """_CADIRegGetGroups(self, groupIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIRegGetGroups(self, *args)

    def _CADIRegGetMap(self, *args):
        """CADI.CADIRegGetMap(self, groupID) -> list"""
        return _CADI.CADI__CADIRegGetMap(self, *args)

    def _CADIRegGetCompound(self, *args):
        """CADI.CADIRegGetCompound(self, reg) -> list"""
        return _CADI.CADI__CADIRegGetCompound(self, *args)

    def _CADIRegWrite(self, *args):
        """CADIRegWrite(regList, doSideEffects) -> list"""
        return _CADI.CADI__CADIRegWrite(self, *args)

    def _CADIRegRead(self, *args):
        """CADIRegRead(regList, doSideEffects) -> list"""
        return _CADI.CADI__CADIRegRead(self, *args)

    def CADIGetPC(self, *args):
        """
        CADIGetPC(self) -> uint64_t
        CADIGetPC(self, is_virtual) -> uint64_t
        """
        return _CADI.CADI_CADIGetPC(self, *args)

    def _CADIMemGetSpaces(self, *args):
        """_CADIMemGetSpaces(self, startMemSpaceIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIMemGetSpaces(self, *args)

    def _CADIMemGetBlocks(self, *args):
        """CADI.CADIMemGetBlocks(self, memorySpace) -> list"""
        return _CADI.CADI__CADIMemGetBlocks(self, *args)

    def _CADIMemWrite(self, *args):
        """CADIMemWrite(startAddress, unitsToWrite, unitSizeInBytes, data, doSideEffects) -> list"""
        return _CADI.CADI__CADIMemWrite(self, *args)

    def _CADIMemRead(self, *args):
        """CADIMemRead(startAddress, unitsToRead, unitSizeInBytes, doSideEffects) -> list"""
        return _CADI.CADI__CADIMemRead(self, *args)

    def _CADIMemGetOverlays(self, *args):
        """_CADIMemGetOverlays(self, activeOverlayIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIMemGetOverlays(self, *args)

    def _CADIBptGetList(self, *args):
        """_CADIBptGetList(self, startIndex) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIBptGetList(self, *args)

    def _CADIBptRead(self, *args):
        """_CADIBptRead(self, breakpointId) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIBptRead(self, *args)

    def _CADIBptSet(self, *args):
        """_CADIBptSet(self, request) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIBptSet(self, *args)

    def _CADIBptClear(self, *args):
        """_CADIBptClear(self, breakpointId) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIBptClear(self, *args)

    def _CADIBptConfigure(self, *args):
        """_CADIBptConfigure(self, breakpointId, configuration) -> eslapi::CADIReturn_t"""
        return _CADI.CADI__CADIBptConfigure(self, *args)

    def CADIGetCacheInfo(self, *args):
        """CADIGetCacheInfo(self, memSpaceID, cacheInfo) -> eslapi::CADIReturn_t"""
        return _CADI.CADI_CADIGetCacheInfo(self, *args)

    def CADIGetDisassembler(self):
        """CADIGetDisassembler(self) -> CADIDisassembler"""
        return _CADI.CADI_CADIGetDisassembler(self)

    def VirtualToPhysical(self, *args):
        """VirtualToPhysical(self, vaddr) -> CADIAddrComplete"""
        return _CADI.CADI_VirtualToPhysical(self, *args)

    def PhysicalToVirtual(self, *args):
        """PhysicalToVirtual(self, paddr) -> CADIAddrComplete"""
        return _CADI.CADI_PhysicalToVirtual(self, *args)

    def check_status(self, result, method_name, extra_message=None, empty_list_error=None):
        return check_status(result, method_name, extra_message, self, empty_list_error)

    def CADIXfaceGetFeatures(self, *args):
        return self.check_status(self._CADIXfaceGetFeatures(*args), "CADIXfaceGetFeatures")

    def CADIXfaceGetError(self, *args):
        return self.check_status(self._CADIXfaceGetError(*args), "CADIXfaceGetError")

    def CADIXfaceBypass(self, *args):
        return self.check_status(self._CADIXfaceBypass(*args), "CADIXfaceBypass")

    def CADIXfaceAddCallback(self, *args):
        return self.check_status(self._CADIXfaceAddCallback(*args), "CADIXfaceAddCallback")

    def CADIXfaceRemoveCallback(self, *args):
        return self.check_status(self._CADIXfaceRemoveCallback(*args), "CADIXfaceRemoveCallback")

    def CADIGetTargetInfo(self, *args):
        return self.check_status(self._CADIGetTargetInfo(*args), "CADIGetTargetInfo")

    def CADIGetParameterInfo(self, *args):
        return self.check_status(self._CADIGetParameterInfo(*args), "CADIGetParameterInfo")

    def CADIGetParameterValues(self, IDs):
        array = new_CADIParameterValue_array(len(IDs))
        result = []
        actual = copy_uint32p(0)
        try:
            for (index, paramId) in enumerate(IDs):
                if not isinstance(paramId, int):
                    raise TypeError("Element %d of array must be of type `int'")
                CADIParameterValue_array_setitem(array, index, self.check_status(CADIParameterValue(paramId), "CADIParameterValue"))
            
            self._CADIGetParameterValues(len(IDs), actual, array);
            assert(len(IDs) == uint32p_value(actual))
            for index in range(len(IDs)):
                result.append(CADIParameterValue_array_getitem(array, index))
            return result
            
        finally:
            delete_uint32p(actual)
            delete_CADIParameterValue_array(array)

    def CADIGetParameters(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIGetParameters(len(result)), "CADIGetParameters", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADISetParameters(self, parameters):
        array = new_CADIParameterValue_array(len(parameters))
        error = new_CADIFactoryErrorMessage_ptr()
        result = []
        try:
            for (index, param) in enumerate(parameters):
                if not isinstance(param, CADIParameterValue):
                    raise TypeError("Element %d of array must be of type `CADIParameterValue'")
                CADIParameterValue_array_setitem(array, index, param)
            
            self.check_status(self._CADISetParameters(len(parameters), array, error), "CADISetParameters")
            if error.errorCode != 0:
                raise TargetError(error.message)
            
            for index in range(len(parameters)):
                result.append(CADIParameterValue_array_getitem(array, index))
                
            return result
        finally:
            delete_CADIParameterValue_array(array)
            delete_CADIFactoryErrorMessage_ptr(error)

    def CADIRegGetGroups(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIRegGetGroups(len(result)), "CADIRegGetGroups", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIRegGetMap(self, arg):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIRegGetMap(arg, len(result)), "CADIRegGetMap", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIRegGetCompound(self, arg):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIRegGetCompound(arg, len(result)), "CADIRegGetCompound", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIRegWrite(self, regList, doSideEffects):
        if not isinstance(doSideEffects, bool):
            raise TypeError("doSideEffects must be of type `bool'")
        
        array = new_CADIReg_array(len(regList))
        actual = copy_uint32p(0)
        try:
            for (index, reg) in enumerate(regList):
                if not isinstance(reg, CADIReg):
                    raise TypeError("Element %d of array must be of type `CADIReg'" % index)
                CADIReg_array_setitem(array, index, reg)
            
            self.check_status(self._CADIRegWrite(len(regList), array, actual, doSideEffects), "CADIRegWrite")
            
            if uint32p_value(actual) != len(regList):
                raise TargetError("Error while writing register values to target (first %d were written successfully)" % uint32p_value(actual))
        finally:
            delete_CADIReg_array(array)
            delete_uint32p(actual)

    def CADIRegRead(self, regList, doSideEffects):
        if not isinstance(doSideEffects, bool):
            raise TypeError("doSideEffects must be of type `bool'")
        
        array = new_CADIReg_array(len(regList))
        actual = copy_uint32p(0)
        try:
            for (index, reg) in enumerate(regList):
                if not isinstance(reg, CADIReg):
                    raise TypeError("Element %d of array must be of type `CADIReg'" % index)
                CADIReg_array_setitem(array, index, reg)
            
            self.check_status(self._CADIRegRead(len(regList), array, actual, doSideEffects), "CADIRegRead")
            
            if uint32p_value(actual) != len(regList):
                raise TargetError("Error while reading register values from target (first %d were read successfully)" % uint32p_value(actual))
            
            result = []
            for index in range(len(regList)):
                result.append(CADIReg_array_getitem(array, index))
            
            return result
        finally:
            delete_CADIReg_array(array)
            delete_uint32p(actual)

    def CADIMemGetSpaces(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIMemGetSpaces(len(result)), "CADIMemGetSpaces", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIMemGetBlocks(self, arg):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIMemGetBlocks(arg, len(result)), "CADIMemGetBlocks", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIMemRead(self, startAddress, unitsToRead, unitSizeInBytes, doSideEffects):
        if not isinstance(startAddress, CADIAddrComplete):
            raise TypeError("startAddress must be of type `CADIAddrComplete'")
        
        actual = copy_uint32p(0)

        try:
            bytes = bytearray('\x00'*(unitsToRead*unitSizeInBytes))
            self.check_status(self._CADIMemRead(startAddress, unitsToRead, unitSizeInBytes, bytes, actual, doSideEffects), "CADIMemRead")
            
            if uint32p_value(actual) != unitsToRead:
                raise TargetError("Error while reading unit %d" % uint32p_value(actual))
            
            return bytes
        finally:
            delete_uint32p(actual)

    def CADIMemWrite(self, startAddress, unitsToWrite, unitSizeInBytes, data, doSideEffects):
        if not isinstance(startAddress, CADIAddrComplete):
            raise TypeError("startAddress must be of type `CADIAddrComplete'")
        
        if not isinstance(data, bytearray):
            raise TypeError("data must be of type `bytearray'")
        
        actual = copy_uint32p(0)
        
        try:
            self.check_status(self._CADIMemWrite(startAddress, unitsToWrite, unitSizeInBytes, data, actual, doSideEffects), "CADIMemWrite")
            
            if uint32p_value(actual) != unitsToWrite:
                raise TargetError("Error while writing unit %d" % uint32p_value(actual))
        finally:
            delete_uint32p(actual)

    def CADIMemGetOverlays(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIMemGetOverlays(len(result)), "CADIMemGetOverlays", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIExecGetMode(self, *args):
        return self.check_status(self._CADIExecGetMode(*args), "CADIExecGetMode")

    def CADIExecGetModes(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIExecGetModes(len(result)), "CADIExecGetModes", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIExecGetResetLevels(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIExecGetResetLevels(len(result)), "CADIExecGetResetLevels", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIExecGetExceptions(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIExecGetExceptions(len(result)), "CADIExecGetExceptions", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIExecGetPipeStages(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIExecGetPipeStages(len(result)), "CADIExecGetPipeStages", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIExecGetPipeStageFields(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIExecGetPipeStageFields(len(result)), "CADIExecGetPipeStageFields", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIExecSingleStep(self, *args):
        return self.check_status(self._CADIExecSingleStep(*args), "CADIExecSingleStep")

    def CADIExecReset(self, *args):
        return self.check_status(self._CADIExecReset(*args), "CADIExecReset")

    def CADIExecContinue(self, *args):
        return self.check_status(self._CADIExecContinue(*args), "CADIExecContinue")

    def CADIExecStop(self, *args):
        return self.check_status(self._CADIExecStop(*args), "CADIExecStop")

    def CADIExecGetLoadedApplications(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIExecGetLoadedApplications(len(result)), "CADIExecGetLoadedApplications", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIExecLoadApplication(self, *args):
        return self.check_status(self._CADIExecLoadApplication(*args), "CADIExecLoadApplication")

    def CADIGetInstructionCount(self, *args):
        return self.check_status(self._CADIGetInstructionCount(*args), "CADIGetInstructionCount")

    def CADIGetCycleCount(self, *args):
        return self.check_status(self._CADIGetCycleCount(*args), "CADIGetCycleCount")

    def CADIBptGetList(self):
        result = []
        temp = []
        while True:
            temp = self.check_status(self._CADIBptGetList(len(result)), "CADIBptGetList", empty_list_error=CADI_STATUS_ArgNotSupported)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def CADIBptRead(self, *args):
        return self.check_status(self._CADIBptRead(*args), "CADIBptRead")

    def CADIBptSet(self, *args):
        return self.check_status(self._CADIBptSet(*args), "CADIBptSet")

    def CADIBptClear(self, *args):
        return self.check_status(self._CADIBptClear(*args), "CADIBptClear")

    def CADIBptConfigure(self, *args):
        return self.check_status(self._CADIBptConfigure(*args), "CADIBptConfigure")

    __swig_destroy__ = _CADI.delete_CADI
CADI._CADIXfaceGetFeatures = new_instancemethod(_CADI.CADI__CADIXfaceGetFeatures,None,CADI)
CADI._CADIXfaceGetError = new_instancemethod(_CADI.CADI__CADIXfaceGetError,None,CADI)
CADI._CADIXfaceAddCallback = new_instancemethod(_CADI.CADI__CADIXfaceAddCallback,None,CADI)
CADI._CADIXfaceRemoveCallback = new_instancemethod(_CADI.CADI__CADIXfaceRemoveCallback,None,CADI)
CADI._CADIXfaceBypass = new_instancemethod(_CADI.CADI__CADIXfaceBypass,None,CADI)
CADI._CADIGetTargetInfo = new_instancemethod(_CADI.CADI__CADIGetTargetInfo,None,CADI)
CADI._CADIGetParameters = new_instancemethod(_CADI.CADI__CADIGetParameters,None,CADI)
CADI._CADIGetParameterInfo = new_instancemethod(_CADI.CADI__CADIGetParameterInfo,None,CADI)
CADI._CADIGetParameterValues = new_instancemethod(_CADI.CADI__CADIGetParameterValues,None,CADI)
CADI._CADISetParameters = new_instancemethod(_CADI.CADI__CADISetParameters,None,CADI)
CADI._CADIExecGetModes = new_instancemethod(_CADI.CADI__CADIExecGetModes,None,CADI)
CADI._CADIExecGetResetLevels = new_instancemethod(_CADI.CADI__CADIExecGetResetLevels,None,CADI)
CADI.CADIExecSetMode = new_instancemethod(_CADI.CADI_CADIExecSetMode,None,CADI)
CADI._CADIExecGetMode = new_instancemethod(_CADI.CADI__CADIExecGetMode,None,CADI)
CADI._CADIExecSingleStep = new_instancemethod(_CADI.CADI__CADIExecSingleStep,None,CADI)
CADI._CADIExecReset = new_instancemethod(_CADI.CADI__CADIExecReset,None,CADI)
CADI._CADIExecContinue = new_instancemethod(_CADI.CADI__CADIExecContinue,None,CADI)
CADI._CADIExecStop = new_instancemethod(_CADI.CADI__CADIExecStop,None,CADI)
CADI._CADIExecGetExceptions = new_instancemethod(_CADI.CADI__CADIExecGetExceptions,None,CADI)
CADI.CADIExecAssertException = new_instancemethod(_CADI.CADI_CADIExecAssertException,None,CADI)
CADI._CADIExecGetPipeStages = new_instancemethod(_CADI.CADI__CADIExecGetPipeStages,None,CADI)
CADI._CADIExecGetPipeStageFields = new_instancemethod(_CADI.CADI__CADIExecGetPipeStageFields,None,CADI)
CADI._CADIExecLoadApplication = new_instancemethod(_CADI.CADI__CADIExecLoadApplication,None,CADI)
CADI.CADIExecUnloadApplication = new_instancemethod(_CADI.CADI_CADIExecUnloadApplication,None,CADI)
CADI._CADIExecGetLoadedApplications = new_instancemethod(_CADI.CADI__CADIExecGetLoadedApplications,None,CADI)
CADI._CADIGetInstructionCount = new_instancemethod(_CADI.CADI__CADIGetInstructionCount,None,CADI)
CADI._CADIGetCycleCount = new_instancemethod(_CADI.CADI__CADIGetCycleCount,None,CADI)
CADI._CADIRegGetGroups = new_instancemethod(_CADI.CADI__CADIRegGetGroups,None,CADI)
CADI._CADIRegGetMap = new_instancemethod(_CADI.CADI__CADIRegGetMap,None,CADI)
CADI._CADIRegGetCompound = new_instancemethod(_CADI.CADI__CADIRegGetCompound,None,CADI)
CADI._CADIRegWrite = new_instancemethod(_CADI.CADI__CADIRegWrite,None,CADI)
CADI._CADIRegRead = new_instancemethod(_CADI.CADI__CADIRegRead,None,CADI)
CADI.CADIGetPC = new_instancemethod(_CADI.CADI_CADIGetPC,None,CADI)
CADI._CADIMemGetSpaces = new_instancemethod(_CADI.CADI__CADIMemGetSpaces,None,CADI)
CADI._CADIMemGetBlocks = new_instancemethod(_CADI.CADI__CADIMemGetBlocks,None,CADI)
CADI._CADIMemWrite = new_instancemethod(_CADI.CADI__CADIMemWrite,None,CADI)
CADI._CADIMemRead = new_instancemethod(_CADI.CADI__CADIMemRead,None,CADI)
CADI._CADIMemGetOverlays = new_instancemethod(_CADI.CADI__CADIMemGetOverlays,None,CADI)
CADI._CADIBptGetList = new_instancemethod(_CADI.CADI__CADIBptGetList,None,CADI)
CADI._CADIBptRead = new_instancemethod(_CADI.CADI__CADIBptRead,None,CADI)
CADI._CADIBptSet = new_instancemethod(_CADI.CADI__CADIBptSet,None,CADI)
CADI._CADIBptClear = new_instancemethod(_CADI.CADI__CADIBptClear,None,CADI)
CADI._CADIBptConfigure = new_instancemethod(_CADI.CADI__CADIBptConfigure,None,CADI)
CADI.CADIGetCacheInfo = new_instancemethod(_CADI.CADI_CADIGetCacheInfo,None,CADI)
CADI.CADIGetDisassembler = new_instancemethod(_CADI.CADI_CADIGetDisassembler,None,CADI)
CADI.VirtualToPhysical = new_instancemethod(_CADI.CADI_VirtualToPhysical,None,CADI)
CADI.PhysicalToVirtual = new_instancemethod(_CADI.CADI_PhysicalToVirtual,None,CADI)
CADI_swigregister = _CADI.CADI_swigregister
CADI_swigregister(CADI)

def CADI_IFNAME():
  """CADI_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CADI_IFNAME()

def CADI_IFREVISION():
  """CADI_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CADI_IFREVISION()

class CADIErrorCallback(CAInterface):
    """Proxy of C++ eslapi::CADIErrorCallback class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CADIErrorCallback_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CADIErrorCallback_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    def Error(self, *args):
        """Error(self, severity, errorCode, erroneousParameterId, message)"""
        return _CADI.CADIErrorCallback_Error(self, *args)

    def __init__(self): 
        """__init__(self) -> CADIErrorCallback"""
        if self.__class__ == CADIErrorCallback:
            _self = None
        else:
            _self = self
        _CADI.CADIErrorCallback_swiginit(self,_CADI.new_CADIErrorCallback(_self, ))
    __swig_destroy__ = _CADI.delete_CADIErrorCallback
    def __disown__(self):
        self.this.disown()
        _CADI.disown_CADIErrorCallback(self)
        return weakref_proxy(self)
CADIErrorCallback.Error = new_instancemethod(_CADI.CADIErrorCallback_Error,None,CADIErrorCallback)
CADIErrorCallback_swigregister = _CADI.CADIErrorCallback_swigregister
CADIErrorCallback_swigregister(CADIErrorCallback)

def CADIErrorCallback_IFNAME():
  """CADIErrorCallback_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CADIErrorCallback_IFNAME()

def CADIErrorCallback_IFREVISION():
  """CADIErrorCallback_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CADIErrorCallback_IFREVISION()

class CADISimulationCallback(CAInterface):
    """Proxy of C++ eslapi::CADISimulationCallback class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CADISimulationCallback_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CADISimulationCallback_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    def simMessage(self, *args):
        """simMessage(self, message)"""
        return _CADI.CADISimulationCallback_simMessage(self, *args)

    def simShutdown(self):
        """simShutdown(self)"""
        return _CADI.CADISimulationCallback_simShutdown(self)

    def simKilled(self):
        """simKilled(self)"""
        return _CADI.CADISimulationCallback_simKilled(self)

    def __init__(self): 
        """__init__(self) -> CADISimulationCallback"""
        if self.__class__ == CADISimulationCallback:
            _self = None
        else:
            _self = self
        _CADI.CADISimulationCallback_swiginit(self,_CADI.new_CADISimulationCallback(_self, ))
    __swig_destroy__ = _CADI.delete_CADISimulationCallback
    def __disown__(self):
        self.this.disown()
        _CADI.disown_CADISimulationCallback(self)
        return weakref_proxy(self)
CADISimulationCallback.simMessage = new_instancemethod(_CADI.CADISimulationCallback_simMessage,None,CADISimulationCallback)
CADISimulationCallback.simShutdown = new_instancemethod(_CADI.CADISimulationCallback_simShutdown,None,CADISimulationCallback)
CADISimulationCallback.simKilled = new_instancemethod(_CADI.CADISimulationCallback_simKilled,None,CADISimulationCallback)
CADISimulationCallback_swigregister = _CADI.CADISimulationCallback_swigregister
CADISimulationCallback_swigregister(CADISimulationCallback)

def CADISimulationCallback_IFNAME():
  """CADISimulationCallback_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CADISimulationCallback_IFNAME()

def CADISimulationCallback_IFREVISION():
  """CADISimulationCallback_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CADISimulationCallback_IFREVISION()

class CADISimulation(CAInterface):
    """Proxy of C++ eslapi::CADISimulation class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CADISimulation_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CADISimulation_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    def Release(self, *args):
        """Release(self, shutdown)"""
        return _CADI.CADISimulation_Release(self, *args)

    def AddCallbackObject(self, *args):
        """AddCallbackObject(self, callbackObject)"""
        return _CADI.CADISimulation_AddCallbackObject(self, *args)

    def RemoveCallbackObject(self, *args):
        """RemoveCallbackObject(self, callbackObject)"""
        return _CADI.CADISimulation_RemoveCallbackObject(self, *args)

    def _GetTargetInfos(self, *args):
        """CADISimulation.GetTargetInfos(self) -> list"""
        return _CADI.CADISimulation__GetTargetInfos(self, *args)

    def GetTarget(self, *args):
        """GetTarget(self, targetID) -> CAInterface"""
        return _CADI.CADISimulation_GetTarget(self, *args)

    def GetTargetInfos(self):
        result = []
        temp = []
        while True:
            temp = check_status(self._GetTargetInfos(len(result)), "GetTargetInfos", empty_list_error=CADI_STATUS_IllegalArgument)
            if len(temp) == 0:
                return result
            else:
                result += temp

    __swig_destroy__ = _CADI.delete_CADISimulation
CADISimulation.Release = new_instancemethod(_CADI.CADISimulation_Release,None,CADISimulation)
CADISimulation.AddCallbackObject = new_instancemethod(_CADI.CADISimulation_AddCallbackObject,None,CADISimulation)
CADISimulation.RemoveCallbackObject = new_instancemethod(_CADI.CADISimulation_RemoveCallbackObject,None,CADISimulation)
CADISimulation._GetTargetInfos = new_instancemethod(_CADI.CADISimulation__GetTargetInfos,None,CADISimulation)
CADISimulation.GetTarget = new_instancemethod(_CADI.CADISimulation_GetTarget,None,CADISimulation)
CADISimulation_swigregister = _CADI.CADISimulation_swigregister
CADISimulation_swigregister(CADISimulation)

def CADISimulation_IFNAME():
  """CADISimulation_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CADISimulation_IFNAME()

def CADISimulation_IFREVISION():
  """CADISimulation_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CADISimulation_IFREVISION()

class CADISimulationFactory(CAInterface):
    """Proxy of C++ eslapi::CADISimulationFactory class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CADISimulationFactory_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CADISimulationFactory_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    def Release(self):
        """Release(self)"""
        return _CADI.CADISimulationFactory_Release(self)

    def GetName(self):
        """GetName(self) -> char const *"""
        return _CADI.CADISimulationFactory_GetName(self)

    def GetDescription(self):
        """GetDescription(self) -> char const *"""
        return _CADI.CADISimulationFactory_GetDescription(self)

    def _GetParameterInfos(self, *args):
        """CADISimulationFactory.GetParameterInfos(self) -> list"""
        return _CADI.CADISimulationFactory__GetParameterInfos(self, *args)

    def Instantiate(self, *args):
        """Instantiate(self, parameterValues, errorCallbackObject, simulationCallbackObject, simulationCallbacksEnable) -> CADISimulation"""
        return _CADI.CADISimulationFactory_Instantiate(self, *args)

    def GetParameterInfos(self):
        result = []
        temp = []
        while True:
            temp = check_status(self._GetParameterInfos(len(result)), "GetParameterInfos", empty_list_error=CADI_STATUS_IllegalArgument)
            if len(temp) == 0:
                return result
            else:
                result += temp

    __swig_destroy__ = _CADI.delete_CADISimulationFactory
CADISimulationFactory.Release = new_instancemethod(_CADI.CADISimulationFactory_Release,None,CADISimulationFactory)
CADISimulationFactory.GetName = new_instancemethod(_CADI.CADISimulationFactory_GetName,None,CADISimulationFactory)
CADISimulationFactory.GetDescription = new_instancemethod(_CADI.CADISimulationFactory_GetDescription,None,CADISimulationFactory)
CADISimulationFactory._GetParameterInfos = new_instancemethod(_CADI.CADISimulationFactory__GetParameterInfos,None,CADISimulationFactory)
CADISimulationFactory.Instantiate = new_instancemethod(_CADI.CADISimulationFactory_Instantiate,None,CADISimulationFactory)
CADISimulationFactory_swigregister = _CADI.CADISimulationFactory_swigregister
CADISimulationFactory_swigregister(CADISimulationFactory)

def CADISimulationFactory_IFNAME():
  """CADISimulationFactory_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CADISimulationFactory_IFNAME()

def CADISimulationFactory_IFREVISION():
  """CADISimulationFactory_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CADISimulationFactory_IFREVISION()

class CADIBroker(CAInterface):
    """Proxy of C++ eslapi::CADIBroker class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CADIBroker_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CADIBroker_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    __swig_destroy__ = _CADI.delete_CADIBroker
    def Release(self):
        """Release(self)"""
        return _CADI.CADIBroker_Release(self)

    def _GetSimulationFactories(self, *args):
        """CADIBroker.GetSimulationFactories(self) -> list"""
        return _CADI.CADIBroker__GetSimulationFactories(self, *args)

    def _GetSimulationInfos(self, *args):
        """CADIBroker.GetSimulationInfos(self) -> list"""
        return _CADI.CADIBroker__GetSimulationInfos(self, *args)

    def SelectSimulation(self, *args):
        """SelectSimulation(self, simulationId, errorCallbackObject, simulationCallbackObject, simulationCallbacksEnable) -> CADISimulation"""
        return _CADI.CADIBroker_SelectSimulation(self, *args)

    def GetSimulationInfos(self):
        result = []
        temp = []
        while True:
            temp = check_status(self._GetSimulationInfos(len(result)), "GetSimulationInfos", empty_list_error=CADI_STATUS_IllegalArgument)
            if len(temp) == 0:
                return result
            else:
                result += temp

    def GetSimulationFactories(self):
        result = []
        temp = []
        while True:
            temp = check_status(self._GetSimulationFactories(len(result)), "GetSimulationFactories", empty_list_error=CADI_STATUS_IllegalArgument)
            if len(temp) == 0:
                return result
            else:
                result += temp

CADIBroker.Release = new_instancemethod(_CADI.CADIBroker_Release,None,CADIBroker)
CADIBroker._GetSimulationFactories = new_instancemethod(_CADI.CADIBroker__GetSimulationFactories,None,CADIBroker)
CADIBroker._GetSimulationInfos = new_instancemethod(_CADI.CADIBroker__GetSimulationInfos,None,CADIBroker)
CADIBroker.SelectSimulation = new_instancemethod(_CADI.CADIBroker_SelectSimulation,None,CADIBroker)
CADIBroker_swigregister = _CADI.CADIBroker_swigregister
CADIBroker_swigregister(CADIBroker)

def CADIBroker_IFNAME():
  """CADIBroker_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CADIBroker_IFNAME()

def CADIBroker_IFREVISION():
  """CADIBroker_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CADIBroker_IFREVISION()


def check_disassembler_status(*args):
  """check_disassembler_status(code) -> bool"""
  return _CADI.check_disassembler_status(*args)
CADI_DISASSEMBLER_TYPE_STANDARD = _CADI.CADI_DISASSEMBLER_TYPE_STANDARD
CADI_DISASSEMBLER_TYPE_SOURCELEVEL = _CADI.CADI_DISASSEMBLER_TYPE_SOURCELEVEL
CADI_DISASSEMBLER_TYPE_INTERPRETER = _CADI.CADI_DISASSEMBLER_TYPE_INTERPRETER
CADI_DISASSEMBLER_STATUS_OK = _CADI.CADI_DISASSEMBLER_STATUS_OK
CADI_DISASSEMBLER_STATUS_NO_INSTRUCTION = _CADI.CADI_DISASSEMBLER_STATUS_NO_INSTRUCTION
CADI_DISASSEMBLER_STATUS_ILLEGAL_ADDRESS = _CADI.CADI_DISASSEMBLER_STATUS_ILLEGAL_ADDRESS
CADI_DISASSEMBLER_STATUS_ERROR = _CADI.CADI_DISASSEMBLER_STATUS_ERROR
CADI_DISASSEMBLER_INSTRUCTION_TYPE_NOCALL = _CADI.CADI_DISASSEMBLER_INSTRUCTION_TYPE_NOCALL
CADI_DISASSEMBLER_INSTRUCTION_TYPE_CALL = _CADI.CADI_DISASSEMBLER_INSTRUCTION_TYPE_CALL
class CADIDisassemblerCB(CAInterface):
    """Proxy of C++ eslapi::CADIDisassemblerCB class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CADIDisassemblerCB_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CADIDisassemblerCB_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    def ReceiveModeName(self, *args):
        """ReceiveModeName(self, mode, modename)"""
        return _CADI.CADIDisassemblerCB_ReceiveModeName(self, *args)

    def ReceiveSourceReference(self, *args):
        """ReceiveSourceReference(self, addr, sourceFile, sourceLine)"""
        return _CADI.CADIDisassemblerCB_ReceiveSourceReference(self, *args)

    def ReceiveDisassembly(self, *args):
        """ReceiveDisassembly(self, addr, opcodes, disassembly)"""
        return _CADI.CADIDisassemblerCB_ReceiveDisassembly(self, *args)

    def __init__(self): 
        """__init__(self) -> CADIDisassemblerCB"""
        if self.__class__ == CADIDisassemblerCB:
            _self = None
        else:
            _self = self
        _CADI.CADIDisassemblerCB_swiginit(self,_CADI.new_CADIDisassemblerCB(_self, ))
    __swig_destroy__ = _CADI.delete_CADIDisassemblerCB
    def __disown__(self):
        self.this.disown()
        _CADI.disown_CADIDisassemblerCB(self)
        return weakref_proxy(self)
CADIDisassemblerCB.ReceiveModeName = new_instancemethod(_CADI.CADIDisassemblerCB_ReceiveModeName,None,CADIDisassemblerCB)
CADIDisassemblerCB.ReceiveSourceReference = new_instancemethod(_CADI.CADIDisassemblerCB_ReceiveSourceReference,None,CADIDisassemblerCB)
CADIDisassemblerCB.ReceiveDisassembly = new_instancemethod(_CADI.CADIDisassemblerCB_ReceiveDisassembly,None,CADIDisassemblerCB)
CADIDisassemblerCB_swigregister = _CADI.CADIDisassemblerCB_swigregister
CADIDisassemblerCB_swigregister(CADIDisassemblerCB)

def CADIDisassemblerCB_IFNAME():
  """CADIDisassemblerCB_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CADIDisassemblerCB_IFNAME()

def CADIDisassemblerCB_IFREVISION():
  """CADIDisassemblerCB_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CADIDisassemblerCB_IFREVISION()

class CADIDisassembler(CAInterface):
    """Proxy of C++ eslapi::CADIDisassembler class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IFNAME():
        """IFNAME() -> eslapi::if_name_t"""
        return _CADI.CADIDisassembler_IFNAME()

    IFNAME = staticmethod(IFNAME)
    def IFREVISION():
        """IFREVISION() -> eslapi::if_rev_t"""
        return _CADI.CADIDisassembler_IFREVISION()

    IFREVISION = staticmethod(IFREVISION)
    def GetType(self):
        """GetType(self) -> eslapi::CADIDisassemblerType"""
        return _CADI.CADIDisassembler_GetType(self)

    def GetModeCount(self):
        """GetModeCount(self) -> uint32_t"""
        return _CADI.CADIDisassembler_GetModeCount(self)

    def GetModeNames(self, *args):
        """GetModeNames(self, callback)"""
        return _CADI.CADIDisassembler_GetModeNames(self, *args)

    def GetCurrentMode(self):
        """GetCurrentMode(self) -> uint32_t"""
        return _CADI.CADIDisassembler_GetCurrentMode(self)

    def GetSourceReferenceForAddress(self, *args):
        """GetSourceReferenceForAddress(self, callback, address) -> eslapi::CADIDisassemblerStatus"""
        return _CADI.CADIDisassembler_GetSourceReferenceForAddress(self, *args)

    def GetAddressForSourceReference(self, *args):
        """GetAddressForSourceReference(self, sourceFile, sourceLine, address) -> eslapi::CADIDisassemblerStatus"""
        return _CADI.CADIDisassembler_GetAddressForSourceReference(self, *args)

    def GetDisassembly(self, *args):
        """
        GetDisassembly(self, callback, address, mode, desiredCount=1) -> eslapi::CADIDisassemblerStatus
        GetDisassembly(self, callback, address, mode) -> eslapi::CADIDisassemblerStatus
        """
        return _CADI.CADIDisassembler_GetDisassembly(self, *args)

    def GetInstructionType(self, *args):
        """GetInstructionType(self, address, insn_type) -> eslapi::CADIDisassemblerStatus"""
        return _CADI.CADIDisassembler_GetInstructionType(self, *args)

    __swig_destroy__ = _CADI.delete_CADIDisassembler
CADIDisassembler.GetType = new_instancemethod(_CADI.CADIDisassembler_GetType,None,CADIDisassembler)
CADIDisassembler.GetModeCount = new_instancemethod(_CADI.CADIDisassembler_GetModeCount,None,CADIDisassembler)
CADIDisassembler.GetModeNames = new_instancemethod(_CADI.CADIDisassembler_GetModeNames,None,CADIDisassembler)
CADIDisassembler.GetCurrentMode = new_instancemethod(_CADI.CADIDisassembler_GetCurrentMode,None,CADIDisassembler)
CADIDisassembler.GetSourceReferenceForAddress = new_instancemethod(_CADI.CADIDisassembler_GetSourceReferenceForAddress,None,CADIDisassembler)
CADIDisassembler.GetAddressForSourceReference = new_instancemethod(_CADI.CADIDisassembler_GetAddressForSourceReference,None,CADIDisassembler)
CADIDisassembler.GetDisassembly = new_instancemethod(_CADI.CADIDisassembler_GetDisassembly,None,CADIDisassembler)
CADIDisassembler.GetInstructionType = new_instancemethod(_CADI.CADIDisassembler_GetInstructionType,None,CADIDisassembler)
CADIDisassembler_swigregister = _CADI.CADIDisassembler_swigregister
CADIDisassembler_swigregister(CADIDisassembler)

def CADIDisassembler_IFNAME():
  """CADIDisassembler_IFNAME() -> eslapi::if_name_t"""
  return _CADI.CADIDisassembler_IFNAME()

def CADIDisassembler_IFREVISION():
  """CADIDisassembler_IFREVISION() -> eslapi::if_rev_t"""
  return _CADI.CADIDisassembler_IFREVISION()



