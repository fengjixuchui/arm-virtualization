/*
 * Copyright 2006 ARM Limited. All rights reserved.
 * Copyright 2007 ARM Limited. All rights reserved.
 * Copyright 2008 ARM Limited. All rights reserved.
 */

// An ARM1176CT CPU component.

extern component ARM1176CT
{
    properties {
        executes_software = 1; 
        version = "8.1.37";
        component_type = "Core";
        description = "ARM1176CT CPU component";
        documentation_file = "../Docs/DUI0423O_fast_model_rm.pdf";
    }

    resources
    {
        PARAMETER { name("vfp-present"), type(bool), default(true), description("configure processor as VFP enabled") } vfp_present;
        PARAMETER { name("BIGENDINIT"), type(bool), default(false), description("initialize to ARMv5 big endian mode") } BIGENDINIT;
        PARAMETER { name("VINITHI"), type(bool), default(false), description("initialize with high vectors enabled") } VINITHI;
        PARAMETER { name("INITRAM"), type(bool), default(false), description("initialize with ITCM0 enabled at address 0x0") } INITRAM;
        PARAMETER { name("itcm0_size"), type(uint32_t), default(0x10), min(0x0), max(0x40), description("Size of ITCM size in KB") } itcm0_size;
        PARAMETER { name("dtcm0_size"), type(uint32_t), default(0x10), min(0x0), max(0x40), description("Size of DTCM size in KB") } dtcm0_size;
        PARAMETER { name("UBITINIT"), type(bool), default(false), description("initialize to ARMv6 unaligned behavior") } UBITINIT;
        PARAMETER { name("CP15SDISABLE"), type(bool), default(false), description("initialize to disable access to some CP15 registers") } CP15SDISABLE;
        PARAMETER { name("vfp-enable_at_reset"), type(bool), default(false), description("enable coprocessor access and VFP at reset")  } vfp_enable_at_reset;
        PARAMETER { name("semihosting-enable"), type(bool), default(true), description("Enable semihosting SVC traps. Applications that do not use semihosting must set this parameter to false") } semihosting_enable;
        PARAMETER { name("semihosting-ARM_SVC"), type(uint32_t), default(0x123456), min(0x0), max(0xFFFFFFFF), description("A32 SVC number for semihosting") } semihosting_ARM_SVC;
        PARAMETER { name("semihosting-Thumb_SVC"), type(uint32_t), default(0xAB), min(0x0), max(0xFFFFFFFF), description("T32 SVC number for semihosting") } semihosting_Thumb_SVC;
        PARAMETER { name("semihosting-cmd_line"), type(string), default(""), description("command line available to semihosting SVC calls") } semihosting_cmd_line;
        PARAMETER { name("semihosting-heap_base"), type(uint32_t), default(0x0), min(0x0), max(0xFFFFFFFF), description("virtual address of heap base") } semihosting_heap_base;
        PARAMETER { name("semihosting-heap_limit"), type(uint32_t), default(0xF000000), min(0x0), max(0xFFFFFFFF), description("virtual address of top of heap") } semihosting_heap_limit;
        PARAMETER { name("semihosting-stack_base"), type(uint32_t), default(0x10000000), min(0x0), max(0xFFFFFFFF), description("virtual address of base of descending stack") } semihosting_stack_base;
        PARAMETER { name("semihosting-stack_limit"), type(uint32_t), default(0xF000000), min(0x0), max(0xFFFFFFFF), description("virtual address of stack limit") } semihosting_stack_limit;
        PARAMETER { name("semihosting-cwd"), type(string), default(""), description("virtual address of CWD")} semihosting_cwd;
        PARAMETER { name("min_sync_level"), type(uint32_t), default(0), min(0), max(3), runtime(true), description("force minimum syncLevel (0=off=default,1=syncState,2=postInsnIO,3=postInsnAll)") } min_sync_level;
        PARAMETER { name("device-accurate-tlb"), type(bool), default(false), description("specify whether all TLBs are modelled") } device_accurate_tlb;
   }

    // The clock signal connected to the clk_in port is used to determine
    // the rate at which the core executes instructions.
    slave port<ClockSignal> clk_in;

    // The core will generate bus requests on this port.
    master port<PVBus> pvbus_m;

    // Raising this signal will put the core into reset mode.
    slave port<Signal> reset;

    // This signal drives the CPU's interrupt handling.
    slave port<Signal> irq;

    // This signal drives the CPU's fast-interrupt handling.
    slave port<Signal> fiq;

    // Interrupt signal from performance monitoring unit.
    master port<Signal> pmuirq;

    // Interrupt signal from L1 DMA.
    master port<Signal> dmairq;

    // Secure interrupt signal from L1 DMA
    master port<Signal> dmasirq;

    // L1 DMA error interrupt.
    master port<Signal> dmaexterrirq;

    // This port should be connected to one of the two ticks ports
    // on a 'visualisation' component, in order to display a running
    // instruction count.
    master port<InstructionCount> ticks;
    
    // Vic address port from primary VIC
    slave port<ValueState> vic_addr;
    
    // Vic acknowledge port to primary VIC
    master port<Signal> vic_ack;
}

