/*
 * Copyright 2006 ARM Limited. All rights reserved.
 * Copyright 2007 ARM Limited. All rights reserved.
 * Copyright 2008 ARM Limited. All rights reserved.
 */

// A ClockTimer provides support for counting a number of ticks at the
// rate determined by the input clock.  When the countdown reaches zero,
// the timer can send a signal to another component.  That component can
// return a value that will cause the timer to start counting down again.
//
// Setting up a timer is very efficient, and no host processing time is used
// while a counter is counting down: when a timer is started, the scheduler
// precomputes the finish time.
//
// See ClockSignalProtocol.lisa and CounterDivider.lisa for more details
// of the scheduler system.  See TimerControlProtocol.lisa and
// TimerCallbackProtocol.lisa for the methods used to control a timer and
// to handle the signal when the countdown is complete.
//
// To use a ClockTimer:
//  1. Connect the ClockTimer's 'timer_callback' port to a slave port 
//     that implements the 'signal()' behaviour.
//  2. Connect a clock signal to the clk_in port.
//  3. Use the 'timer_control' port to start the timer counting down for a
//     given number of ticks.

extern component ClockTimer
{
    properties { 
        version = "8.1.37";
        component_type = "Other";
        description = "A ClockTimer provides support for counting a number of ticks at the  rate determined by the input clock.";
        documentation_file = "../Docs/DUI0423O_fast_model_rm.pdf";
    }

    master port<TimerCallback> timer_callback;
    slave port<TimerControl> timer_control;
    slave port<ClockSignal> clk_in;
}
