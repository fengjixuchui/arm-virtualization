/*
 * Copyright 2009 ARM Limited. All rights reserved.
 */

// The VisEventRecorderProtocol is used to playback and record event in the visualisation component of a platform system.
// The main application is recorded GUI benchmarks and regressions tests for operating systems, which offer no better
// interface for this. A master port of this protocol is in the visualization component (e.g. EBVisualisation) and
// a slave port is in the VisEventRecorder component.

protocol VisEventRecorderProtocol
{
    properties
    {
        version = "8.1.37";
        description = "Event recorder protocol between visualisation component (master) and VisEventRecorder component (slave)";
        documentation_file = "../Docs/DUI0423O_fast_model_rm.pdf";
    }
    
    includes
    {
#include "components/Visualisation.h" // for struct VisEvent;
    }
    
    // all behaviors are called in the simulation thread
    
    // playback events:
    // - return true and fill event with the next event if there is an event
    // - return false if there is no event
    // - it is safe to call this from outside of process events (will always return false then)
    // - processEvents() is called to notift the master component (e.g. EBVisualisation) that new events are available
    // - the slave component will ultimately decide whether playback is enabled or disabled
    slave behavior getEvent(VisEvent *event): bool;
    
    // record events:
    // - call this regardless whether recording is enabled or disabled
    // - call this even for events which just came from getEvent()
    // - the slave component will ultimately decide whether recording is enabled or disabled
    slave behavior putEvent(const VisEvent *event);
    
    // called on initialisation: associate names with VisRegion pointers
    // - slave component does not access the VisRegion objects
    // - all VisRegion objects (usually VisRenderRegion and VisPushButtonRegion) should be registered
    //   - at least the ones where 'VisEvent::region' is used in the event loop
    // - use the instance name for the region in the visualisation component as name: registerVisRegion(myRegion, "myRegion");
    // 
    slave behavior registerVisRegion(VisRegion *region, const char *regionName);

    // the slave component calls this in the master component to notify the master component that new events are now
    // available and need to be processed now
    // - the new events should be retrieved with getEvent() from within processEvents()
    master behavior processEvents();    
}

