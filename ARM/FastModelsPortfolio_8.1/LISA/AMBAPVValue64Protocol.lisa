/*
 * AMBAPVValue64Protocol.lisa - AMBA-PV Value64 protocol definition.
 *
 * The confidential and proprietary information contained in this file may
 * only be used by a person authorised under and to the extent permitted
 * by a subsisting licensing agreement from ARM Limited.
 *
 * Copyright 2007-2008 ARM Limited.
 * All rights reserved.
 *
 * This entire notice must be reproduced on all copies of this file
 * and copies of this file may only be made by a person if such person is
 * permitted to do so under the terms of a subsisting license agreement
 * from ARM Limited.
 */

protocol AMBAPVValue64 {

  properties {
        version = "8.1.37";
        description = "AMBA-PV Value64 protocol";
        sc_master_port_class_name = "amba_pv::signal_master_port<uint64_t>";
        sc_slave_base_class_name = "amba_pv::signal_slave_base<uint64_t>";
        sc_slave_export_class_name = "amba_pv::signal_slave_export<uint64_t>";
        dso_safe = 0;
        documentation_file = "../Docs/DUI0423O_fast_model_rm.pdf";
    }

    includes {
        #include <amba_pv.h>
        #include <sg/SGstdint.h>
    }
    
    /* User layer behaviour for the AMBA-PV Value64 protocol */

    /* Transfers a signal state. */
    slave behaviour set_state(int export_id,
                              const uint64_t & value);
}

protocol AMBAPVValueState64 {

    properties {
        version = "8.1.37";
        description = "AMBA-PV ValueState64 protocol";
        sc_master_port_class_name = "amba_pv::signal_state_master_port<uint64_t>";
        sc_slave_base_class_name = "amba_pv::signal_state_slave_base<uint64_t>";
        sc_slave_export_class_name = "amba_pv::signal_state_slave_export<uint64_t>";
        documentation_file = "../Docs/DUI0423O_fast_model_rm.pdf";
    }

    includes {
        #include <amba_pv.h>
        #include <sg/SGstdint.h>
    }
    
    /* User layer behaviour for the AMBA-PV ValueState64 protocol */

    /* Transfers a value state. */
    slave behaviour set_state(int export_id,
                              const uint64_t & value);

    /* Retrieves a value state. */
    slave behaviour get_state(int export_id,
                              tlm::tlm_tag<uint64_t> * t): uint64_t;
}
