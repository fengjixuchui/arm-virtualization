/*
 * Copyright 2006 ARM Limited. All rights reserved.
 * Copyright 2007 ARM Limited. All rights reserved
 * Copyright 2008 ARM Limited. All rights reserved.
 */

// Interface component, which takes the keypress/release signals from the
// Visualisation component and translates them into clocked PS2Data signals
// which can be routed to a PL050_KMI component.

component PS2Mouse
{
    properties { 
        version = "8.1.37";
        component_type = "Peripheral";
        description = "Interface component, which takes the keypress/release signals from the Visualisation component and translates them into clocked PS2Data signals which can be routed to a PL050_KMI component.";
        documentation_file = "../Docs/DUI0423O_fast_model_rm.pdf";
    }
    
    includes
    {
        #define debug_queue if (!0) ; else printf
        #define TRACE_MOUSE if (!0) ; else printf
    }
    
    composition
    {
        ps2_clocktimer : ClockTimer;
    }
    
    connection
    {
        self.clk_in => ps2_clocktimer.clk_in;
        ps2_clocktimer.timer_callback => self.ps2_timer_callback;
    }
    
    resources
    {
        // ps2 resources
        
        enum consts
        {
            tx_fifo_max = 128,

            PS2_ACK = 0xfa
        };
        
        uint8_t tx_fifo[tx_fifo_max];
        uint8_t tx_fifo_level;
        uint8_t tx_fifo_in;
        uint8_t tx_fifo_out;
        
        bool command_pending; //!< kmi has indicated that there is a command pending
        bool ok_to_send;      //!< kmi has indicated that it is ok to send data

        uint32_t poll_period;   //!< polling period in usecs (0 = nothing to do)
        bool   poll_active;   //!< protects timer from being set during a callback

        // Mouse resources
        bool enabled;
        bool stream;
        bool scaling;
        bool wrapmode;
        uint8_t resolution;
        uint8_t samplerate;

        uint8_t buttons;

        uint8_t command_pos;
        uint8_t command;
        
    }

    // Clock signal to rate at which PS2Data signals are generated.
    slave port<ClockSignal> clk_in;
    
    behaviour init()
    {
        composition.init();
        ps2_init();
        device_init();
    }
    
    behaviour reset(int level)
    {
        composition.reset(level);
        ps2_reset();
        device_reset();
    }
    
    behaviour ps2_init()
    {
        ps2_reset();
    }
    
    behaviour ps2_reset()
    {
        command_pending = false;
        ok_to_send      = false;

        poll_period = 0;
        poll_active = false;    
        
        clearQueue();
    }
    
    // ps2 device implementation
    
    behaviour clearQueue()
    {
        tx_fifo_in    = 0;
        tx_fifo_out   = 0;
        tx_fifo_level = 0;        
    }
    
    behaviour queueData(uint8_t* buf, uint8_t count)
    {
        if (ok_to_send && !ps2_clocktimer.timer_control.isSet()) {
            ps2_clocktimer.timer_control.set(8); 
        }

        if (tx_fifo_level+count >= tx_fifo_max)
        {
            debug_queue("ps2 queue overflow\n");
            return;
        }

        while (tx_fifo_level < tx_fifo_max && count > 0)
        {
            tx_fifo[tx_fifo_in++] = *buf++;
            if (tx_fifo_in == tx_fifo_max)
                tx_fifo_in = 0;
            tx_fifo_level++;

            --count;
        }        
    }
    
    // Generate PS2 signals to be sent to PL050_KMI.
    master port<PS2Data>     ps2
    {
        behaviour setClockData(enum ps2clockdata_state state)
        {
            command_pending = (state == PS2_Request_To_Send);
            ok_to_send = (state == PS2_Ready);
         
            if (ok_to_send && tx_fifo_level > 0)
                poll_period = 8;
            else if (command_pending)
                poll_period = 64;
            else
                poll_period = 0;

            // Be careful to not play around with the timer if we're in the
            // timer callback.  The callback will retrigger the timer based
            // on the value of poll_period.
            if (!poll_active)
            {
                if (poll_period > 0) {
                    ps2_clocktimer.timer_control.set(poll_period);
                } else {
                    ps2_clocktimer.timer_control.cancel();
                }
            }            
        }
    }
    
    internal slave port<TimerCallback> ps2_timer_callback
    {
        behavior signal() : uint32_t
        {
            poll_active = true;

            if (command_pending) {
                uint8_t data = ps2.getData();
                Command(data);
            }
            
            if (ok_to_send && tx_fifo_level > 0) {
                uint8_t data = tx_fifo[tx_fifo_out];
                
                if (++tx_fifo_out == tx_fifo_max) {
                    tx_fifo_out = 0;
                }

                --tx_fifo_level;

                ps2.putData(data);
            }

            poll_active = false;

            // various callbacks will determine the next polling period
            return poll_period;
        }
    }
    
    // Keyboard specifics
    
    behaviour device_init()
    {
        
    }
    
    behaviour device_reset()
    {
        enabled  = false;
        stream   = false;
        scaling  = false;
        wrapmode = false;
        resolution = 0;
        samplerate = 0;

        buttons     = 0;
        command_pos = 0;
        command     = 0;
    }
    
    behaviour Reply1(uint8_t data)
    {
        queueData(&data, 1);
    }

    behaviour Reply2(uint8_t data1, uint8_t data2)
    {
        uint8_t buf[2];
        buf[0] = data1;
        buf[1] = data2;

        queueData(buf, 2);
    }
    
    behaviour Command(uint8_t data)
    {
        // does this really flush the queue?
        clearQueue();

        if (command_pos == 0)
            command = data;

        switch (command)
        {
        case 0xf0: // remote
            stream = false;
            Reply1(PS2_ACK);
        break;
        case 0xea: // stream mode
            stream = true;
            Reply1(PS2_ACK);
        break;
        case 0xf2: // read id - ack then 00
            Reply2(PS2_ACK, 0);
        break;
        case 0xe6: // scaling
            scaling = false;
            Reply1(PS2_ACK);
        break;
        case 0xe7: // scaling 2:1
            scaling = true;
            Reply1(PS2_ACK);
        break;
        case 0xe8: // resolution
            if (command_pos == 0)
            {
                command_pos = 1;
            }
            else
            {
                resolution = data;
                command_pos = 0;
            }
            Reply1(PS2_ACK);
        break;
        case 0xe9: // status request
            Reply1((stream  ? (1<<6) : 0) |
                (enabled ? (1<<5) : 0) |
                (scaling ? (1<<4) : 0) |
                (buttons & 7));
            Reply1(resolution);
            Reply1(samplerate);
        break;
        case 0xec: // wrap mode off
            wrapmode = false;
            Reply1(PS2_ACK);
        break;
        case 0xee: // wrap mode on
            wrapmode = true;
            Reply1(PS2_ACK);
        break;
        case 0xf3: // sample rate
            if (command_pos == 0)
            {
                command_pos = 1;
            }
            else
            {
                samplerate = data;
                command_pos = 0;
            }
            Reply1(PS2_ACK);
        break;
        case 0xf4: // emable data reporting
            enabled = true;
            Reply1(PS2_ACK);
        break;
        case 0xf5: // disable data reporting
            enabled = false;
            Reply1(PS2_ACK);
        break;
        case 0xf6: // set defaults
            samplerate = 100;
            resolution = 2;
            scaling = 0;
            enabled = false;
            stream = true;
            Reply1(PS2_ACK);
        break;
        case 0xff: // reset
            wrapmode = false;
            enabled = false;
            Reply1(PS2_ACK);
            Reply2(0xaa, 0);
        break;
        default:
            TRACE_MOUSE("unknown PS/2 Mouse command %d\n", data);
            break;
        }
    }
    
    // Incoming keypress/release signals from Visualisation component.
    slave port<MouseStatus> mouse
    {
        behavior mouseMove(int dx, int dy)
        {
            TRACE_MOUSE("Mouse move %d, %d\n", dx, dy);
            dy = -dy;

            bool xo = false;
            bool yo = false;

            if (dx> 255) { dx =  255; xo = true; }
            if (dx<-255) { dx = -255; xo = true; }
            if (dy> 255) { dy =  255; yo = true; }
            if (dy<-255) { dy = -255; yo = true; }

            if (enabled)
            {
                uint8_t buf[3];
                buf[0] = buttons          |
                    (1<<3)                |
                    ((dx<0) ? (1<<4) : 0) |
                    ((dy<0) ? (1<<5) : 0) |
                    (xo     ? (1<<6) : 0) |
                    (yo     ? (1<<7) : 0);

                buf[1] = dx & 0xff;
                buf[2] = dy & 0xff;

                queueData(buf, 3);
            }
        }
        
        behavior mouseButton(uint8_t button, bool down)
        {
            TRACE_MOUSE("Mouse button %d %s\n", button, down ? "down" : "up"); 
            if (button == 1)
            {
                if (down)
                    buttons |= 1;
                else
                    buttons &=~ 1;
            }
            else if (button == 3)
            {
                if (down)
                    buttons |= 2;
                else
                    buttons &=~ 2;
            }
            else if (button == 2)
            {
                if (down)
                    buttons |= 4;
                else
                    buttons &=~4;
            }
           
            if (enabled)
            {
                // probably not true. The state should be sampled
                uint8_t buf[3];
                buf[0] = buttons | (1<<3);
                buf[1] = 0;
                buf[2] = 0;

                queueData(buf, 3);
            }
        }
        
    }


}
