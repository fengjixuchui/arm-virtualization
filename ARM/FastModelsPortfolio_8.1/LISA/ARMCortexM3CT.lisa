/*
 * Copyright 2007 ARM Limited. All rights reserved.
 * Copyright 2008 ARM Limited. All rights reserved.
 */

// An ARMCortexM3CT CPU component.

extern component ARMCortexM3CT
{
    properties {
        executes_software = 1; 
        version = "8.1.37";
        component_type = "Core";
        description = "ARMCortexM3CT CPU component";
        documentation_file = "../Docs/DUI0423O_fast_model_rm.pdf";
    }
    
    resources
    {
        PARAMETER { name("semihosting-enable"), type(bool), default(true), description("Enable semihosting SVC traps. Applications that do not use semihosting must set this parameter to false.") } semihosting_enable;
        PARAMETER { name("semihosting-Thumb_SVC"), type(uint32_t), default(0xAB), min(0x0), max(0xFFFFFFFF), description("T32 SVC number for semihosting") } semihosting_Thumb_SVC;
        PARAMETER { name("semihosting-cmd_line"), type(string), default(""), description("command line available to semihosting SVC calls") } semihosting_cmd_line;
        PARAMETER { name("semihosting-heap_base"), type(uint32_t), default(0x0), min(0x0), max(0xFFFFFFFF), description("virtual address of heap base") } semihosting_heap_base;
        PARAMETER { name("semihosting-heap_limit"), type(uint32_t), default(0x10700000), min(0x0), max(0xFFFFFFFF), description("virtual address of top of heap") } semihosting_heap_limit;
        PARAMETER { name("semihosting-stack_base"), type(uint32_t), default(0x10700000), min(0x0), max(0xFFFFFFFF), description("virtual address of base of descending stack") } semihosting_stack_base;
        PARAMETER { name("semihosting-stack_limit"), type(uint32_t), default(0x10800000), min(0x0), max(0xFFFFFFFF), description("virtual address of stack limit") } semihosting_stack_limit;
        PARAMETER { name("semihosting-cwd"), type(string), default(""), description("Virtual address of CWD.")} semihosting_cwd;
        PARAMETER { name("min_sync_level"), type(uint32_t), default(0), min(0), max(3), runtime(true), description("force minimum syncLevel (0=off=default,1=syncState,2=postInsnIO,3=postInsnAll)") } min_sync_level;
        PARAMETER { name("NUM_MPU_REGION"), type(uint32_t), default(0x8), min(0x0), max(0x8), description("Number of MPU regions") } NUM_MPU_REGION;
        PARAMETER { name("NUM_IRQ"), type(uint32_t), default(0x10), min(0x1), max(0xF0), description("Number of user interrupts") } NUM_IRQ;
        PARAMETER { name("LVL_WIDTH"), type(uint32_t), default(0x3), min(0x3), max(0x8), description("Number of bits of interrupt priority") } LVL_WIDTH;
        PARAMETER { name("BIGENDINIT"), type(bool), default(false), description("Initialize processor to big endian mode") } BIGENDINIT;
        PARAMETER { name("master_id"), type(uint32_t), default(0x0), min(0x0), max(0xFFFFFFFF), description("Master ID presented in bus transactions") } master_id;
   }
    
    // The clock signal connected to the clk_in port is used to determine
    // the rate at which the core executes instructions.
    slave port<ClockSignal> clk_in;

    // This is the reference clock for the SysTick timer
    slave port<ClockSignal> stclk;

    // This is the calibration value for the SysTick timer
    slave port<Value> stcalib;

    // The core will generate bus requests on this port.
    master port<PVBus> pvbus_m;

    // The core will generate External Private Peripheral Bus requests on this port.
    master port<PVBus> pv_ppbus_m;

     // Asserted when the processor is in sleep
    master port<Signal> sleeping;

    // Asserted when the processor is in deep sleep
    master port<Signal> sleepdeep;

    // Asserted when the processor is in lockup state
    master port<Signal> lockup;
    
    // Raising this signal will do a power-on reset of the core
    slave port<Signal> poreset;

    // Raising this signal will put the core into reset mode
    // (but does not reset the debug logic)
    slave port<Signal> sysreset;

    // Asserted to indicate that a reset is required
    master port<Signal> sysresetreq;

    // This peer port of event input (and output) is for wakeup from WFE
    // and corresponds to the RTL TXEV and RXEV signals
    peer port<Signal> event;

    // This signal array delivers signals to the NVIC
    slave port<Signal> intisr[240];

    // Configure non maskable interrupt
    slave port<Signal> intnmi;

    // Configure big endian data format
    slave port<Signal> bigend;

    // This is wired to the Auxiliary Fault Status Register
    slave port<Value> auxfault;

    // Current execution priority
    master port<Value> currpri;

    // External debug request
    slave port<Signal> edbgrq;

    // Port allowing the number of instructions since startup to be read from the CPU.
    master port<InstructionCount> ticks;
}

