/*!
 * \file  PL390_GIC.lisa
 * \brief LISA Implementation of the PL390 GIC.
 * \date  Copyright 2008-2010 ARM Limited. All rights reserved.
 *
 */

component PL390_GIC
{
    properties 
    {
        version = "8.1.37";
        component_type = "Peripheral";
        description = "Generic Interrupt Controller (PL390)";
        documentation_file = "../Docs/DUI0423O_fast_model_rm.pdf";
    }
    
    includes
    {
        // #define FEW_CADI_REGISTER
        // #define ALL_CADI_REGISTER
        
        
        #include "components/PL390_GIC.h"
        
        #define PL390_GIC_TRACE if (!0) ; else printf

        #define initFieldParam(var, val) \
        { \
            var[0] = val##0; \
            var[1] = val##1; \
            var[2] = val##2; \
            var[3] = val##3; \
            var[4] = val##4; \
            var[5] = val##5; \
            var[6] = val##6; \
            var[7] = val##7; \
        }

    }
    
    composition
    {
        busslave_distributor : PVBusSlave(size = 0x1000);
        busslave_cpu         : PVBusSlave(size = 0x1000);
    }
    
    resources
    {
        PARAMETER { description("number of cpu interfaces"),                        type(int),  default(8),   min(1),  max(8)   } NUM_CPU;
        PARAMETER { description("number of software generated interrupts"),         type(int),  default(16),  min(0),  max(16)  } NUM_SGI;
        PARAMETER { description("number of peripheral interrupts"),                 type(int),  default(16),  min(0),  max(16)  } NUM_PPI;
        PARAMETER { description("number of shared peripheral interrupts"),          type(int),  default(988), min(0),  max(988) } NUM_SPI;
        PARAMETER { description("number of lockable shared peripheral interrupts"), type(int),  default(31),  min(0),  max(31)  } NUM_LSPI;

        PARAMETER { description("number of priority levels"),                       type(int),  default(256), min(16), max(256) } NUM_PRIORITY_LEVELS;

        PARAMETER { description("support trustzone"),                   type(bool), default(true)  } ENABLE_TRUSTZONE;
        PARAMETER { description("provide legacy fiq interrupt inputs"), type(bool), default(true)  } ENABLE_LEGACY_FIQ;
        PARAMETER { description("provide legacy irq interrupt inputs"), type(bool), default(true)  } ENABLE_LEGACY_IRQ;
        PARAMETER { description("ppi edge sensitive"),                  type(bool), default(false) } ENABLE_PPI_EDGE;

        PARAMETER { description("width of the distributor interface master id"),    type(int),  default(32),  min(0),  max(32)  } D_ID_WIDTH;
        PARAMETER { description("width of the cpu interface master id"),            type(int),  default(32),  min(0),  max(32)  } C_ID_WIDTH;

        PARAMETER { description("set interface type in peripheral identification register 8"), type(bool), default(true)              } AXI_IF;
        PARAMETER { description("set architecture version in periph_id register"),             type(int),  default(1), min(0), max(1) } ARCHITECTURE_VERSION;
      
        PARAMETER { description("initial value of register MATCH_D0"),  type(int),  default(0)          } INIT_MATCH_D0;
        PARAMETER { description("initial value of register MATCH_D1"),  type(int),  default(1)          } INIT_MATCH_D1;
        PARAMETER { description("initial value of register MATCH_D2"),  type(int),  default(2)          } INIT_MATCH_D2;
        PARAMETER { description("initial value of register MATCH_D3"),  type(int),  default(3)          } INIT_MATCH_D3;
        PARAMETER { description("initial value of register MATCH_D4"),  type(int),  default(4)          } INIT_MATCH_D4;
        PARAMETER { description("initial value of register MATCH_D5"),  type(int),  default(5)          } INIT_MATCH_D5;
        PARAMETER { description("initial value of register MATCH_D6"),  type(int),  default(6)          } INIT_MATCH_D6;
        PARAMETER { description("initial value of register MATCH_D7"),  type(int),  default(7)          } INIT_MATCH_D7;

        PARAMETER { description("initial value of register ENABLE_D0"), type(int),  default(0xffffffff) } INIT_ENABLE_D0;
        PARAMETER { description("initial value of register ENABLE_D1"), type(int),  default(0xffffffff) } INIT_ENABLE_D1;
        PARAMETER { description("initial value of register ENABLE_D2"), type(int),  default(0xffffffff) } INIT_ENABLE_D2;
        PARAMETER { description("initial value of register ENABLE_D3"), type(int),  default(0xffffffff) } INIT_ENABLE_D3;
        PARAMETER { description("initial value of register ENABLE_D4"), type(int),  default(0xffffffff) } INIT_ENABLE_D4;
        PARAMETER { description("initial value of register ENABLE_D5"), type(int),  default(0xffffffff) } INIT_ENABLE_D5;
        PARAMETER { description("initial value of register ENABLE_D6"), type(int),  default(0xffffffff) } INIT_ENABLE_D6;
        PARAMETER { description("initial value of register ENABLE_D7"), type(int),  default(0xffffffff) } INIT_ENABLE_D7;

        PARAMETER { description("initial value of register MATCH_C0"),  type(int),  default(0)          } INIT_MATCH_C0;
        PARAMETER { description("initial value of register MATCH_C1"),  type(int),  default(1)          } INIT_MATCH_C1;
        PARAMETER { description("initial value of register MATCH_C2"),  type(int),  default(2)          } INIT_MATCH_C2;
        PARAMETER { description("initial value of register MATCH_C3"),  type(int),  default(3)          } INIT_MATCH_C3;
        PARAMETER { description("initial value of register MATCH_C4"),  type(int),  default(4)          } INIT_MATCH_C4;
        PARAMETER { description("initial value of register MATCH_C5"),  type(int),  default(5)          } INIT_MATCH_C5;
        PARAMETER { description("initial value of register MATCH_C6"),  type(int),  default(6)          } INIT_MATCH_C6;
        PARAMETER { description("initial value of register MATCH_C7"),  type(int),  default(7)          } INIT_MATCH_C7;

        PARAMETER { description("initial value of register ENABLE_C0"), type(int),  default(0xffffffff) } INIT_ENABLE_C0;
        PARAMETER { description("initial value of register ENABLE_C1"), type(int),  default(0xffffffff) } INIT_ENABLE_C1;
        PARAMETER { description("initial value of register ENABLE_C2"), type(int),  default(0xffffffff) } INIT_ENABLE_C2;
        PARAMETER { description("initial value of register ENABLE_C3"), type(int),  default(0xffffffff) } INIT_ENABLE_C3;
        PARAMETER { description("initial value of register ENABLE_C4"), type(int),  default(0xffffffff) } INIT_ENABLE_C4;
        PARAMETER { description("initial value of register ENABLE_C5"), type(int),  default(0xffffffff) } INIT_ENABLE_C5;
        PARAMETER { description("initial value of register ENABLE_C6"), type(int),  default(0xffffffff) } INIT_ENABLE_C6;
        PARAMETER { description("initial value of register ENABLE_C7"), type(int),  default(0xffffffff) } INIT_ENABLE_C7;

#if defined(FEW_CADI_REGISTER) || defined(ALL_CADI_REGISTER)

        // Core Interface
        REGISTER { description("ICCICR [S]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC0000), name("control0"), groups("CPU 0") } CONTROL_0;
        REGISTER { description("ICCICR [S]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC1000), name("control1"), groups("CPU 1") } CONTROL_1;
        REGISTER { description("ICCICR [S]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC2000), name("control2"), groups("CPU 2") } CONTROL_2;
        REGISTER { description("ICCICR [S]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC3000), name("control3"), groups("CPU 3") } CONTROL_3;
        REGISTER { description("ICCICR [S]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC4000), name("control4"), groups("CPU 4") } CONTROL_4;
        REGISTER { description("ICCICR [S]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC5000), name("control5"), groups("CPU 5") } CONTROL_5;
        REGISTER { description("ICCICR [S]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC6000), name("control6"), groups("CPU 6") } CONTROL_6;
        REGISTER { description("ICCICR [S]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC7000), name("control7"), groups("CPU 7") } CONTROL_7;
        
        REGISTER { description("ICCIR [NS]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC0001), name("control0_ns"), groups("CPU 0") } CONTROL_NS_0;
        REGISTER { description("ICCIR [NS]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC1001), name("control1_ns"), groups("CPU 1") } CONTROL_NS_1;
        REGISTER { description("ICCIR [NS]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC2001), name("control2_ns"), groups("CPU 2") } CONTROL_NS_2;
        REGISTER { description("ICCIR [NS]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC3001), name("control3_ns"), groups("CPU 3") } CONTROL_NS_3;
        REGISTER { description("ICCIR [NS]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC4001), name("control4_ns"), groups("CPU 4") } CONTROL_NS_4;
        REGISTER { description("ICCIR [NS]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC5001), name("control5_ns"), groups("CPU 5") } CONTROL_NS_5;
        REGISTER { description("ICCIR [NS]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC6001), name("control6_ns"), groups("CPU 6") } CONTROL_NS_6;
        REGISTER { description("ICCIR [NS]: CPU Interface Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xC7001), name("control7_ns"), groups("CPU 7") } CONTROL_NS_7;
        
        REGISTER { description("ICCIPMR: Priority Mask Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0004), name("pri_msk_c0"), groups("CPU 0") } PRI_MSK_C0;
        REGISTER { description("ICCIPMR: Priority Mask Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1004), name("pri_msk_c1"), groups("CPU 1") } PRI_MSK_C1;
        REGISTER { description("ICCIPMR: Priority Mask Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2004), name("pri_msk_c2"), groups("CPU 2") } PRI_MSK_C2;
        REGISTER { description("ICCIPMR: Priority Mask Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3004), name("pri_msk_c3"), groups("CPU 3") } PRI_MSK_C3;
        REGISTER { description("ICCIPMR: Priority Mask Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4004), name("pri_msk_c4"), groups("CPU 4") } PRI_MSK_C4;
        REGISTER { description("ICCIPMR: Priority Mask Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5004), name("pri_msk_c5"), groups("CPU 5") } PRI_MSK_C5;
        REGISTER { description("ICCIPMR: Priority Mask Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6004), name("pri_msk_c6"), groups("CPU 6") } PRI_MSK_C6;
        REGISTER { description("ICCIPMR: Priority Mask Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7004), name("pri_msk_c7"), groups("CPU 7") } PRI_MSK_C7;
        
        REGISTER { description("ICCBPR [S]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0008), name("bp_c0"), groups("CPU 0") } BP_C0;
        REGISTER { description("ICCBPR [S]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1008), name("bp_c1"), groups("CPU 1") } BP_C1;
        REGISTER { description("ICCBPR [S]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2008), name("bp_c2"), groups("CPU 2") } BP_C2;
        REGISTER { description("ICCBPR [S]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3008), name("bp_c3"), groups("CPU 3") } BP_C3;
        REGISTER { description("ICCBPR [S]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4008), name("bp_c4"), groups("CPU 4") } BP_C4;
        REGISTER { description("ICCBPR [S]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5008), name("bp_c5"), groups("CPU 5") } BP_C5;
        REGISTER { description("ICCBPR [S]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6008), name("bp_c6"), groups("CPU 6") } BP_C6;
        REGISTER { description("ICCBPR [S]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7008), name("bp_c7"), groups("CPU 7") } BP_C7;
        
        REGISTER { description("ICCBPR [NS]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0009), name("nsbp_c0"), groups("CPU 0") } NSBP_C0;
        REGISTER { description("ICCBPR [NS]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1009), name("nsbp_c1"), groups("CPU 1") } NSBP_C1;
        REGISTER { description("ICCBPR [NS]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2009), name("nsbp_c2"), groups("CPU 2") } NSBP_C2;
        REGISTER { description("ICCBPR [NS]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3009), name("nsbp_c3"), groups("CPU 3") } NSBP_C3;
        REGISTER { description("ICCBPR [NS]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4009), name("nsbp_c4"), groups("CPU 4") } NSBP_C4;
        REGISTER { description("ICCBPR [NS]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5009), name("nsbp_c5"), groups("CPU 5") } NSBP_C5;
        REGISTER { description("ICCBPR [NS]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6009), name("nsbp_c6"), groups("CPU 6") } NSBP_C6;
        REGISTER { description("ICCBPR [NS]: Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7009), name("nsbp_c7"), groups("CPU 7") } NSBP_C7;
        
        REGISTER { description("ICCIAR: Interrupt Acknowledge Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC000C), name("int_ack0"), groups("CPU 0") } INT_ACK_0;
        REGISTER { description("ICCIAR: Interrupt Acknowledge Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC100C), name("int_ack1"), groups("CPU 1") } INT_ACK_1;
        REGISTER { description("ICCIAR: Interrupt Acknowledge Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC200C), name("int_ack2"), groups("CPU 2") } INT_ACK_2;
        REGISTER { description("ICCIAR: Interrupt Acknowledge Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC300C), name("int_ack3"), groups("CPU 3") } INT_ACK_3;
        REGISTER { description("ICCIAR: Interrupt Acknowledge Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC400C), name("int_ack4"), groups("CPU 4") } INT_ACK_4;
        REGISTER { description("ICCIAR: Interrupt Acknowledge Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC500C), name("int_ack5"), groups("CPU 5") } INT_ACK_5;
        REGISTER { description("ICCIAR: Interrupt Acknowledge Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC600C), name("int_ack6"), groups("CPU 6") } INT_ACK_6;
        REGISTER { description("ICCIAR: Interrupt Acknowledge Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC700C), name("int_ack7"), groups("CPU 7") } INT_ACK_7;
        
        REGISTER { description("ICCEOIR: End of Interrupt Register (WO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0010), name("eoi0"), groups("CPU 0") } EOI_0;
        REGISTER { description("ICCEOIR: End of Interrupt Register (WO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1010), name("eoi1"), groups("CPU 1") } EOI_1;
        REGISTER { description("ICCEOIR: End of Interrupt Register (WO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2010), name("eoi2"), groups("CPU 2") } EOI_2;
        REGISTER { description("ICCEOIR: End of Interrupt Register (WO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3010), name("eoi3"), groups("CPU 3") } EOI_3;
        REGISTER { description("ICCEOIR: End of Interrupt Register (WO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4010), name("eoi4"), groups("CPU 4") } EOI_4;
        REGISTER { description("ICCEOIR: End of Interrupt Register (WO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5010), name("eoi5"), groups("CPU 5") } EOI_5;
        REGISTER { description("ICCEOIR: End of Interrupt Register (WO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6010), name("eoi6"), groups("CPU 6") } EOI_6;
        REGISTER { description("ICCEOIR: End of Interrupt Register (WO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7010), name("eoi7"), groups("CPU 7") } EOI_7;
        
        REGISTER { description("ICCRPR: Running Priority Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0014), name("run_priority0"), groups("CPU 0") } RUN_PRIORITY_0;
        REGISTER { description("ICCRPR: Running Priority Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1014), name("run_priority1"), groups("CPU 1") } RUN_PRIORITY_1;
        REGISTER { description("ICCRPR: Running Priority Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2014), name("run_priority2"), groups("CPU 2") } RUN_PRIORITY_2;
        REGISTER { description("ICCRPR: Running Priority Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3014), name("run_priority3"), groups("CPU 3") } RUN_PRIORITY_3;
        REGISTER { description("ICCRPR: Running Priority Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4014), name("run_priority4"), groups("CPU 4") } RUN_PRIORITY_4;
        REGISTER { description("ICCRPR: Running Priority Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5014), name("run_priority5"), groups("CPU 5") } RUN_PRIORITY_5;
        REGISTER { description("ICCRPR: Running Priority Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6014), name("run_priority6"), groups("CPU 6") } RUN_PRIORITY_6;
        REGISTER { description("ICCRPR: Running Priority Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7014), name("run_priority7"), groups("CPU 7") } RUN_PRIORITY_7;
        
        REGISTER { description("ICCHPIR: Highest Pending Interrupt Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0018), name("hi_pend0"), groups("CPU 0") } HI_PEND_0;
        REGISTER { description("ICCHPIR: Highest Pending Interrupt Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1018), name("hi_pend1"), groups("CPU 1") } HI_PEND_1;
        REGISTER { description("ICCHPIR: Highest Pending Interrupt Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2018), name("hi_pend2"), groups("CPU 2") } HI_PEND_2;
        REGISTER { description("ICCHPIR: Highest Pending Interrupt Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3018), name("hi_pend3"), groups("CPU 3") } HI_PEND_3;
        REGISTER { description("ICCHPIR: Highest Pending Interrupt Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4018), name("hi_pend4"), groups("CPU 4") } HI_PEND_4;
        REGISTER { description("ICCHPIR: Highest Pending Interrupt Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5018), name("hi_pend5"), groups("CPU 5") } HI_PEND_5;
        REGISTER { description("ICCHPIR: Highest Pending Interrupt Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6018), name("hi_pend6"), groups("CPU 6") } HI_PEND_6;
        REGISTER { description("ICCHPIR: Highest Pending Interrupt Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7018), name("hi_pend7"), groups("CPU 7") } HI_PEND_7;
        
        REGISTER { description("ICCABPR: Aliased Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC001C), name("alias_nsbp_c0"), groups("CPU 0") } ALIAS_NSBP_0;
        REGISTER { description("ICCABPR: Aliased Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC101C), name("alias_nsbp_c1"), groups("CPU 1") } ALIAS_NSBP_1;
        REGISTER { description("ICCABPR: Aliased Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC201C), name("alias_nsbp_c2"), groups("CPU 2") } ALIAS_NSBP_2;
        REGISTER { description("ICCABPR: Aliased Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC301C), name("alias_nsbp_c3"), groups("CPU 3") } ALIAS_NSBP_3;
        REGISTER { description("ICCABPR: Aliased Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC401C), name("alias_nsbp_c4"), groups("CPU 4") } ALIAS_NSBP_4;
        REGISTER { description("ICCABPR: Aliased Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC501C), name("alias_nsbp_c5"), groups("CPU 5") } ALIAS_NSBP_5;
        REGISTER { description("ICCABPR: Aliased Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC601C), name("alias_nsbp_c6"), groups("CPU 6") } ALIAS_NSBP_6;
        REGISTER { description("ICCABPR: Aliased Binary Point Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC701C), name("alias_nsbp_c7"), groups("CPU 7") } ALIAS_NSBP_7;

        REGISTER { description("Integration Test Enable Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0040), name("integ_en_c0"), groups("CPU 0") } INTEG_EN_C0;
        REGISTER { description("Integration Test Enable Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1040), name("integ_en_c1"), groups("CPU 1") } INTEG_EN_C1;
        REGISTER { description("Integration Test Enable Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2040), name("integ_en_c2"), groups("CPU 2") } INTEG_EN_C2;
        REGISTER { description("Integration Test Enable Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3040), name("integ_en_c3"), groups("CPU 3") } INTEG_EN_C3;
        REGISTER { description("Integration Test Enable Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4040), name("integ_en_c4"), groups("CPU 4") } INTEG_EN_C4;
        REGISTER { description("Integration Test Enable Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5040), name("integ_en_c5"), groups("CPU 5") } INTEG_EN_C5;
        REGISTER { description("Integration Test Enable Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6040), name("integ_en_c6"), groups("CPU 6") } INTEG_EN_C6;
        REGISTER { description("Integration Test Enable Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7040), name("integ_en_c7"), groups("CPU 7") } INTEG_EN_C7;
        
        REGISTER { description("Interrupt Out Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0044), name("interrupt_out0"), groups("CPU 0") } INTERRUPT_OUT_0;
        REGISTER { description("Interrupt Out Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1044), name("interrupt_out1"), groups("CPU 1") } INTERRUPT_OUT_1;
        REGISTER { description("Interrupt Out Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2044), name("interrupt_out2"), groups("CPU 2") } INTERRUPT_OUT_2;
        REGISTER { description("Interrupt Out Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3044), name("interrupt_out3"), groups("CPU 3") } INTERRUPT_OUT_3;
        REGISTER { description("Interrupt Out Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4044), name("interrupt_out4"), groups("CPU 4") } INTERRUPT_OUT_4;
        REGISTER { description("Interrupt Out Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5044), name("interrupt_out5"), groups("CPU 5") } INTERRUPT_OUT_5;
        REGISTER { description("Interrupt Out Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6044), name("interrupt_out6"), groups("CPU 6") } INTERRUPT_OUT_6;
        REGISTER { description("Interrupt Out Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7044), name("interrupt_out7"), groups("CPU 7") } INTERRUPT_OUT_7;

        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0050), name("match_c0"), groups("CPU 0") } MATCH_C0;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1050), name("match_c1"), groups("CPU 1") } MATCH_C1;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2050), name("match_c2"), groups("CPU 2") } MATCH_C2;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3050), name("match_c3"), groups("CPU 3") } MATCH_C3;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4050), name("match_c4"), groups("CPU 4") } MATCH_C4;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5050), name("match_c5"), groups("CPU 5") } MATCH_C5;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6050), name("match_c6"), groups("CPU 6") } MATCH_C6;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7050), name("match_c7"), groups("CPU 7") } MATCH_C7;
        
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0054), name("enable_c0"), groups("CPU 0") } ENABLE_C0;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC1054), name("enable_c1"), groups("CPU 1") } ENABLE_C1;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC2054), name("enable_c2"), groups("CPU 2") } ENABLE_C2;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC3054), name("enable_c3"), groups("CPU 3") } ENABLE_C3;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC4054), name("enable_c4"), groups("CPU 4") } ENABLE_C4;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC5054), name("enable_c5"), groups("CPU 5") } ENABLE_C5;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC6054), name("enable_c6"), groups("CPU 6") } ENABLE_C6;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC7054), name("enable_c7"), groups("CPU 7") } ENABLE_C7;

        REGISTER { description("ICCIIR: CPU Interface Implementor Identification (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC00FC), name("cpu_if_ident"), groups("CPU 0", "CPU 1", "CPU 2", "CPU 3", "CPU 4", "CPU 5", "CPU 6", "CPU 7") } CPU_IF_IDENT;

        REGISTER { description("Peripheral Identification Register 8 (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0FC0), name("periph_id_c_8"), bitwidth(8), groups("CPU 0", "CPU 1", "CPU 2", "CPU 3", "CPU 4", "CPU 5", "CPU 6", "CPU 7") } PERIPH_ID_C8;
        REGISTER { description("Peripheral Identification Register [7:4] (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0FD0), name("periph_id_c_4-7"), groups("CPU 0", "CPU 1", "CPU 2", "CPU 3", "CPU 4", "CPU 5", "CPU 6", "CPU 7") } PERIPH_ID_C4_7;
        REGISTER { description("Peripheral Identification Register [3:0] (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0FE0), name("periph_id_c_0-3"), groups("CPU 0", "CPU 1", "CPU 2", "CPU 3", "CPU 4", "CPU 5", "CPU 6", "CPU 7") } PERIPH_ID_C0_3;

        REGISTER { description("PrimeCell Identification Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xC0FF0), name("component_id_c"), groups("CPU 0", "CPU 1", "CPU 2", "CPU 3", "CPU 4", "CPU 5", "CPU 6", "CPU 7") } COMPONENT_ID_C;
        
        
        // Distributor
        REGISTER { description("ICDICR [S]: Interrupt Control Register (RW)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0000), name("enable"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7") } ENABLE;
        REGISTER { description("ICDICR [NS]: Interrupt Control Register (RW)"), read_function(debug_read), write_function(debug_write),  reg_number(0xD0001), name("enable_ns"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7") } ENABLE_NS;
        REGISTER { description("ICDICTR: Interrupt Controller Type Register (RO)"), read_function(debug_read), write_function(debug_write),  reg_number(0xD0004), name("ic_type"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7") } IC_TYPE;
        REGISTER { description("ICDDIIR: Distributor Implementer Identification Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0008), name("dist_ident"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7") } DIST_IDENT;
        
        REGISTER { description("ICDISR: SGI Interrupt Security Register (RW))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0080), name("sgi_security_if0"), bitwidth(16), groups("Distributor 0") } SGI_SECURITY_0;
        REGISTER { description("ICDISR: SGI Interrupt Security Register (RW))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1080), name("sgi_security_if1"), bitwidth(16), groups("Distributor 1") } SGI_SECURITY_1;
        REGISTER { description("ICDISR: SGI Interrupt Security Register (RW))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2080), name("sgi_security_if2"), bitwidth(16), groups("Distributor 2") } SGI_SECURITY_2;
        REGISTER { description("ICDISR: SGI Interrupt Security Register (RW))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3080), name("sgi_security_if3"), bitwidth(16), groups("Distributor 3") } SGI_SECURITY_3;
        REGISTER { description("ICDISR: SGI Interrupt Security Register (RW))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4080), name("sgi_security_if4"), bitwidth(16), groups("Distributor 4") } SGI_SECURITY_4;
        REGISTER { description("ICDISR: SGI Interrupt Security Register (RW))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5080), name("sgi_security_if5"), bitwidth(16), groups("Distributor 5") } SGI_SECURITY_5;
        REGISTER { description("ICDISR: SGI Interrupt Security Register (RW))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6080), name("sgi_security_if6"), bitwidth(16), groups("Distributor 6") } SGI_SECURITY_6;
        REGISTER { description("ICDISR: SGI Interrupt Security Register (RW))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7080), name("sgi_security_if7"), bitwidth(16), groups("Distributor 7") } SGI_SECURITY_7;
        
        REGISTER { description("ICDISR: PPI Interrupt Security Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0082), name("ppi_security_if0"), bitwidth(16), groups("Distributor 0") } PPI_SECURITY_0;
        REGISTER { description("ICDISR: PPI Interrupt Security Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1082), name("ppi_security_if1"), bitwidth(16), groups("Distributor 1") } PPI_SECURITY_1;
        REGISTER { description("ICDISR: PPI Interrupt Security Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2082), name("ppi_security_if2"), bitwidth(16), groups("Distributor 2") } PPI_SECURITY_2;
        REGISTER { description("ICDISR: PPI Interrupt Security Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3082), name("ppi_security_if3"), bitwidth(16), groups("Distributor 3") } PPI_SECURITY_3;
        REGISTER { description("ICDISR: PPI Interrupt Security Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4082), name("ppi_security_if4"), bitwidth(16), groups("Distributor 4") } PPI_SECURITY_4;
        REGISTER { description("ICDISR: PPI Interrupt Security Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5082), name("ppi_security_if5"), bitwidth(16), groups("Distributor 5") } PPI_SECURITY_5;
        REGISTER { description("ICDISR: PPI Interrupt Security Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6082), name("ppi_security_if6"), bitwidth(16), groups("Distributor 6") } PPI_SECURITY_6;
        REGISTER { description("ICDISR: PPI Interrupt Security Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7082), name("ppi_security_if7"), bitwidth(16), groups("Distributor 7") } PPI_SECURITY_7;
        
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 32-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD0084), name("spi_security_0-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_0;
        
#ifdef ALL_CADI_REGISTER
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 64-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD0088), name("spi_security_32-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_1;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 96-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD008C), name("spi_security_64-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_2;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 128-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD0090), name("spi_security_96-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_3;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 160-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD0094), name("spi_security_128-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_4;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 192-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD0098), name("spi_security_160-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_5;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 224-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD009C), name("spi_security_192-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_6;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 256-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD00A0), name("spi_security_224-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_7;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 288-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD00A4), name("spi_security_256-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_8;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 320-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD00A8), name("spi_security_288-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_9;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 352-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD00AC), name("spi_security_320-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_10;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 384-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD00B0), name("spi_security_352-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_11;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 416-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD00B4), name("spi_security_384-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_12;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 448-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD00B8), name("spi_security_416-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_13;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 480-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD00BC), name("spi_security_448-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_14;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 512-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD00C0), name("spi_security_480-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_15;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 544-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD00C4), name("spi_security_512-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_16;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 576-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD00C8), name("spi_security_544-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_17;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 608-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD00CC), name("spi_security_576-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_18;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 640-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD00D0), name("spi_security_608-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_19;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 672-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD00D4), name("spi_security_640-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_20;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 704-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD00D8), name("spi_security_672-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_21;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 736-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD00DC), name("spi_security_704-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_22;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 768-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD00E0), name("spi_security_736-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_23;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 800-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD00E4), name("spi_security_768-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_24;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 832-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD00E8), name("spi_security_800-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_25;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 864-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD00EC), name("spi_security_832-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_26;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 896-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD00F0), name("spi_security_864-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_27;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 928-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD00F4), name("spi_security_896-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_28;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 960-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD00F8), name("spi_security_928-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_29;
        REGISTER { description("ICDISR: SPI Interrupt Security Register (RW))\n(Interrupt ID 992-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD00FC), name("spi_security_960-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_SECURITY_30;
#endif

        REGISTER { description("ICDISER: SGI Enable Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0100), name("sgi_enable_set_if0"), bitwidth(16), groups("Distributor 0") } SGI_ENABLE_SET_0;
        REGISTER { description("ICDISER: SGI Enable Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1100), name("sgi_enable_set_if1"), bitwidth(16), groups("Distributor 1") } SGI_ENABLE_SET_1;
        REGISTER { description("ICDISER: SGI Enable Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2100), name("sgi_enable_set_if2"), bitwidth(16), groups("Distributor 2") } SGI_ENABLE_SET_2;
        REGISTER { description("ICDISER: SGI Enable Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3100), name("sgi_enable_set_if3"), bitwidth(16), groups("Distributor 3") } SGI_ENABLE_SET_3;
        REGISTER { description("ICDISER: SGI Enable Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4100), name("sgi_enable_set_if4"), bitwidth(16), groups("Distributor 4") } SGI_ENABLE_SET_4;
        REGISTER { description("ICDISER: SGI Enable Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5100), name("sgi_enable_set_if5"), bitwidth(16), groups("Distributor 5") } SGI_ENABLE_SET_5;
        REGISTER { description("ICDISER: SGI Enable Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6100), name("sgi_enable_set_if6"), bitwidth(16), groups("Distributor 6") } SGI_ENABLE_SET_6;
        REGISTER { description("ICDISER: SGI Enable Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7100), name("sgi_enable_set_if7"), bitwidth(16), groups("Distributor 7") } SGI_ENABLE_SET_7;
        
        REGISTER { description("ICDISER: PPI Enable Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0102), name("ppi_enable_set_if0"), bitwidth(16), groups("Distributor 0") } PPI_ENABLE_SET_0;
        REGISTER { description("ICDISER: PPI Enable Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1102), name("ppi_enable_set_if1"), bitwidth(16), groups("Distributor 1") } PPI_ENABLE_SET_1;
        REGISTER { description("ICDISER: PPI Enable Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2102), name("ppi_enable_set_if2"), bitwidth(16), groups("Distributor 2") } PPI_ENABLE_SET_2;
        REGISTER { description("ICDISER: PPI Enable Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3102), name("ppi_enable_set_if3"), bitwidth(16), groups("Distributor 3") } PPI_ENABLE_SET_3;
        REGISTER { description("ICDISER: PPI Enable Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4102), name("ppi_enable_set_if4"), bitwidth(16), groups("Distributor 4") } PPI_ENABLE_SET_4;
        REGISTER { description("ICDISER: PPI Enable Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5102), name("ppi_enable_set_if5"), bitwidth(16), groups("Distributor 5") } PPI_ENABLE_SET_5;
        REGISTER { description("ICDISER: PPI Enable Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6102), name("ppi_enable_set_if6"), bitwidth(16), groups("Distributor 6") } PPI_ENABLE_SET_6;
        REGISTER { description("ICDISER: PPI Enable Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7102), name("ppi_enable_set_if7"), bitwidth(16), groups("Distributor 7") } PPI_ENABLE_SET_7;

        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 32-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD0104), name("spi_enable_set_0-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_0;
#ifdef ALL_CADI_REGISTER
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 64-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD0108), name("spi_enable_set_32-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_1;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 96-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD010C), name("spi_enable_set_64-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_2;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 128-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD0110), name("spi_enable_set_96-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_3;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 160-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD0114), name("spi_enable_set_128-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_4;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 192-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD0118), name("spi_enable_set_160-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_5;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 224-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD011C), name("spi_enable_set_192-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_6;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 256-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD0120), name("spi_enable_set_224-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_7;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 288-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD0124), name("spi_enable_set_256-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_8;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 320-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD0128), name("spi_enable_set_288-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_9;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 352-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD012C), name("spi_enable_set_320-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_10;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 384-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD0130), name("spi_enable_set_352-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_11;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 416-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD0134), name("spi_enable_set_384-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_12;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 448-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD0138), name("spi_enable_set_416-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_13;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 480-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD013C), name("spi_enable_set_448-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_14;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 512-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD0140), name("spi_enable_set_480-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_15;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 544-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD0144), name("spi_enable_set_512-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_16;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 576-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD0148), name("spi_enable_set_544-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_17;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 608-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD014C), name("spi_enable_set_576-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_18;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 640-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD0150), name("spi_enable_set_608-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_19;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 672-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD0154), name("spi_enable_set_640-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_20;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 704-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD0158), name("spi_enable_set_672-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_21;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 736-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD015C), name("spi_enable_set_704-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_22;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 768-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD0160), name("spi_enable_set_736-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_23;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 800-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD0164), name("spi_enable_set_768-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_24;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 832-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD0168), name("spi_enable_set_800-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_25;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 864-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD016C), name("spi_enable_set_832-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_26;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 896-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD0170), name("spi_enable_set_864-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_27;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 928-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD0174), name("spi_enable_set_896-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_28;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 960-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD0178), name("spi_enable_set_928-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_29;
        REGISTER { description("ICDISER: SPI Enable Set Register (RW))\n(Interrupt ID 992-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD017C), name("spi_enable_set_960-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_SET_30;
#endif
        REGISTER { description("ICDICER: SGI Enable Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0180), name("sgi_enable_clear_if0"), bitwidth(16), groups("Distributor 0") } SGI_ENABLE_CLEAR_0;
        REGISTER { description("ICDICER: SGI Enable Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1180), name("sgi_enable_clear_if1"), bitwidth(16), groups("Distributor 1") } SGI_ENABLE_CLEAR_1;
        REGISTER { description("ICDICER: SGI Enable Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2180), name("sgi_enable_clear_if2"), bitwidth(16), groups("Distributor 2") } SGI_ENABLE_CLEAR_2;
        REGISTER { description("ICDICER: SGI Enable Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3180), name("sgi_enable_clear_if3"), bitwidth(16), groups("Distributor 3") } SGI_ENABLE_CLEAR_3;
        REGISTER { description("ICDICER: SGI Enable Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4180), name("sgi_enable_clear_if4"), bitwidth(16), groups("Distributor 4") } SGI_ENABLE_CLEAR_4;
        REGISTER { description("ICDICER: SGI Enable Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5180), name("sgi_enable_clear_if5"), bitwidth(16), groups("Distributor 5") } SGI_ENABLE_CLEAR_5;
        REGISTER { description("ICDICER: SGI Enable Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6180), name("sgi_enable_clear_if6"), bitwidth(16), groups("Distributor 6") } SGI_ENABLE_CLEAR_6;
        REGISTER { description("ICDICER: SGI Enable Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7180), name("sgi_enable_clear_if7"), bitwidth(16), groups("Distributor 7") } SGI_ENABLE_CLEAR_7;
        
        REGISTER { description("ICDICER: PPI Enable Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0182), name("ppi_enable_clear_if0"), bitwidth(16), groups("Distributor 0") } PPI_ENABLE_CLEAR_0;
        REGISTER { description("ICDICER: PPI Enable Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1182), name("ppi_enable_clear_if1"), bitwidth(16), groups("Distributor 1") } PPI_ENABLE_CLEAR_1;
        REGISTER { description("ICDICER: PPI Enable Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2182), name("ppi_enable_clear_if2"), bitwidth(16), groups("Distributor 2") } PPI_ENABLE_CLEAR_2;
        REGISTER { description("ICDICER: PPI Enable Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3182), name("ppi_enable_clear_if3"), bitwidth(16), groups("Distributor 3") } PPI_ENABLE_CLEAR_3;
        REGISTER { description("ICDICER: PPI Enable Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4182), name("ppi_enable_clear_if4"), bitwidth(16), groups("Distributor 4") } PPI_ENABLE_CLEAR_4;
        REGISTER { description("ICDICER: PPI Enable Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5182), name("ppi_enable_clear_if5"), bitwidth(16), groups("Distributor 5") } PPI_ENABLE_CLEAR_5;
        REGISTER { description("ICDICER: PPI Enable Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6182), name("ppi_enable_clear_if6"), bitwidth(16), groups("Distributor 6") } PPI_ENABLE_CLEAR_6;
        REGISTER { description("ICDICER: PPI Enable Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7182), name("ppi_enable_clear_if7"), bitwidth(16), groups("Distributor 7") } PPI_ENABLE_CLEAR_7;
        
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 32-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD0184), name("spi_enable_clear_0-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_0;
#ifdef ALL_CADI_REGISTER
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 64-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD0188), name("spi_enable_clear_32-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_1;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 96-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD018C), name("spi_enable_clear_64-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_2;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 128-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD0190), name("spi_enable_clear_96-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_3;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 160-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD0194), name("spi_enable_clear_128-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_4;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 192-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD0198), name("spi_enable_clear_160-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_5;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 224-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD019C), name("spi_enable_clear_192-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_6;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 256-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD01A0), name("spi_enable_clear_224-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_7;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 288-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD01A4), name("spi_enable_clear_256-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_8;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 320-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD01A8), name("spi_enable_clear_288-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_9;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 352-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD01AC), name("spi_enable_clear_320-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_10;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 384-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD01B0), name("spi_enable_clear_352-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_11;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 416-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD01B4), name("spi_enable_clear_384-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_12;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 448-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD01B8), name("spi_enable_clear_416-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_13;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 480-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD01BC), name("spi_enable_clear_448-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_14;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 512-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD01C0), name("spi_enable_clear_480-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_15;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 544-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD01C4), name("spi_enable_clear_512-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_16;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 576-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD01C8), name("spi_enable_clear_544-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_17;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 608-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD01CC), name("spi_enable_clear_576-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_18;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 640-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD01D0), name("spi_enable_clear_608-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_19;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 672-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD01D4), name("spi_enable_clear_640-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_20;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 704-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD01D8), name("spi_enable_clear_672-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_21;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 736-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD01DC), name("spi_enable_clear_704-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_22;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 768-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD01E0), name("spi_enable_clear_736-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_23;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 800-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD01E4), name("spi_enable_clear_768-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_24;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 832-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD01E8), name("spi_enable_clear_800-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_25;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 864-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD01EC), name("spi_enable_clear_832-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_26;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 896-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD01F0), name("spi_enable_clear_864-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_27;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 928-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD01F4), name("spi_enable_clear_896-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_28;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 960-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD01F8), name("spi_enable_clear_928-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_29;
        REGISTER { description("ICDICER: SPI Enable Clear Register (RW))\n(Interrupt ID 992-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD01FC), name("spi_enable_clear_960-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ENABLE_CLEAR_30;
#endif
        REGISTER { description("ICDISPR: SGI Pending Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0200), name("sgi_pending_set_if0"), bitwidth(16), groups("Distributor 0") } SGI_PENDING_SET_0;
        REGISTER { description("ICDISPR: SGI Pending Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1200), name("sgi_pending_set_if1"), bitwidth(16), groups("Distributor 1") } SGI_PENDING_SET_1;
        REGISTER { description("ICDISPR: SGI Pending Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2200), name("sgi_pending_set_if2"), bitwidth(16), groups("Distributor 2") } SGI_PENDING_SET_2;
        REGISTER { description("ICDISPR: SGI Pending Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3200), name("sgi_pending_set_if3"), bitwidth(16), groups("Distributor 3") } SGI_PENDING_SET_3;
        REGISTER { description("ICDISPR: SGI Pending Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4200), name("sgi_pending_set_if4"), bitwidth(16), groups("Distributor 4") } SGI_PENDING_SET_4;
        REGISTER { description("ICDISPR: SGI Pending Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5200), name("sgi_pending_set_if5"), bitwidth(16), groups("Distributor 5") } SGI_PENDING_SET_5;
        REGISTER { description("ICDISPR: SGI Pending Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6200), name("sgi_pending_set_if6"), bitwidth(16), groups("Distributor 6") } SGI_PENDING_SET_6;
        REGISTER { description("ICDISPR: SGI Pending Set Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7200), name("sgi_pending_set_if7"), bitwidth(16), groups("Distributor 7") } SGI_PENDING_SET_7;
        
        REGISTER { description("ICDISPR: PPI Pending Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0202), name("ppi_pending_set_if0"), bitwidth(16), groups("Distributor 0") } PPI_PENDING_SET_0;
        REGISTER { description("ICDISPR: PPI Pending Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1202), name("ppi_pending_set_if1"), bitwidth(16), groups("Distributor 1") } PPI_PENDING_SET_1;
        REGISTER { description("ICDISPR: PPI Pending Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2202), name("ppi_pending_set_if2"), bitwidth(16), groups("Distributor 2") } PPI_PENDING_SET_2;
        REGISTER { description("ICDISPR: PPI Pending Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3202), name("ppi_pending_set_if3"), bitwidth(16), groups("Distributor 3") } PPI_PENDING_SET_3;
        REGISTER { description("ICDISPR: PPI Pending Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4202), name("ppi_pending_set_if4"), bitwidth(16), groups("Distributor 4") } PPI_PENDING_SET_4;
        REGISTER { description("ICDISPR: PPI Pending Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5202), name("ppi_pending_set_if5"), bitwidth(16), groups("Distributor 5") } PPI_PENDING_SET_5;
        REGISTER { description("ICDISPR: PPI Pending Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6202), name("ppi_pending_set_if6"), bitwidth(16), groups("Distributor 6") } PPI_PENDING_SET_6;
        REGISTER { description("ICDISPR: PPI Pending Set Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7202), name("ppi_pending_set_if7"), bitwidth(16), groups("Distributor 7") } PPI_PENDING_SET_7;

        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 32-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD0204), name("spi_pending_set_0-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_0;
#ifdef ALL_CADI_REGISTER
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 64-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD0208), name("spi_pending_set_32-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_1;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 96-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD020C), name("spi_pending_set_64-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_2;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 128-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD0210), name("spi_pending_set_96-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_3;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 160-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD0214), name("spi_pending_set_128-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_4;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 192-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD0218), name("spi_pending_set_160-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_5;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 224-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD021C), name("spi_pending_set_192-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_6;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 256-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD0220), name("spi_pending_set_224-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_7;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 288-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD0224), name("spi_pending_set_256-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_8;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 320-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD0228), name("spi_pending_set_288-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_9;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 352-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD022C), name("spi_pending_set_320-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_10;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 384-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD0230), name("spi_pending_set_352-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_11;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 416-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD0234), name("spi_pending_set_384-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_12;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 448-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD0238), name("spi_pending_set_416-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_13;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 480-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD023C), name("spi_pending_set_448-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_14;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 512-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD0240), name("spi_pending_set_480-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_15;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 544-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD0244), name("spi_pending_set_512-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_16;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 576-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD0248), name("spi_pending_set_544-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_17;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 608-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD024C), name("spi_pending_set_576-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_18;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 640-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD0250), name("spi_pending_set_608-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_19;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 672-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD0254), name("spi_pending_set_640-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_20;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 704-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD0258), name("spi_pending_set_672-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_21;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 736-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD025C), name("spi_pending_set_704-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_22;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 768-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD0260), name("spi_pending_set_736-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_23;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 800-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD0264), name("spi_pending_set_768-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_24;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 832-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD0268), name("spi_pending_set_800-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_25;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 864-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD026C), name("spi_pending_set_832-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_26;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 896-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD0270), name("spi_pending_set_864-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_27;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 928-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD0274), name("spi_pending_set_896-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_28;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 960-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD0278), name("spi_pending_set_928-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_29;
        REGISTER { description("ICDISPR: SPI Pending Set Register (RW))\n(Interrupt ID 992-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD027C), name("spi_pending_set_960-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_SET_30;
#endif
        
        REGISTER { description("ICDICPR: SGI Pending Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0280), name("sgi_pending_clear_if0"), bitwidth(16), groups("Distributor 0") } SGI_PENDING_CLEAR_0;
        REGISTER { description("ICDICPR: SGI Pending Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1280), name("sgi_pending_clear_if1"), bitwidth(16), groups("Distributor 1") } SGI_PENDING_CLEAR_1;
        REGISTER { description("ICDICPR: SGI Pending Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2280), name("sgi_pending_clear_if2"), bitwidth(16), groups("Distributor 2") } SGI_PENDING_CLEAR_2;
        REGISTER { description("ICDICPR: SGI Pending Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3280), name("sgi_pending_clear_if3"), bitwidth(16), groups("Distributor 3") } SGI_PENDING_CLEAR_3;
        REGISTER { description("ICDICPR: SGI Pending Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4280), name("sgi_pending_clear_if4"), bitwidth(16), groups("Distributor 4") } SGI_PENDING_CLEAR_4;
        REGISTER { description("ICDICPR: SGI Pending Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5280), name("sgi_pending_clear_if5"), bitwidth(16), groups("Distributor 5") } SGI_PENDING_CLEAR_5;
        REGISTER { description("ICDICPR: SGI Pending Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6280), name("sgi_pending_clear_if6"), bitwidth(16), groups("Distributor 6") } SGI_PENDING_CLEAR_6;
        REGISTER { description("ICDICPR: SGI Pending Clear Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7280), name("sgi_pending_clear_if7"), bitwidth(16), groups("Distributor 7") } SGI_PENDING_CLEAR_7;
        
        REGISTER { description("ICDICPR: PPI Pending Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0282), name("ppi_pending_clear_if0"), bitwidth(16), groups("Distributor 0") } PPI_PENDING_CLEAR_0;
        REGISTER { description("ICDICPR: PPI Pending Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1282), name("ppi_pending_clear_if1"), bitwidth(16), groups("Distributor 1") } PPI_PENDING_CLEAR_1;
        REGISTER { description("ICDICPR: PPI Pending Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2282), name("ppi_pending_clear_if2"), bitwidth(16), groups("Distributor 2") } PPI_PENDING_CLEAR_2;
        REGISTER { description("ICDICPR: PPI Pending Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3282), name("ppi_pending_clear_if3"), bitwidth(16), groups("Distributor 3") } PPI_PENDING_CLEAR_3;
        REGISTER { description("ICDICPR: PPI Pending Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4282), name("ppi_pending_clear_if4"), bitwidth(16), groups("Distributor 4") } PPI_PENDING_CLEAR_4;
        REGISTER { description("ICDICPR: PPI Pending Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5282), name("ppi_pending_clear_if5"), bitwidth(16), groups("Distributor 5") } PPI_PENDING_CLEAR_5;
        REGISTER { description("ICDICPR: PPI Pending Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6282), name("ppi_pending_clear_if6"), bitwidth(16), groups("Distributor 6") } PPI_PENDING_CLEAR_6;
        REGISTER { description("ICDICPR: PPI Pending Clear Register (RW))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7282), name("ppi_pending_clear_if7"), bitwidth(16), groups("Distributor 7") } PPI_PENDING_CLEAR_7;

        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 32-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD0284), name("spi_pending_clear_0-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_0;
#ifdef ALL_CADI_REGISTER
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 64-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD0288), name("spi_pending_clear_32-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_1;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 96-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD028C), name("spi_pending_clear_64-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_2;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 128-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD0290), name("spi_pending_clear_96-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_3;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 160-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD0294), name("spi_pending_clear_128-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_4;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 192-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD0298), name("spi_pending_clear_160-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_5;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 224-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD029C), name("spi_pending_clear_192-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_6;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 256-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD02A0), name("spi_pending_clear_224-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_7;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 288-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD02A4), name("spi_pending_clear_256-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_8;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 320-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD02A8), name("spi_pending_clear_288-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_9;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 352-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD02AC), name("spi_pending_clear_320-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_10;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 384-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD02B0), name("spi_pending_clear_352-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_11;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 416-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD02B4), name("spi_pending_clear_384-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_12;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 448-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD02B8), name("spi_pending_clear_416-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_13;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 480-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD02BC), name("spi_pending_clear_448-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_14;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 512-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD02C0), name("spi_pending_clear_480-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_15;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 544-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD02C4), name("spi_pending_clear_512-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_16;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 576-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD02C8), name("spi_pending_clear_544-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_17;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 608-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD02CC), name("spi_pending_clear_576-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_18;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 640-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD02D0), name("spi_pending_clear_608-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_19;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 672-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD02D4), name("spi_pending_clear_640-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_20;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 704-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD02D8), name("spi_pending_clear_672-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_21;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 736-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD02DC), name("spi_pending_clear_704-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_22;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 768-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD02E0), name("spi_pending_clear_736-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_23;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 800-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD02E4), name("spi_pending_clear_768-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_24;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 832-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD02E8), name("spi_pending_clear_800-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_25;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 864-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD02EC), name("spi_pending_clear_832-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_26;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 896-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD02F0), name("spi_pending_clear_864-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_27;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 928-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD02F4), name("spi_pending_clear_896-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_28;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 960-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD02F8), name("spi_pending_clear_928-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_29;
        REGISTER { description("ICDICPR: SPI Pending Clear Register (RW))\n(Interrupt ID 992-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD02FC), name("spi_pending_clear_960-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_PENDING_CLEAR_30;
#endif
        
        REGISTER { description("ICDABR: SGI Active Status Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0300), name("sgi_active_if0"), bitwidth(16), groups("Distributor 0") } SGI_ACTIVE_0;
        REGISTER { description("ICDABR: SGI Active Status Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1300), name("sgi_active_if1"), bitwidth(16), groups("Distributor 1") } SGI_ACTIVE_1;
        REGISTER { description("ICDABR: SGI Active Status Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2300), name("sgi_active_if2"), bitwidth(16), groups("Distributor 2") } SGI_ACTIVE_2;
        REGISTER { description("ICDABR: SGI Active Status Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3300), name("sgi_active_if3"), bitwidth(16), groups("Distributor 3") } SGI_ACTIVE_3;
        REGISTER { description("ICDABR: SGI Active Status Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4300), name("sgi_active_if4"), bitwidth(16), groups("Distributor 4") } SGI_ACTIVE_4;
        REGISTER { description("ICDABR: SGI Active Status Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5300), name("sgi_active_if5"), bitwidth(16), groups("Distributor 5") } SGI_ACTIVE_5;
        REGISTER { description("ICDABR: SGI Active Status Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6300), name("sgi_active_if6"), bitwidth(16), groups("Distributor 6") } SGI_ACTIVE_6;
        REGISTER { description("ICDABR: SGI Active Status Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7300), name("sgi_active_if7"), bitwidth(16), groups("Distributor 7") } SGI_ACTIVE_7;
        
        REGISTER { description("ICDABR: PPI Active Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD0302), name("ppi_active_if0"), bitwidth(16), groups("Distributor 0") } PPI_ACTIVE_0;
        REGISTER { description("ICDABR: PPI Active Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD1302), name("ppi_active_if1"), bitwidth(16), groups("Distributor 1") } PPI_ACTIVE_1;
        REGISTER { description("ICDABR: PPI Active Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD2302), name("ppi_active_if2"), bitwidth(16), groups("Distributor 2") } PPI_ACTIVE_2;
        REGISTER { description("ICDABR: PPI Active Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD3302), name("ppi_active_if3"), bitwidth(16), groups("Distributor 3") } PPI_ACTIVE_3;
        REGISTER { description("ICDABR: PPI Active Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD4302), name("ppi_active_if4"), bitwidth(16), groups("Distributor 4") } PPI_ACTIVE_4;
        REGISTER { description("ICDABR: PPI Active Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD5302), name("ppi_active_if5"), bitwidth(16), groups("Distributor 5") } PPI_ACTIVE_5;
        REGISTER { description("ICDABR: PPI Active Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD6302), name("ppi_active_if6"), bitwidth(16), groups("Distributor 6") } PPI_ACTIVE_6;
        REGISTER { description("ICDABR: PPI Active Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read16), write_function(debug_write16), reg_number(0xD7302), name("ppi_active_if7"), bitwidth(16), groups("Distributor 7") } PPI_ACTIVE_7;

        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 32-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD0304), name("spi_active_0-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_0;
#ifdef ALL_CADI_REGISTER
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 64-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD0308), name("spi_active_32-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_1;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 96-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD030C), name("spi_active_64-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_2;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 128-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD0310), name("spi_active_96-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_3;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 160-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD0314), name("spi_active_128-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_4;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 192-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD0318), name("spi_active_160-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_5;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 224-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD031C), name("spi_active_192-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_6;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 256-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD0320), name("spi_active_224-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_7;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 288-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD0324), name("spi_active_256-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_8;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 320-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD0328), name("spi_active_288-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_9;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 352-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD032C), name("spi_active_320-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_10;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 384-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD0330), name("spi_active_352-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_11;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 416-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD0334), name("spi_active_384-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_12;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 448-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD0338), name("spi_active_416-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_13;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 480-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD033C), name("spi_active_448-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_14;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 512-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD0340), name("spi_active_480-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_15;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 544-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD0344), name("spi_active_512-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_16;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 576-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD0348), name("spi_active_544-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_17;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 608-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD034C), name("spi_active_576-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_18;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 640-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD0350), name("spi_active_608-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_19;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 672-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD0354), name("spi_active_640-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_20;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 704-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD0358), name("spi_active_672-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_21;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 736-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD035C), name("spi_active_704-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_22;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 768-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD0360), name("spi_active_736-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_23;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 800-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD0364), name("spi_active_768-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_24;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 832-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD0368), name("spi_active_800-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_25;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 864-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD036C), name("spi_active_832-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_26;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 896-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD0370), name("spi_active_864-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_27;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 928-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD0374), name("spi_active_896-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_28;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 960-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD0378), name("spi_active_928-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_29;
        REGISTER { description("ICDABR: SPI Active Status Register (RO))\n(Interrupt ID 992-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD037C), name("spi_active_960-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_ACTIVE_30;
#endif

        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD0400), name("priority_sgi_if0_0-3"), groups("Distributor 0") } PRIORITY_SGI_0_0;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD1400), name("priority_sgi_if1_0-3"), groups("Distributor 1") } PRIORITY_SGI_0_1;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD2400), name("priority_sgi_if2_0-3"), groups("Distributor 2") } PRIORITY_SGI_0_2;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD3400), name("priority_sgi_if3_0-3"), groups("Distributor 3") } PRIORITY_SGI_0_3;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD4400), name("priority_sgi_if4_0-3"), groups("Distributor 4") } PRIORITY_SGI_0_4;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD5400), name("priority_sgi_if5_0-3"), groups("Distributor 5") } PRIORITY_SGI_0_5;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD6400), name("priority_sgi_if6_0-3"), groups("Distributor 6") } PRIORITY_SGI_0_6;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD7400), name("priority_sgi_if7_0-3"), groups("Distributor 7") } PRIORITY_SGI_0_7;
        
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD0404), name("priority_sgi_if0_4-7"), groups("Distributor 0") } PRIORITY_SGI_1_0;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD1404), name("priority_sgi_if1_4-7"), groups("Distributor 1") } PRIORITY_SGI_1_1;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD2404), name("priority_sgi_if2_4-7"), groups("Distributor 2") } PRIORITY_SGI_1_2;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD3404), name("priority_sgi_if3_4-7"), groups("Distributor 3") } PRIORITY_SGI_1_3;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD4404), name("priority_sgi_if4_4-7"), groups("Distributor 4") } PRIORITY_SGI_1_4;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD5404), name("priority_sgi_if5_4-7"), groups("Distributor 5") } PRIORITY_SGI_1_5;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD6404), name("priority_sgi_if6_4-7"), groups("Distributor 6") } PRIORITY_SGI_1_6;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD7404), name("priority_sgi_if7_4-7"), groups("Distributor 7") } PRIORITY_SGI_1_7;
        
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD0408), name("priority_sgi_if0_8-11"), groups("Distributor 0") } PRIORITY_SGI_2_0;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD1408), name("priority_sgi_if1_8-11"), groups("Distributor 1") } PRIORITY_SGI_2_1;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD2408), name("priority_sgi_if2_8-11"), groups("Distributor 2") } PRIORITY_SGI_2_2;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD3408), name("priority_sgi_if3_8-11"), groups("Distributor 3") } PRIORITY_SGI_2_3;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD4408), name("priority_sgi_if4_8-11"), groups("Distributor 4") } PRIORITY_SGI_2_4;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD5408), name("priority_sgi_if5_8-11"), groups("Distributor 5") } PRIORITY_SGI_2_5;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD6408), name("priority_sgi_if6_8-11"), groups("Distributor 6") } PRIORITY_SGI_2_6;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD7408), name("priority_sgi_if7_8-11"), groups("Distributor 7") } PRIORITY_SGI_2_7;
        
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD040C), name("priority_sgi_if0_12-15"), groups("Distributor 0") } PRIORITY_SGI_3_0;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD140C), name("priority_sgi_if1_12-15"), groups("Distributor 1") } PRIORITY_SGI_3_1;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD240C), name("priority_sgi_if2_12-15"), groups("Distributor 2") } PRIORITY_SGI_3_2;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD340C), name("priority_sgi_if3_12-15"), groups("Distributor 3") } PRIORITY_SGI_3_3;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD440C), name("priority_sgi_if4_12-15"), groups("Distributor 4") } PRIORITY_SGI_3_4;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD540C), name("priority_sgi_if5_12-15"), groups("Distributor 5") } PRIORITY_SGI_3_5;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD640C), name("priority_sgi_if6_12-15"), groups("Distributor 6") } PRIORITY_SGI_3_6;
        REGISTER { description("ICDIPR: SGI Priority Level Register (RW))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD740C), name("priority_sgi_if7_12-15"), groups("Distributor 7") } PRIORITY_SGI_3_7;

        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD0410), name("priority_ppi_if0_0-3"),  groups("Distributor 0") } PRIORITY_PPI_0_0;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD1410), name("priority_ppi_if1_0-3"),  groups("Distributor 1") } PRIORITY_PPI_0_1;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD2410), name("priority_ppi_if2_0-3"),  groups("Distributor 2") } PRIORITY_PPI_0_2;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD3410), name("priority_ppi_if3_0-3"),  groups("Distributor 3") } PRIORITY_PPI_0_3;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD4410), name("priority_ppi_if4_0-3"),  groups("Distributor 4") } PRIORITY_PPI_0_4;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD5410), name("priority_ppi_if5_0-3"),  groups("Distributor 5") } PRIORITY_PPI_0_5;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD6410), name("priority_ppi_if6_0-3"),  groups("Distributor 6") } PRIORITY_PPI_0_6;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD7410), name("priority_ppi_if7_0-3"),  groups("Distributor 7") } PRIORITY_PPI_0_7;
        
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD0414), name("priority_ppi_if0_4-7"),  groups("Distributor 0") } PRIORITY_PPI_1_0;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD1414), name("priority_ppi_if1_4-7"),  groups("Distributor 1") } PRIORITY_PPI_1_1;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD2414), name("priority_ppi_if2_4-7"),  groups("Distributor 2") } PRIORITY_PPI_1_2;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD3414), name("priority_ppi_if3_4-7"),  groups("Distributor 3") } PRIORITY_PPI_1_3;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD4414), name("priority_ppi_if4_4-7"),  groups("Distributor 4") } PRIORITY_PPI_1_4;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD5414), name("priority_ppi_if5_4-7"),  groups("Distributor 5") } PRIORITY_PPI_1_5;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD6414), name("priority_ppi_if6_4-7"),  groups("Distributor 6") } PRIORITY_PPI_1_6;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD7414), name("priority_ppi_if7_4-7"),  groups("Distributor 7") } PRIORITY_PPI_1_7;
        
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD0418), name("priority_ppi_if0_8-11"),  groups("Distributor 0") } PRIORITY_PPI_2_0;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD1418), name("priority_ppi_if1_8-11"),  groups("Distributor 1") } PRIORITY_PPI_2_1;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD2418), name("priority_ppi_if2_8-11"),  groups("Distributor 2") } PRIORITY_PPI_2_2;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD3418), name("priority_ppi_if3_8-11"),  groups("Distributor 3") } PRIORITY_PPI_2_3;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD4418), name("priority_ppi_if4_8-11"),  groups("Distributor 4") } PRIORITY_PPI_2_4;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD5418), name("priority_ppi_if5_8-11"),  groups("Distributor 5") } PRIORITY_PPI_2_5;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD6418), name("priority_ppi_if6_8-11"),  groups("Distributor 6") } PRIORITY_PPI_2_6;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD7418), name("priority_ppi_if7_8-11"),  groups("Distributor 7") } PRIORITY_PPI_2_7;
        
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD041C), name("priority_ppi_if0_12-15"),  groups("Distributor 0") } PRIORITY_PPI_3_0;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD141C), name("priority_ppi_if1_12-15"),  groups("Distributor 1") } PRIORITY_PPI_3_1;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD241C), name("priority_ppi_if2_12-15"),  groups("Distributor 2") } PRIORITY_PPI_3_2;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD341C), name("priority_ppi_if3_12-15"),  groups("Distributor 3") } PRIORITY_PPI_3_3;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD441C), name("priority_ppi_if4_12-15"),  groups("Distributor 4") } PRIORITY_PPI_3_4;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD541C), name("priority_ppi_if5_12-15"),  groups("Distributor 5") } PRIORITY_PPI_3_5;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD641C), name("priority_ppi_if6_12-15"),  groups("Distributor 6") } PRIORITY_PPI_3_6;
        REGISTER { description("ICDIPR: PPI Priority Level Register (RW))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD741C), name("priority_ppi_if7_12-15"),  groups("Distributor 7") } PRIORITY_PPI_3_7;
        
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 32-35"), read_function(debug_read), write_function(debug_write), reg_number(0xD0420), name("priority_spi_0-3"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_0;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 36-39"), read_function(debug_read), write_function(debug_write), reg_number(0xD0424), name("priority_spi_4-7"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_1;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 40-43"), read_function(debug_read), write_function(debug_write), reg_number(0xD0428), name("priority_spi_8-11"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_2;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 44-47"), read_function(debug_read), write_function(debug_write), reg_number(0xD042C), name("priority_spi_12-15"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_3;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 48-51"), read_function(debug_read), write_function(debug_write), reg_number(0xD0430), name("priority_spi_16-19"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_4;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 52-55"), read_function(debug_read), write_function(debug_write), reg_number(0xD0434), name("priority_spi_20-23"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_5;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 56-59"), read_function(debug_read), write_function(debug_write), reg_number(0xD0438), name("priority_spi_24-27"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_6;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 60-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD043C), name("priority_spi_28-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_7;
#ifdef ALL_CADI_REGISTER
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 64-67"), read_function(debug_read), write_function(debug_write), reg_number(0xD0440), name("priority_spi_32-35"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_8;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 68-71"), read_function(debug_read), write_function(debug_write), reg_number(0xD0444), name("priority_spi_36-39"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_9;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 72-75"), read_function(debug_read), write_function(debug_write), reg_number(0xD0448), name("priority_spi_40-43"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_10;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 76-79"), read_function(debug_read), write_function(debug_write), reg_number(0xD044C), name("priority_spi_44-47"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_11;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 80-83"), read_function(debug_read), write_function(debug_write), reg_number(0xD0450), name("priority_spi_48-51"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_12;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 84-87"), read_function(debug_read), write_function(debug_write), reg_number(0xD0454), name("priority_spi_52-55"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_13;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 88-91"), read_function(debug_read), write_function(debug_write), reg_number(0xD0458), name("priority_spi_56-59"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_14;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 92-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD045C), name("priority_spi_60-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_15;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 96-99"), read_function(debug_read), write_function(debug_write), reg_number(0xD0460), name("priority_spi_64-67"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_16;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 100-103"), read_function(debug_read), write_function(debug_write), reg_number(0xD0464), name("priority_spi_68-71"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_17;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 104-107"), read_function(debug_read), write_function(debug_write), reg_number(0xD0468), name("priority_spi_72-75"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_18;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 108-111"), read_function(debug_read), write_function(debug_write), reg_number(0xD046C), name("priority_spi_76-79"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_19;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 112-115"), read_function(debug_read), write_function(debug_write), reg_number(0xD0470), name("priority_spi_80-83"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_20;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 116-119"), read_function(debug_read), write_function(debug_write), reg_number(0xD0474), name("priority_spi_84-87"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_21;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 120-123"), read_function(debug_read), write_function(debug_write), reg_number(0xD0478), name("priority_spi_88-91"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_22;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 124-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD047C), name("priority_spi_92-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_23;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 128-131"), read_function(debug_read), write_function(debug_write), reg_number(0xD0480), name("priority_spi_96-99"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_24;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 132-135"), read_function(debug_read), write_function(debug_write), reg_number(0xD0484), name("priority_spi_100-103"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_25;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 136-139"), read_function(debug_read), write_function(debug_write), reg_number(0xD0488), name("priority_spi_104-107"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_26;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 140-143"), read_function(debug_read), write_function(debug_write), reg_number(0xD048C), name("priority_spi_108-111"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_27;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 144-147"), read_function(debug_read), write_function(debug_write), reg_number(0xD0490), name("priority_spi_112-115"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_28;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 148-151"), read_function(debug_read), write_function(debug_write), reg_number(0xD0494), name("priority_spi_116-119"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_29;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 152-155"), read_function(debug_read), write_function(debug_write), reg_number(0xD0498), name("priority_spi_120-123"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_30;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 156-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD049C), name("priority_spi_124-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_31;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 160-163"), read_function(debug_read), write_function(debug_write), reg_number(0xD04A0), name("priority_spi_128-131"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_32;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 164-167"), read_function(debug_read), write_function(debug_write), reg_number(0xD04A4), name("priority_spi_132-135"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_33;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 168-171"), read_function(debug_read), write_function(debug_write), reg_number(0xD04A8), name("priority_spi_136-139"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_34;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 172-175"), read_function(debug_read), write_function(debug_write), reg_number(0xD04AC), name("priority_spi_140-143"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_35;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 176-179"), read_function(debug_read), write_function(debug_write), reg_number(0xD04B0), name("priority_spi_144-147"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_36;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 180-183"), read_function(debug_read), write_function(debug_write), reg_number(0xD04B4), name("priority_spi_148-151"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_37;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 184-187"), read_function(debug_read), write_function(debug_write), reg_number(0xD04B8), name("priority_spi_152-155"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_38;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 188-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD04BC), name("priority_spi_156-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_39;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 192-195"), read_function(debug_read), write_function(debug_write), reg_number(0xD04C0), name("priority_spi_160-163"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_40;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 196-199"), read_function(debug_read), write_function(debug_write), reg_number(0xD04C4), name("priority_spi_164-167"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_41;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 200-203"), read_function(debug_read), write_function(debug_write), reg_number(0xD04C8), name("priority_spi_168-171"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_42;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 204-207"), read_function(debug_read), write_function(debug_write), reg_number(0xD04CC), name("priority_spi_172-175"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_43;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 208-211"), read_function(debug_read), write_function(debug_write), reg_number(0xD04D0), name("priority_spi_176-179"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_44;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 212-215"), read_function(debug_read), write_function(debug_write), reg_number(0xD04D4), name("priority_spi_180-183"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_45;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 216-219"), read_function(debug_read), write_function(debug_write), reg_number(0xD04D8), name("priority_spi_184-187"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_46;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 220-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD04DC), name("priority_spi_188-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_47;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 224-227"), read_function(debug_read), write_function(debug_write), reg_number(0xD04E0), name("priority_spi_192-195"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_48;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 228-231"), read_function(debug_read), write_function(debug_write), reg_number(0xD04E4), name("priority_spi_196-199"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_49;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 232-235"), read_function(debug_read), write_function(debug_write), reg_number(0xD04E8), name("priority_spi_200-203"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_50;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 236-239"), read_function(debug_read), write_function(debug_write), reg_number(0xD04EC), name("priority_spi_204-207"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_51;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 240-243"), read_function(debug_read), write_function(debug_write), reg_number(0xD04F0), name("priority_spi_208-211"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_52;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 244-247"), read_function(debug_read), write_function(debug_write), reg_number(0xD04F4), name("priority_spi_212-215"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_53;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 248-251"), read_function(debug_read), write_function(debug_write), reg_number(0xD04F8), name("priority_spi_216-219"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_54;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 252-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD04FC), name("priority_spi_220-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_55;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 256-259"), read_function(debug_read), write_function(debug_write), reg_number(0xD0500), name("priority_spi_224-227"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_56;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 260-263"), read_function(debug_read), write_function(debug_write), reg_number(0xD0504), name("priority_spi_228-231"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_57;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 264-267"), read_function(debug_read), write_function(debug_write), reg_number(0xD0508), name("priority_spi_232-235"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_58;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 268-271"), read_function(debug_read), write_function(debug_write), reg_number(0xD050C), name("priority_spi_236-239"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_59;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 272-275"), read_function(debug_read), write_function(debug_write), reg_number(0xD0510), name("priority_spi_240-243"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_60;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 276-279"), read_function(debug_read), write_function(debug_write), reg_number(0xD0514), name("priority_spi_244-247"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_61;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 280-283"), read_function(debug_read), write_function(debug_write), reg_number(0xD0518), name("priority_spi_248-251"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_62;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 284-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD051C), name("priority_spi_252-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_63;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 288-291"), read_function(debug_read), write_function(debug_write), reg_number(0xD0520), name("priority_spi_256-259"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_64;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 292-295"), read_function(debug_read), write_function(debug_write), reg_number(0xD0524), name("priority_spi_260-263"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_65;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 296-299"), read_function(debug_read), write_function(debug_write), reg_number(0xD0528), name("priority_spi_264-267"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_66;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 300-303"), read_function(debug_read), write_function(debug_write), reg_number(0xD052C), name("priority_spi_268-271"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_67;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 304-307"), read_function(debug_read), write_function(debug_write), reg_number(0xD0530), name("priority_spi_272-275"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_68;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 308-311"), read_function(debug_read), write_function(debug_write), reg_number(0xD0534), name("priority_spi_276-279"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_69;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 312-315"), read_function(debug_read), write_function(debug_write), reg_number(0xD0538), name("priority_spi_280-283"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_70;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 316-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD053C), name("priority_spi_284-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_71;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 320-323"), read_function(debug_read), write_function(debug_write), reg_number(0xD0540), name("priority_spi_288-291"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_72;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 324-327"), read_function(debug_read), write_function(debug_write), reg_number(0xD0544), name("priority_spi_292-295"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_73;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 328-331"), read_function(debug_read), write_function(debug_write), reg_number(0xD0548), name("priority_spi_296-299"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_74;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 332-335"), read_function(debug_read), write_function(debug_write), reg_number(0xD054C), name("priority_spi_300-303"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_75;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 336-339"), read_function(debug_read), write_function(debug_write), reg_number(0xD0550), name("priority_spi_304-307"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_76;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 340-343"), read_function(debug_read), write_function(debug_write), reg_number(0xD0554), name("priority_spi_308-311"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_77;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 344-347"), read_function(debug_read), write_function(debug_write), reg_number(0xD0558), name("priority_spi_312-315"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_78;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 348-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD055C), name("priority_spi_316-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_79;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 352-355"), read_function(debug_read), write_function(debug_write), reg_number(0xD0560), name("priority_spi_320-323"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_80;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 356-359"), read_function(debug_read), write_function(debug_write), reg_number(0xD0564), name("priority_spi_324-327"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_81;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 360-363"), read_function(debug_read), write_function(debug_write), reg_number(0xD0568), name("priority_spi_328-331"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_82;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 364-367"), read_function(debug_read), write_function(debug_write), reg_number(0xD056C), name("priority_spi_332-335"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_83;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 368-371"), read_function(debug_read), write_function(debug_write), reg_number(0xD0570), name("priority_spi_336-339"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_84;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 372-375"), read_function(debug_read), write_function(debug_write), reg_number(0xD0574), name("priority_spi_340-343"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_85;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 376-379"), read_function(debug_read), write_function(debug_write), reg_number(0xD0578), name("priority_spi_344-347"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_86;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 380-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD057C), name("priority_spi_348-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_87;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 384-387"), read_function(debug_read), write_function(debug_write), reg_number(0xD0580), name("priority_spi_352-355"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_88;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 388-391"), read_function(debug_read), write_function(debug_write), reg_number(0xD0584), name("priority_spi_356-359"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_89;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 392-395"), read_function(debug_read), write_function(debug_write), reg_number(0xD0588), name("priority_spi_360-363"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_90;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 396-399"), read_function(debug_read), write_function(debug_write), reg_number(0xD058C), name("priority_spi_364-367"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_91;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 400-403"), read_function(debug_read), write_function(debug_write), reg_number(0xD0590), name("priority_spi_368-371"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_92;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 404-407"), read_function(debug_read), write_function(debug_write), reg_number(0xD0594), name("priority_spi_372-375"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_93;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 408-411"), read_function(debug_read), write_function(debug_write), reg_number(0xD0598), name("priority_spi_376-379"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_94;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 412-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD059C), name("priority_spi_380-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_95;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 416-419"), read_function(debug_read), write_function(debug_write), reg_number(0xD05A0), name("priority_spi_384-387"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_96;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 420-423"), read_function(debug_read), write_function(debug_write), reg_number(0xD05A4), name("priority_spi_388-391"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_97;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 424-427"), read_function(debug_read), write_function(debug_write), reg_number(0xD05A8), name("priority_spi_392-395"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_98;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 428-431"), read_function(debug_read), write_function(debug_write), reg_number(0xD05AC), name("priority_spi_396-399"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_99;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 432-435"), read_function(debug_read), write_function(debug_write), reg_number(0xD05B0), name("priority_spi_400-403"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_100;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 436-439"), read_function(debug_read), write_function(debug_write), reg_number(0xD05B4), name("priority_spi_404-407"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_101;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 440-443"), read_function(debug_read), write_function(debug_write), reg_number(0xD05B8), name("priority_spi_408-411"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_102;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 444-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD05BC), name("priority_spi_412-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_103;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 448-451"), read_function(debug_read), write_function(debug_write), reg_number(0xD05C0), name("priority_spi_416-419"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_104;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 452-455"), read_function(debug_read), write_function(debug_write), reg_number(0xD05C4), name("priority_spi_420-423"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_105;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 456-459"), read_function(debug_read), write_function(debug_write), reg_number(0xD05C8), name("priority_spi_424-427"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_106;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 460-463"), read_function(debug_read), write_function(debug_write), reg_number(0xD05CC), name("priority_spi_428-431"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_107;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 464-467"), read_function(debug_read), write_function(debug_write), reg_number(0xD05D0), name("priority_spi_432-435"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_108;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 468-471"), read_function(debug_read), write_function(debug_write), reg_number(0xD05D4), name("priority_spi_436-439"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_109;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 472-475"), read_function(debug_read), write_function(debug_write), reg_number(0xD05D8), name("priority_spi_440-443"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_110;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 476-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD05DC), name("priority_spi_444-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_111;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 480-483"), read_function(debug_read), write_function(debug_write), reg_number(0xD05E0), name("priority_spi_448-451"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_112;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 484-487"), read_function(debug_read), write_function(debug_write), reg_number(0xD05E4), name("priority_spi_452-455"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_113;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 488-491"), read_function(debug_read), write_function(debug_write), reg_number(0xD05E8), name("priority_spi_456-459"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_114;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 492-495"), read_function(debug_read), write_function(debug_write), reg_number(0xD05EC), name("priority_spi_460-463"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_115;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 496-499"), read_function(debug_read), write_function(debug_write), reg_number(0xD05F0), name("priority_spi_464-467"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_116;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 500-503"), read_function(debug_read), write_function(debug_write), reg_number(0xD05F4), name("priority_spi_468-471"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_117;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 504-507"), read_function(debug_read), write_function(debug_write), reg_number(0xD05F8), name("priority_spi_472-475"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_118;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 508-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD05FC), name("priority_spi_476-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_119;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 512-515"), read_function(debug_read), write_function(debug_write), reg_number(0xD0600), name("priority_spi_480-483"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_120;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 516-519"), read_function(debug_read), write_function(debug_write), reg_number(0xD0604), name("priority_spi_484-487"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_121;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 520-523"), read_function(debug_read), write_function(debug_write), reg_number(0xD0608), name("priority_spi_488-491"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_122;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 524-527"), read_function(debug_read), write_function(debug_write), reg_number(0xD060C), name("priority_spi_492-495"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_123;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 528-531"), read_function(debug_read), write_function(debug_write), reg_number(0xD0610), name("priority_spi_496-499"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_124;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 532-535"), read_function(debug_read), write_function(debug_write), reg_number(0xD0614), name("priority_spi_500-503"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_125;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 536-539"), read_function(debug_read), write_function(debug_write), reg_number(0xD0618), name("priority_spi_504-507"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_126;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 540-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD061C), name("priority_spi_508-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_127;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 544-547"), read_function(debug_read), write_function(debug_write), reg_number(0xD0620), name("priority_spi_512-515"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_128;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 548-551"), read_function(debug_read), write_function(debug_write), reg_number(0xD0624), name("priority_spi_516-519"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_129;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 552-555"), read_function(debug_read), write_function(debug_write), reg_number(0xD0628), name("priority_spi_520-523"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_130;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 556-559"), read_function(debug_read), write_function(debug_write), reg_number(0xD062C), name("priority_spi_524-527"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_131;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 560-563"), read_function(debug_read), write_function(debug_write), reg_number(0xD0630), name("priority_spi_528-531"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_132;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 564-567"), read_function(debug_read), write_function(debug_write), reg_number(0xD0634), name("priority_spi_532-535"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_133;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 568-571"), read_function(debug_read), write_function(debug_write), reg_number(0xD0638), name("priority_spi_536-539"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_134;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 572-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD063C), name("priority_spi_540-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_135;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 576-579"), read_function(debug_read), write_function(debug_write), reg_number(0xD0640), name("priority_spi_544-547"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_136;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 580-583"), read_function(debug_read), write_function(debug_write), reg_number(0xD0644), name("priority_spi_548-551"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_137;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 584-587"), read_function(debug_read), write_function(debug_write), reg_number(0xD0648), name("priority_spi_552-555"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_138;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 588-591"), read_function(debug_read), write_function(debug_write), reg_number(0xD064C), name("priority_spi_556-559"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_139;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 592-595"), read_function(debug_read), write_function(debug_write), reg_number(0xD0650), name("priority_spi_560-563"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_140;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 596-599"), read_function(debug_read), write_function(debug_write), reg_number(0xD0654), name("priority_spi_564-567"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_141;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 600-603"), read_function(debug_read), write_function(debug_write), reg_number(0xD0658), name("priority_spi_568-571"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_142;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 604-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD065C), name("priority_spi_572-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_143;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 608-611"), read_function(debug_read), write_function(debug_write), reg_number(0xD0660), name("priority_spi_576-579"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_144;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 612-615"), read_function(debug_read), write_function(debug_write), reg_number(0xD0664), name("priority_spi_580-583"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_145;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 616-619"), read_function(debug_read), write_function(debug_write), reg_number(0xD0668), name("priority_spi_584-587"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_146;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 620-623"), read_function(debug_read), write_function(debug_write), reg_number(0xD066C), name("priority_spi_588-591"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_147;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 624-627"), read_function(debug_read), write_function(debug_write), reg_number(0xD0670), name("priority_spi_592-595"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_148;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 628-631"), read_function(debug_read), write_function(debug_write), reg_number(0xD0674), name("priority_spi_596-599"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_149;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 632-635"), read_function(debug_read), write_function(debug_write), reg_number(0xD0678), name("priority_spi_600-603"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_150;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 636-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD067C), name("priority_spi_604-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_151;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 640-643"), read_function(debug_read), write_function(debug_write), reg_number(0xD0680), name("priority_spi_608-611"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_152;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 644-647"), read_function(debug_read), write_function(debug_write), reg_number(0xD0684), name("priority_spi_612-615"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_153;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 648-651"), read_function(debug_read), write_function(debug_write), reg_number(0xD0688), name("priority_spi_616-619"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_154;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 652-655"), read_function(debug_read), write_function(debug_write), reg_number(0xD068C), name("priority_spi_620-623"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_155;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 656-659"), read_function(debug_read), write_function(debug_write), reg_number(0xD0690), name("priority_spi_624-627"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_156;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 660-663"), read_function(debug_read), write_function(debug_write), reg_number(0xD0694), name("priority_spi_628-631"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_157;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 664-667"), read_function(debug_read), write_function(debug_write), reg_number(0xD0698), name("priority_spi_632-635"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_158;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 668-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD069C), name("priority_spi_636-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_159;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 672-675"), read_function(debug_read), write_function(debug_write), reg_number(0xD06A0), name("priority_spi_640-643"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_160;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 676-679"), read_function(debug_read), write_function(debug_write), reg_number(0xD06A4), name("priority_spi_644-647"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_161;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 680-683"), read_function(debug_read), write_function(debug_write), reg_number(0xD06A8), name("priority_spi_648-651"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_162;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 684-687"), read_function(debug_read), write_function(debug_write), reg_number(0xD06AC), name("priority_spi_652-655"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_163;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 688-691"), read_function(debug_read), write_function(debug_write), reg_number(0xD06B0), name("priority_spi_656-659"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_164;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 692-695"), read_function(debug_read), write_function(debug_write), reg_number(0xD06B4), name("priority_spi_660-663"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_165;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 696-699"), read_function(debug_read), write_function(debug_write), reg_number(0xD06B8), name("priority_spi_664-667"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_166;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 700-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD06BC), name("priority_spi_668-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_167;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 704-707"), read_function(debug_read), write_function(debug_write), reg_number(0xD06C0), name("priority_spi_672-675"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_168;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 708-711"), read_function(debug_read), write_function(debug_write), reg_number(0xD06C4), name("priority_spi_676-679"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_169;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 712-715"), read_function(debug_read), write_function(debug_write), reg_number(0xD06C8), name("priority_spi_680-683"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_170;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 716-719"), read_function(debug_read), write_function(debug_write), reg_number(0xD06CC), name("priority_spi_684-687"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_171;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 720-723"), read_function(debug_read), write_function(debug_write), reg_number(0xD06D0), name("priority_spi_688-691"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_172;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 724-727"), read_function(debug_read), write_function(debug_write), reg_number(0xD06D4), name("priority_spi_692-695"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_173;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 728-731"), read_function(debug_read), write_function(debug_write), reg_number(0xD06D8), name("priority_spi_696-699"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_174;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 732-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD06DC), name("priority_spi_700-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_175;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 736-739"), read_function(debug_read), write_function(debug_write), reg_number(0xD06E0), name("priority_spi_704-707"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_176;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 740-743"), read_function(debug_read), write_function(debug_write), reg_number(0xD06E4), name("priority_spi_708-711"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_177;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 744-747"), read_function(debug_read), write_function(debug_write), reg_number(0xD06E8), name("priority_spi_712-715"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_178;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 748-751"), read_function(debug_read), write_function(debug_write), reg_number(0xD06EC), name("priority_spi_716-719"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_179;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 752-755"), read_function(debug_read), write_function(debug_write), reg_number(0xD06F0), name("priority_spi_720-723"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_180;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 756-759"), read_function(debug_read), write_function(debug_write), reg_number(0xD06F4), name("priority_spi_724-727"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_181;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 760-763"), read_function(debug_read), write_function(debug_write), reg_number(0xD06F8), name("priority_spi_728-731"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_182;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 764-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD06FC), name("priority_spi_732-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_183;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 768-771"), read_function(debug_read), write_function(debug_write), reg_number(0xD0700), name("priority_spi_736-739"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_184;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 772-775"), read_function(debug_read), write_function(debug_write), reg_number(0xD0704), name("priority_spi_740-743"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_185;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 776-779"), read_function(debug_read), write_function(debug_write), reg_number(0xD0708), name("priority_spi_744-747"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_186;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 780-783"), read_function(debug_read), write_function(debug_write), reg_number(0xD070C), name("priority_spi_748-751"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_187;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 784-787"), read_function(debug_read), write_function(debug_write), reg_number(0xD0710), name("priority_spi_752-755"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_188;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 788-791"), read_function(debug_read), write_function(debug_write), reg_number(0xD0714), name("priority_spi_756-759"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_189;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 792-795"), read_function(debug_read), write_function(debug_write), reg_number(0xD0718), name("priority_spi_760-763"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_190;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 796-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD071C), name("priority_spi_764-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_191;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 800-803"), read_function(debug_read), write_function(debug_write), reg_number(0xD0720), name("priority_spi_768-771"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_192;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 804-807"), read_function(debug_read), write_function(debug_write), reg_number(0xD0724), name("priority_spi_772-775"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_193;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 808-811"), read_function(debug_read), write_function(debug_write), reg_number(0xD0728), name("priority_spi_776-779"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_194;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 812-815"), read_function(debug_read), write_function(debug_write), reg_number(0xD072C), name("priority_spi_780-783"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_195;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 816-819"), read_function(debug_read), write_function(debug_write), reg_number(0xD0730), name("priority_spi_784-787"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_196;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 820-823"), read_function(debug_read), write_function(debug_write), reg_number(0xD0734), name("priority_spi_788-791"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_197;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 824-827"), read_function(debug_read), write_function(debug_write), reg_number(0xD0738), name("priority_spi_792-795"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_198;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 828-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD073C), name("priority_spi_796-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_199;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 832-835"), read_function(debug_read), write_function(debug_write), reg_number(0xD0740), name("priority_spi_800-803"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_200;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 836-839"), read_function(debug_read), write_function(debug_write), reg_number(0xD0744), name("priority_spi_804-807"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_201;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 840-843"), read_function(debug_read), write_function(debug_write), reg_number(0xD0748), name("priority_spi_808-811"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_202;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 844-847"), read_function(debug_read), write_function(debug_write), reg_number(0xD074C), name("priority_spi_812-815"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_203;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 848-851"), read_function(debug_read), write_function(debug_write), reg_number(0xD0750), name("priority_spi_816-819"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_204;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 852-855"), read_function(debug_read), write_function(debug_write), reg_number(0xD0754), name("priority_spi_820-823"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_205;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 856-859"), read_function(debug_read), write_function(debug_write), reg_number(0xD0758), name("priority_spi_824-827"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_206;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 860-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD075C), name("priority_spi_828-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_207;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 864-867"), read_function(debug_read), write_function(debug_write), reg_number(0xD0760), name("priority_spi_832-835"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_208;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 868-871"), read_function(debug_read), write_function(debug_write), reg_number(0xD0764), name("priority_spi_836-839"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_209;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 872-875"), read_function(debug_read), write_function(debug_write), reg_number(0xD0768), name("priority_spi_840-843"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_210;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 876-879"), read_function(debug_read), write_function(debug_write), reg_number(0xD076C), name("priority_spi_844-847"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_211;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 880-883"), read_function(debug_read), write_function(debug_write), reg_number(0xD0770), name("priority_spi_848-851"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_212;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 884-887"), read_function(debug_read), write_function(debug_write), reg_number(0xD0774), name("priority_spi_852-855"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_213;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 888-891"), read_function(debug_read), write_function(debug_write), reg_number(0xD0778), name("priority_spi_856-859"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_214;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 892-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD077C), name("priority_spi_860-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_215;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 896-899"), read_function(debug_read), write_function(debug_write), reg_number(0xD0780), name("priority_spi_864-867"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_216;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 900-903"), read_function(debug_read), write_function(debug_write), reg_number(0xD0784), name("priority_spi_868-871"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_217;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 904-907"), read_function(debug_read), write_function(debug_write), reg_number(0xD0788), name("priority_spi_872-875"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_218;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 908-911"), read_function(debug_read), write_function(debug_write), reg_number(0xD078C), name("priority_spi_876-879"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_219;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 912-915"), read_function(debug_read), write_function(debug_write), reg_number(0xD0790), name("priority_spi_880-883"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_220;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 916-919"), read_function(debug_read), write_function(debug_write), reg_number(0xD0794), name("priority_spi_884-887"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_221;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 920-923"), read_function(debug_read), write_function(debug_write), reg_number(0xD0798), name("priority_spi_888-891"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_222;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 924-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD079C), name("priority_spi_892-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_223;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 928-931"), read_function(debug_read), write_function(debug_write), reg_number(0xD07A0), name("priority_spi_896-899"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_224;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 932-935"), read_function(debug_read), write_function(debug_write), reg_number(0xD07A4), name("priority_spi_900-903"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_225;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 936-939"), read_function(debug_read), write_function(debug_write), reg_number(0xD07A8), name("priority_spi_904-907"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_226;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 940-943"), read_function(debug_read), write_function(debug_write), reg_number(0xD07AC), name("priority_spi_908-911"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_227;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 944-947"), read_function(debug_read), write_function(debug_write), reg_number(0xD07B0), name("priority_spi_912-915"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_228;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 948-951"), read_function(debug_read), write_function(debug_write), reg_number(0xD07B4), name("priority_spi_916-919"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_229;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 952-955"), read_function(debug_read), write_function(debug_write), reg_number(0xD07B8), name("priority_spi_920-923"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_230;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 956-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD07BC), name("priority_spi_924-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_231;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 960-963"), read_function(debug_read), write_function(debug_write), reg_number(0xD07C0), name("priority_spi_928-931"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_232;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 964-967"), read_function(debug_read), write_function(debug_write), reg_number(0xD07C4), name("priority_spi_932-935"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_233;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 968-971"), read_function(debug_read), write_function(debug_write), reg_number(0xD07C8), name("priority_spi_936-939"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_234;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 972-975"), read_function(debug_read), write_function(debug_write), reg_number(0xD07CC), name("priority_spi_940-943"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_235;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 976-979"), read_function(debug_read), write_function(debug_write), reg_number(0xD07D0), name("priority_spi_944-947"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_236;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 980-983"), read_function(debug_read), write_function(debug_write), reg_number(0xD07D4), name("priority_spi_948-951"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_237;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 984-987"), read_function(debug_read), write_function(debug_write), reg_number(0xD07D8), name("priority_spi_952-955"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_238;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 988-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD07DC), name("priority_spi_956-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_239;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 992-995"), read_function(debug_read), write_function(debug_write), reg_number(0xD07E0), name("priority_spi_960-963"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_240;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 996-999"), read_function(debug_read), write_function(debug_write), reg_number(0xD07E4), name("priority_spi_964-967"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_241;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 1000-1003"), read_function(debug_read), write_function(debug_write), reg_number(0xD07E8), name("priority_spi_968-971"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_242;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 1004-1007"), read_function(debug_read), write_function(debug_write), reg_number(0xD07EC), name("priority_spi_972-975"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_243;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 1008-1011"), read_function(debug_read), write_function(debug_write), reg_number(0xD07F0), name("priority_spi_976-979"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_244;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 1012-1015"), read_function(debug_read), write_function(debug_write), reg_number(0xD07F4), name("priority_spi_980-983"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_245;
        REGISTER { description("ICDIPR: SPI Priority Level Register (RW))\n(Interrupt ID 1016-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD07F8), name("priority_spi_984-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PRIORITY_SPI_246;
#endif

        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD0800), name("target_sgi_if0_0-3"),  groups("Distributor 0") } TARGET_SGI_0_0;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD1800), name("target_sgi_if1_0-3"),  groups("Distributor 1") } TARGET_SGI_0_1;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD2800), name("target_sgi_if2_0-3"),  groups("Distributor 2") } TARGET_SGI_0_2;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD3800), name("target_sgi_if3_0-3"),  groups("Distributor 3") } TARGET_SGI_0_3;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD4800), name("target_sgi_if4_0-3"),  groups("Distributor 4") } TARGET_SGI_0_4;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD5800), name("target_sgi_if5_0-3"),  groups("Distributor 5") } TARGET_SGI_0_5;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD6800), name("target_sgi_if6_0-3"),  groups("Distributor 6") } TARGET_SGI_0_6;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 0-3"), read_function(debug_read), write_function(debug_write), reg_number(0xD7800), name("target_sgi_if7_0-3"),  groups("Distributor 7") } TARGET_SGI_0_7;
        
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD0804), name("target_sgi_if0_4-7"),  groups("Distributor 0") } TARGET_SGI_1_0;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD1804), name("target_sgi_if1_4-7"),  groups("Distributor 1") } TARGET_SGI_1_1;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD2804), name("target_sgi_if2_4-7"),  groups("Distributor 2") } TARGET_SGI_1_2;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD3804), name("target_sgi_if3_4-7"),  groups("Distributor 3") } TARGET_SGI_1_3;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD4804), name("target_sgi_if4_4-7"),  groups("Distributor 4") } TARGET_SGI_1_4;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD5804), name("target_sgi_if5_4-7"),  groups("Distributor 5") } TARGET_SGI_1_5;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD6804), name("target_sgi_if6_4-7"),  groups("Distributor 6") } TARGET_SGI_1_6;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 4-7"), read_function(debug_read), write_function(debug_write), reg_number(0xD7804), name("target_sgi_if7_4-7"),  groups("Distributor 7") } TARGET_SGI_1_7;
        
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD0808), name("target_sgi_if0_8-11"),  groups("Distributor 0") } TARGET_SGI_2_0;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD1808), name("target_sgi_if1_8-11"),  groups("Distributor 1") } TARGET_SGI_2_1;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD2808), name("target_sgi_if2_8-11"),  groups("Distributor 2") } TARGET_SGI_2_2;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD3808), name("target_sgi_if3_8-11"),  groups("Distributor 3") } TARGET_SGI_2_3;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD4808), name("target_sgi_if4_8-11"),  groups("Distributor 4") } TARGET_SGI_2_4;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD5808), name("target_sgi_if5_8-11"),  groups("Distributor 5") } TARGET_SGI_2_5;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD6808), name("target_sgi_if6_8-11"),  groups("Distributor 6") } TARGET_SGI_2_6;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 8-11"), read_function(debug_read), write_function(debug_write), reg_number(0xD7808), name("target_sgi_if7_8-11"),  groups("Distributor 7") } TARGET_SGI_2_7;
        
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD080C), name("target_sgi_if0_12-15"),  groups("Distributor 0") } TARGET_SGI_3_0;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD180C), name("target_sgi_if1_12-15"),  groups("Distributor 1") } TARGET_SGI_3_1;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD280C), name("target_sgi_if2_12-15"),  groups("Distributor 2") } TARGET_SGI_3_2;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD380C), name("target_sgi_if3_12-15"),  groups("Distributor 3") } TARGET_SGI_3_3;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD480C), name("target_sgi_if4_12-15"),  groups("Distributor 4") } TARGET_SGI_3_4;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD580C), name("target_sgi_if5_12-15"),  groups("Distributor 5") } TARGET_SGI_3_5;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD680C), name("target_sgi_if6_12-15"),  groups("Distributor 6") } TARGET_SGI_3_6;
        REGISTER { description("ICDIPTR: SGI Target Register (RO))\n(Interrupt ID 12-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD780C), name("target_sgi_if7_12-15"),  groups("Distributor 7") } TARGET_SGI_3_7;
        
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD0810), name("target_ppi_if0_0-3"),  groups("Distributor 0") } TARGET_PPI_0_0;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD1810), name("target_ppi_if1_0-3"),  groups("Distributor 1") } TARGET_PPI_0_1;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD2810), name("target_ppi_if2_0-3"),  groups("Distributor 2") } TARGET_PPI_0_2;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD3810), name("target_ppi_if3_0-3"),  groups("Distributor 3") } TARGET_PPI_0_3;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD4810), name("target_ppi_if4_0-3"),  groups("Distributor 4") } TARGET_PPI_0_4;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD5810), name("target_ppi_if5_0-3"),  groups("Distributor 5") } TARGET_PPI_0_5;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD6810), name("target_ppi_if6_0-3"),  groups("Distributor 6") } TARGET_PPI_0_6;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 16-19"), read_function(debug_read), write_function(debug_write), reg_number(0xD7810), name("target_ppi_if7_0-3"),  groups("Distributor 7") } TARGET_PPI_0_7;
        
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD0814), name("target_ppi_if0_4-7"),  groups("Distributor 0") } TARGET_PPI_1_0;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD1814), name("target_ppi_if1_4-7"),  groups("Distributor 1") } TARGET_PPI_1_1;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD2814), name("target_ppi_if2_4-7"),  groups("Distributor 2") } TARGET_PPI_1_2;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD3814), name("target_ppi_if3_4-7"),  groups("Distributor 3") } TARGET_PPI_1_3;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD4814), name("target_ppi_if4_4-7"),  groups("Distributor 4") } TARGET_PPI_1_4;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD5814), name("target_ppi_if5_4-7"),  groups("Distributor 5") } TARGET_PPI_1_5;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD6814), name("target_ppi_if6_4-7"),  groups("Distributor 6") } TARGET_PPI_1_6;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 20-23"), read_function(debug_read), write_function(debug_write), reg_number(0xD7814), name("target_ppi_if7_4-7"),  groups("Distributor 7") } TARGET_PPI_1_7;
        
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD0818), name("target_ppi_if0_8-11"),  groups("Distributor 0") } TARGET_PPI_2_0;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD1818), name("target_ppi_if1_8-11"),  groups("Distributor 1") } TARGET_PPI_2_1;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD2818), name("target_ppi_if2_8-11"),  groups("Distributor 2") } TARGET_PPI_2_2;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD3818), name("target_ppi_if3_8-11"),  groups("Distributor 3") } TARGET_PPI_2_3;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD4818), name("target_ppi_if4_8-11"),  groups("Distributor 4") } TARGET_PPI_2_4;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD5818), name("target_ppi_if5_8-11"),  groups("Distributor 5") } TARGET_PPI_2_5;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD6818), name("target_ppi_if6_8-11"),  groups("Distributor 6") } TARGET_PPI_2_6;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 24-27"), read_function(debug_read), write_function(debug_write), reg_number(0xD7818), name("target_ppi_if7_8-11"),  groups("Distributor 7") } TARGET_PPI_2_7;
        
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD081C), name("target_ppi_if0_12-15"),  groups("Distributor 0") } TARGET_PPI_3_0;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD181C), name("target_ppi_if1_12-15"),  groups("Distributor 1") } TARGET_PPI_3_1;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD281C), name("target_ppi_if2_12-15"),  groups("Distributor 2") } TARGET_PPI_3_2;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD381C), name("target_ppi_if3_12-15"),  groups("Distributor 3") } TARGET_PPI_3_3;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD481C), name("target_ppi_if4_12-15"),  groups("Distributor 4") } TARGET_PPI_3_4;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD581C), name("target_ppi_if5_12-15"),  groups("Distributor 5") } TARGET_PPI_3_5;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD681C), name("target_ppi_if6_12-15"),  groups("Distributor 6") } TARGET_PPI_3_6;
        REGISTER { description("ICDIPTR: PPI Target Register (RO))\n(Interrupt ID 28-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD781C), name("target_ppi_if7_12-15"),  groups("Distributor 7") } TARGET_PPI_3_7;

        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 32-35"), read_function(debug_read), write_function(debug_write), reg_number(0xD0820), name("target_spi_0-3"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_0;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 36-39"), read_function(debug_read), write_function(debug_write), reg_number(0xD0824), name("target_spi_4-7"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_1;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 40-43"), read_function(debug_read), write_function(debug_write), reg_number(0xD0828), name("target_spi_8-11"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_2;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 44-47"), read_function(debug_read), write_function(debug_write), reg_number(0xD082C), name("target_spi_12-15"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_3;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 48-51"), read_function(debug_read), write_function(debug_write), reg_number(0xD0830), name("target_spi_16-19"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_4;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 52-55"), read_function(debug_read), write_function(debug_write), reg_number(0xD0834), name("target_spi_20-23"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_5;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 56-59"), read_function(debug_read), write_function(debug_write), reg_number(0xD0838), name("target_spi_24-27"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_6;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 60-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD083C), name("target_spi_28-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_7;
#ifdef ALL_CADI_REGISTER
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 64-67"), read_function(debug_read), write_function(debug_write), reg_number(0xD0840), name("target_spi_32-35"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_8;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 68-71"), read_function(debug_read), write_function(debug_write), reg_number(0xD0844), name("target_spi_36-39"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_9;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 72-75"), read_function(debug_read), write_function(debug_write), reg_number(0xD0848), name("target_spi_40-43"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_10;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 76-79"), read_function(debug_read), write_function(debug_write), reg_number(0xD084C), name("target_spi_44-47"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_11;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 80-83"), read_function(debug_read), write_function(debug_write), reg_number(0xD0850), name("target_spi_48-51"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_12;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 84-87"), read_function(debug_read), write_function(debug_write), reg_number(0xD0854), name("target_spi_52-55"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_13;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 88-91"), read_function(debug_read), write_function(debug_write), reg_number(0xD0858), name("target_spi_56-59"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_14;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 92-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD085C), name("target_spi_60-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_15;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 96-99"), read_function(debug_read), write_function(debug_write), reg_number(0xD0860), name("target_spi_64-67"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_16;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 100-103"), read_function(debug_read), write_function(debug_write), reg_number(0xD0864), name("target_spi_68-71"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_17;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 104-107"), read_function(debug_read), write_function(debug_write), reg_number(0xD0868), name("target_spi_72-75"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_18;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 108-111"), read_function(debug_read), write_function(debug_write), reg_number(0xD086C), name("target_spi_76-79"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_19;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 112-115"), read_function(debug_read), write_function(debug_write), reg_number(0xD0870), name("target_spi_80-83"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_20;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 116-119"), read_function(debug_read), write_function(debug_write), reg_number(0xD0874), name("target_spi_84-87"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_21;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 120-123"), read_function(debug_read), write_function(debug_write), reg_number(0xD0878), name("target_spi_88-91"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_22;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 124-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD087C), name("target_spi_92-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_23;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 128-131"), read_function(debug_read), write_function(debug_write), reg_number(0xD0880), name("target_spi_96-99"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_24;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 132-135"), read_function(debug_read), write_function(debug_write), reg_number(0xD0884), name("target_spi_100-103"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_25;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 136-139"), read_function(debug_read), write_function(debug_write), reg_number(0xD0888), name("target_spi_104-107"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_26;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 140-143"), read_function(debug_read), write_function(debug_write), reg_number(0xD088C), name("target_spi_108-111"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_27;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 144-147"), read_function(debug_read), write_function(debug_write), reg_number(0xD0890), name("target_spi_112-115"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_28;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 148-151"), read_function(debug_read), write_function(debug_write), reg_number(0xD0894), name("target_spi_116-119"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_29;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 152-155"), read_function(debug_read), write_function(debug_write), reg_number(0xD0898), name("target_spi_120-123"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_30;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 156-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD089C), name("target_spi_124-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_31;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 160-163"), read_function(debug_read), write_function(debug_write), reg_number(0xD08A0), name("target_spi_128-131"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_32;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 164-167"), read_function(debug_read), write_function(debug_write), reg_number(0xD08A4), name("target_spi_132-135"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_33;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 168-171"), read_function(debug_read), write_function(debug_write), reg_number(0xD08A8), name("target_spi_136-139"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_34;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 172-175"), read_function(debug_read), write_function(debug_write), reg_number(0xD08AC), name("target_spi_140-143"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_35;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 176-179"), read_function(debug_read), write_function(debug_write), reg_number(0xD08B0), name("target_spi_144-147"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_36;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 180-183"), read_function(debug_read), write_function(debug_write), reg_number(0xD08B4), name("target_spi_148-151"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_37;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 184-187"), read_function(debug_read), write_function(debug_write), reg_number(0xD08B8), name("target_spi_152-155"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_38;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 188-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD08BC), name("target_spi_156-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_39;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 192-195"), read_function(debug_read), write_function(debug_write), reg_number(0xD08C0), name("target_spi_160-163"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_40;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 196-199"), read_function(debug_read), write_function(debug_write), reg_number(0xD08C4), name("target_spi_164-167"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_41;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 200-203"), read_function(debug_read), write_function(debug_write), reg_number(0xD08C8), name("target_spi_168-171"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_42;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 204-207"), read_function(debug_read), write_function(debug_write), reg_number(0xD08CC), name("target_spi_172-175"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_43;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 208-211"), read_function(debug_read), write_function(debug_write), reg_number(0xD08D0), name("target_spi_176-179"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_44;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 212-215"), read_function(debug_read), write_function(debug_write), reg_number(0xD08D4), name("target_spi_180-183"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_45;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 216-219"), read_function(debug_read), write_function(debug_write), reg_number(0xD08D8), name("target_spi_184-187"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_46;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 220-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD08DC), name("target_spi_188-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_47;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 224-227"), read_function(debug_read), write_function(debug_write), reg_number(0xD08E0), name("target_spi_192-195"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_48;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 228-231"), read_function(debug_read), write_function(debug_write), reg_number(0xD08E4), name("target_spi_196-199"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_49;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 232-235"), read_function(debug_read), write_function(debug_write), reg_number(0xD08E8), name("target_spi_200-203"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_50;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 236-239"), read_function(debug_read), write_function(debug_write), reg_number(0xD08EC), name("target_spi_204-207"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_51;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 240-243"), read_function(debug_read), write_function(debug_write), reg_number(0xD08F0), name("target_spi_208-211"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_52;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 244-247"), read_function(debug_read), write_function(debug_write), reg_number(0xD08F4), name("target_spi_212-215"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_53;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 248-251"), read_function(debug_read), write_function(debug_write), reg_number(0xD08F8), name("target_spi_216-219"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_54;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 252-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD08FC), name("target_spi_220-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_55;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 256-259"), read_function(debug_read), write_function(debug_write), reg_number(0xD0900), name("target_spi_224-227"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_56;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 260-263"), read_function(debug_read), write_function(debug_write), reg_number(0xD0904), name("target_spi_228-231"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_57;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 264-267"), read_function(debug_read), write_function(debug_write), reg_number(0xD0908), name("target_spi_232-235"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_58;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 268-271"), read_function(debug_read), write_function(debug_write), reg_number(0xD090C), name("target_spi_236-239"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_59;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 272-275"), read_function(debug_read), write_function(debug_write), reg_number(0xD0910), name("target_spi_240-243"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_60;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 276-279"), read_function(debug_read), write_function(debug_write), reg_number(0xD0914), name("target_spi_244-247"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_61;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 280-283"), read_function(debug_read), write_function(debug_write), reg_number(0xD0918), name("target_spi_248-251"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_62;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 284-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD091C), name("target_spi_252-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_63;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 288-291"), read_function(debug_read), write_function(debug_write), reg_number(0xD0920), name("target_spi_256-259"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_64;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 292-295"), read_function(debug_read), write_function(debug_write), reg_number(0xD0924), name("target_spi_260-263"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_65;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 296-299"), read_function(debug_read), write_function(debug_write), reg_number(0xD0928), name("target_spi_264-267"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_66;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 300-303"), read_function(debug_read), write_function(debug_write), reg_number(0xD092C), name("target_spi_268-271"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_67;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 304-307"), read_function(debug_read), write_function(debug_write), reg_number(0xD0930), name("target_spi_272-275"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_68;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 308-311"), read_function(debug_read), write_function(debug_write), reg_number(0xD0934), name("target_spi_276-279"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_69;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 312-315"), read_function(debug_read), write_function(debug_write), reg_number(0xD0938), name("target_spi_280-283"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_70;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 316-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD093C), name("target_spi_284-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_71;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 320-323"), read_function(debug_read), write_function(debug_write), reg_number(0xD0940), name("target_spi_288-291"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_72;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 324-327"), read_function(debug_read), write_function(debug_write), reg_number(0xD0944), name("target_spi_292-295"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_73;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 328-331"), read_function(debug_read), write_function(debug_write), reg_number(0xD0948), name("target_spi_296-299"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_74;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 332-335"), read_function(debug_read), write_function(debug_write), reg_number(0xD094C), name("target_spi_300-303"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_75;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 336-339"), read_function(debug_read), write_function(debug_write), reg_number(0xD0950), name("target_spi_304-307"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_76;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 340-343"), read_function(debug_read), write_function(debug_write), reg_number(0xD0954), name("target_spi_308-311"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_77;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 344-347"), read_function(debug_read), write_function(debug_write), reg_number(0xD0958), name("target_spi_312-315"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_78;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 348-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD095C), name("target_spi_316-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_79;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 352-355"), read_function(debug_read), write_function(debug_write), reg_number(0xD0960), name("target_spi_320-323"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_80;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 356-359"), read_function(debug_read), write_function(debug_write), reg_number(0xD0964), name("target_spi_324-327"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_81;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 360-363"), read_function(debug_read), write_function(debug_write), reg_number(0xD0968), name("target_spi_328-331"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_82;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 364-367"), read_function(debug_read), write_function(debug_write), reg_number(0xD096C), name("target_spi_332-335"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_83;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 368-371"), read_function(debug_read), write_function(debug_write), reg_number(0xD0970), name("target_spi_336-339"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_84;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 372-375"), read_function(debug_read), write_function(debug_write), reg_number(0xD0974), name("target_spi_340-343"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_85;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 376-379"), read_function(debug_read), write_function(debug_write), reg_number(0xD0978), name("target_spi_344-347"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_86;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 380-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD097C), name("target_spi_348-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_87;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 384-387"), read_function(debug_read), write_function(debug_write), reg_number(0xD0980), name("target_spi_352-355"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_88;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 388-391"), read_function(debug_read), write_function(debug_write), reg_number(0xD0984), name("target_spi_356-359"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_89;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 392-395"), read_function(debug_read), write_function(debug_write), reg_number(0xD0988), name("target_spi_360-363"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_90;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 396-399"), read_function(debug_read), write_function(debug_write), reg_number(0xD098C), name("target_spi_364-367"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_91;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 400-403"), read_function(debug_read), write_function(debug_write), reg_number(0xD0990), name("target_spi_368-371"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_92;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 404-407"), read_function(debug_read), write_function(debug_write), reg_number(0xD0994), name("target_spi_372-375"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_93;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 408-411"), read_function(debug_read), write_function(debug_write), reg_number(0xD0998), name("target_spi_376-379"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_94;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 412-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD099C), name("target_spi_380-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_95;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 416-419"), read_function(debug_read), write_function(debug_write), reg_number(0xD09A0), name("target_spi_384-387"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_96;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 420-423"), read_function(debug_read), write_function(debug_write), reg_number(0xD09A4), name("target_spi_388-391"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_97;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 424-427"), read_function(debug_read), write_function(debug_write), reg_number(0xD09A8), name("target_spi_392-395"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_98;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 428-431"), read_function(debug_read), write_function(debug_write), reg_number(0xD09AC), name("target_spi_396-399"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_99;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 432-435"), read_function(debug_read), write_function(debug_write), reg_number(0xD09B0), name("target_spi_400-403"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_100;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 436-439"), read_function(debug_read), write_function(debug_write), reg_number(0xD09B4), name("target_spi_404-407"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_101;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 440-443"), read_function(debug_read), write_function(debug_write), reg_number(0xD09B8), name("target_spi_408-411"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_102;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 444-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD09BC), name("target_spi_412-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_103;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 448-451"), read_function(debug_read), write_function(debug_write), reg_number(0xD09C0), name("target_spi_416-419"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_104;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 452-455"), read_function(debug_read), write_function(debug_write), reg_number(0xD09C4), name("target_spi_420-423"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_105;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 456-459"), read_function(debug_read), write_function(debug_write), reg_number(0xD09C8), name("target_spi_424-427"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_106;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 460-463"), read_function(debug_read), write_function(debug_write), reg_number(0xD09CC), name("target_spi_428-431"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_107;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 464-467"), read_function(debug_read), write_function(debug_write), reg_number(0xD09D0), name("target_spi_432-435"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_108;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 468-471"), read_function(debug_read), write_function(debug_write), reg_number(0xD09D4), name("target_spi_436-439"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_109;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 472-475"), read_function(debug_read), write_function(debug_write), reg_number(0xD09D8), name("target_spi_440-443"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_110;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 476-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD09DC), name("target_spi_444-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_111;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 480-483"), read_function(debug_read), write_function(debug_write), reg_number(0xD09E0), name("target_spi_448-451"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_112;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 484-487"), read_function(debug_read), write_function(debug_write), reg_number(0xD09E4), name("target_spi_452-455"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_113;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 488-491"), read_function(debug_read), write_function(debug_write), reg_number(0xD09E8), name("target_spi_456-459"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_114;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 492-495"), read_function(debug_read), write_function(debug_write), reg_number(0xD09EC), name("target_spi_460-463"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_115;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 496-499"), read_function(debug_read), write_function(debug_write), reg_number(0xD09F0), name("target_spi_464-467"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_116;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 500-503"), read_function(debug_read), write_function(debug_write), reg_number(0xD09F4), name("target_spi_468-471"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_117;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 504-507"), read_function(debug_read), write_function(debug_write), reg_number(0xD09F8), name("target_spi_472-475"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_118;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 508-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD09FC), name("target_spi_476-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_119;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 512-515"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A00), name("target_spi_480-483"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_120;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 516-519"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A04), name("target_spi_484-487"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_121;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 520-523"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A08), name("target_spi_488-491"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_122;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 524-527"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A0C), name("target_spi_492-495"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_123;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 528-531"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A10), name("target_spi_496-499"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_124;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 532-535"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A14), name("target_spi_500-503"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_125;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 536-539"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A18), name("target_spi_504-507"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_126;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 540-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A1C), name("target_spi_508-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_127;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 544-547"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A20), name("target_spi_512-515"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_128;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 548-551"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A24), name("target_spi_516-519"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_129;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 552-555"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A28), name("target_spi_520-523"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_130;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 556-559"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A2C), name("target_spi_524-527"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_131;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 560-563"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A30), name("target_spi_528-531"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_132;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 564-567"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A34), name("target_spi_532-535"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_133;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 568-571"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A38), name("target_spi_536-539"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_134;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 572-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A3C), name("target_spi_540-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_135;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 576-579"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A40), name("target_spi_544-547"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_136;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 580-583"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A44), name("target_spi_548-551"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_137;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 584-587"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A48), name("target_spi_552-555"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_138;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 588-591"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A4C), name("target_spi_556-559"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_139;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 592-595"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A50), name("target_spi_560-563"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_140;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 596-599"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A54), name("target_spi_564-567"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_141;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 600-603"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A58), name("target_spi_568-571"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_142;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 604-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A5C), name("target_spi_572-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_143;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 608-611"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A60), name("target_spi_576-579"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_144;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 612-615"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A64), name("target_spi_580-583"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_145;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 616-619"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A68), name("target_spi_584-587"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_146;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 620-623"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A6C), name("target_spi_588-591"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_147;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 624-627"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A70), name("target_spi_592-595"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_148;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 628-631"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A74), name("target_spi_596-599"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_149;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 632-635"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A78), name("target_spi_600-603"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_150;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 636-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A7C), name("target_spi_604-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_151;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 640-643"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A80), name("target_spi_608-611"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_152;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 644-647"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A84), name("target_spi_612-615"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_153;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 648-651"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A88), name("target_spi_616-619"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_154;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 652-655"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A8C), name("target_spi_620-623"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_155;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 656-659"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A90), name("target_spi_624-627"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_156;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 660-663"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A94), name("target_spi_628-631"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_157;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 664-667"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A98), name("target_spi_632-635"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_158;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 668-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD0A9C), name("target_spi_636-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_159;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 672-675"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AA0), name("target_spi_640-643"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_160;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 676-679"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AA4), name("target_spi_644-647"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_161;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 680-683"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AA8), name("target_spi_648-651"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_162;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 684-687"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AAC), name("target_spi_652-655"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_163;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 688-691"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AB0), name("target_spi_656-659"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_164;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 692-695"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AB4), name("target_spi_660-663"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_165;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 696-699"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AB8), name("target_spi_664-667"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_166;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 700-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD0ABC), name("target_spi_668-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_167;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 704-707"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AC0), name("target_spi_672-675"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_168;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 708-711"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AC4), name("target_spi_676-679"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_169;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 712-715"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AC8), name("target_spi_680-683"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_170;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 716-719"), read_function(debug_read), write_function(debug_write), reg_number(0xD0ACC), name("target_spi_684-687"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_171;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 720-723"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AD0), name("target_spi_688-691"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_172;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 724-727"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AD4), name("target_spi_692-695"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_173;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 728-731"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AD8), name("target_spi_696-699"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_174;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 732-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD0ADC), name("target_spi_700-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_175;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 736-739"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AE0), name("target_spi_704-707"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_176;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 740-743"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AE4), name("target_spi_708-711"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_177;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 744-747"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AE8), name("target_spi_712-715"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_178;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 748-751"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AEC), name("target_spi_716-719"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_179;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 752-755"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AF0), name("target_spi_720-723"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_180;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 756-759"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AF4), name("target_spi_724-727"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_181;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 760-763"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AF8), name("target_spi_728-731"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_182;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 764-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD0AFC), name("target_spi_732-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_183;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 768-771"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B00), name("target_spi_736-739"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_184;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 772-775"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B04), name("target_spi_740-743"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_185;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 776-779"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B08), name("target_spi_744-747"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_186;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 780-783"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B0C), name("target_spi_748-751"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_187;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 784-787"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B10), name("target_spi_752-755"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_188;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 788-791"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B14), name("target_spi_756-759"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_189;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 792-795"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B18), name("target_spi_760-763"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_190;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 796-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B1C), name("target_spi_764-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_191;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 800-803"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B20), name("target_spi_768-771"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_192;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 804-807"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B24), name("target_spi_772-775"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_193;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 808-811"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B28), name("target_spi_776-779"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_194;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 812-815"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B2C), name("target_spi_780-783"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_195;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 816-819"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B30), name("target_spi_784-787"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_196;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 820-823"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B34), name("target_spi_788-791"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_197;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 824-827"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B38), name("target_spi_792-795"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_198;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 828-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B3C), name("target_spi_796-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_199;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 832-835"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B40), name("target_spi_800-803"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_200;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 836-839"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B44), name("target_spi_804-807"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_201;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 840-843"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B48), name("target_spi_808-811"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_202;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 844-847"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B4C), name("target_spi_812-815"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_203;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 848-851"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B50), name("target_spi_816-819"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_204;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 852-855"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B54), name("target_spi_820-823"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_205;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 856-859"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B58), name("target_spi_824-827"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_206;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 860-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B5C), name("target_spi_828-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_207;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 864-867"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B60), name("target_spi_832-835"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_208;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 868-871"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B64), name("target_spi_836-839"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_209;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 872-875"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B68), name("target_spi_840-843"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_210;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 876-879"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B6C), name("target_spi_844-847"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_211;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 880-883"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B70), name("target_spi_848-851"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_212;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 884-887"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B74), name("target_spi_852-855"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_213;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 888-891"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B78), name("target_spi_856-859"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_214;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 892-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B7C), name("target_spi_860-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_215;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 896-899"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B80), name("target_spi_864-867"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_216;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 900-903"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B84), name("target_spi_868-871"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_217;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 904-907"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B88), name("target_spi_872-875"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_218;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 908-911"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B8C), name("target_spi_876-879"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_219;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 912-915"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B90), name("target_spi_880-883"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_220;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 916-919"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B94), name("target_spi_884-887"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_221;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 920-923"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B98), name("target_spi_888-891"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_222;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 924-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD0B9C), name("target_spi_892-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_223;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 928-931"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BA0), name("target_spi_896-899"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_224;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 932-935"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BA4), name("target_spi_900-903"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_225;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 936-939"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BA8), name("target_spi_904-907"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_226;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 940-943"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BAC), name("target_spi_908-911"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_227;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 944-947"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BB0), name("target_spi_912-915"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_228;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 948-951"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BB4), name("target_spi_916-919"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_229;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 952-955"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BB8), name("target_spi_920-923"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_230;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 956-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BBC), name("target_spi_924-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_231;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 960-963"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BC0), name("target_spi_928-931"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_232;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 964-967"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BC4), name("target_spi_932-935"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_233;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 968-971"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BC8), name("target_spi_936-939"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_234;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 972-975"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BCC), name("target_spi_940-943"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_235;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 976-979"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BD0), name("target_spi_944-947"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_236;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 980-983"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BD4), name("target_spi_948-951"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_237;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 984-987"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BD8), name("target_spi_952-955"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_238;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 988-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BDC), name("target_spi_956-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_239;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 992-995"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BE0), name("target_spi_960-963"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_240;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 996-999"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BE4), name("target_spi_964-967"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_241;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 1000-1003"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BE8), name("target_spi_968-971"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_242;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 1004-1007"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BEC), name("target_spi_972-975"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_243;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 1008-1011"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BF0), name("target_spi_976-979"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_244;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 1012-1015"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BF4), name("target_spi_980-983"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_245;
        REGISTER { description("ICDIPTR: SPI Target Register (RW))\n(Interrupt ID 1016-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD0BF8), name("target_spi_984-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} TARGET_SPI_246;
#endif

        REGISTER { description("ICDICR: SGI Interrupt Configuration Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C00), name("sgi_config_if0_0-15"),  groups("Distributor 0") } SGI_CONFIG_0;
        REGISTER { description("ICDICR: SGI Interrupt Configuration Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD1C00), name("sgi_config_if1_0-15"),  groups("Distributor 1") } SGI_CONFIG_1;
        REGISTER { description("ICDICR: SGI Interrupt Configuration Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD2C00), name("sgi_config_if2_0-15"),  groups("Distributor 2") } SGI_CONFIG_2;
        REGISTER { description("ICDICR: SGI Interrupt Configuration Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD3C00), name("sgi_config_if3_0-15"),  groups("Distributor 3") } SGI_CONFIG_3;
        REGISTER { description("ICDICR: SGI Interrupt Configuration Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD4C00), name("sgi_config_if4_0-15"),  groups("Distributor 4") } SGI_CONFIG_4;
        REGISTER { description("ICDICR: SGI Interrupt Configuration Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD5C00), name("sgi_config_if5_0-15"),  groups("Distributor 5") } SGI_CONFIG_5;
        REGISTER { description("ICDICR: SGI Interrupt Configuration Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD6C00), name("sgi_config_if6_0-15"),  groups("Distributor 6") } SGI_CONFIG_6;
        REGISTER { description("ICDICR: SGI Interrupt Configuration Register (RO))\n(Interrupt ID 0-15"), read_function(debug_read), write_function(debug_write), reg_number(0xD7C00), name("sgi_config_if7_0-15"),  groups("Distributor 7") } SGI_CONFIG_7;

        REGISTER { description("ICDICR: PPI Interrupt Configuration Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C04), name("ppi_config_if0_0-15"),  groups("Distributor 0") } PPI_CONFIG_0;
        REGISTER { description("ICDICR: PPI Interrupt Configuration Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD1C04), name("ppi_config_if1_0-15"),  groups("Distributor 1") } PPI_CONFIG_1;
        REGISTER { description("ICDICR: PPI Interrupt Configuration Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD2C04), name("ppi_config_if2_0-15"),  groups("Distributor 2") } PPI_CONFIG_2;
        REGISTER { description("ICDICR: PPI Interrupt Configuration Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD3C04), name("ppi_config_if3_0-15"),  groups("Distributor 3") } PPI_CONFIG_3;
        REGISTER { description("ICDICR: PPI Interrupt Configuration Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD4C04), name("ppi_config_if4_0-15"),  groups("Distributor 4") } PPI_CONFIG_4;
        REGISTER { description("ICDICR: PPI Interrupt Configuration Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD5C04), name("ppi_config_if5_0-15"),  groups("Distributor 5") } PPI_CONFIG_5;
        REGISTER { description("ICDICR: PPI Interrupt Configuration Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD6C04), name("ppi_config_if6_0-15"),  groups("Distributor 6") } PPI_CONFIG_6;
        REGISTER { description("ICDICR: PPI Interrupt Configuration Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD7C04), name("ppi_config_if7_0-15"),  groups("Distributor 7") } PPI_CONFIG_7;

        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 32-47"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C08), name("spi_config_0-15"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_0;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 48-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C0C), name("spi_config_16-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_1;
#ifdef ALL_CADI_REGISTER
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 64-79"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C10), name("spi_config_32-47"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_2;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 80-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C14), name("spi_config_48-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_3;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 96-111"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C18), name("spi_config_64-79"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_4;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 112-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C1C), name("spi_config_80-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_5;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 128-143"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C20), name("spi_config_96-111"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_6;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 144-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C24), name("spi_config_112-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_7;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 160-175"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C28), name("spi_config_128-143"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_8;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 176-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C2C), name("spi_config_144-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_9;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 192-207"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C30), name("spi_config_160-175"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_10;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 208-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C34), name("spi_config_176-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_11;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 224-239"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C38), name("spi_config_192-207"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_12;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 240-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C3C), name("spi_config_208-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_13;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 256-271"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C40), name("spi_config_224-239"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_14;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 272-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C44), name("spi_config_240-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_15;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 288-303"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C48), name("spi_config_256-271"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_16;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 304-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C4C), name("spi_config_272-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_17;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 320-335"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C50), name("spi_config_288-303"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_18;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 336-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C54), name("spi_config_304-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_19;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 352-367"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C58), name("spi_config_320-335"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_20;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 368-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C5C), name("spi_config_336-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_21;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 384-399"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C60), name("spi_config_352-367"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_22;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 400-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C64), name("spi_config_368-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_23;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 416-431"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C68), name("spi_config_384-399"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_24;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 432-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C6C), name("spi_config_400-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_25;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 448-463"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C70), name("spi_config_416-431"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_26;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 464-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C74), name("spi_config_432-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_27;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 480-495"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C78), name("spi_config_448-463"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_28;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 496-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C7C), name("spi_config_464-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_29;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 512-527"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C80), name("spi_config_480-495"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_30;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 528-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C84), name("spi_config_496-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_31;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 544-559"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C88), name("spi_config_512-527"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_32;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 560-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C8C), name("spi_config_528-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_33;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 576-591"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C90), name("spi_config_544-559"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_34;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 592-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C94), name("spi_config_560-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_35;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 608-623"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C98), name("spi_config_576-591"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_36;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 624-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD0C9C), name("spi_config_592-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_37;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 640-655"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CA0), name("spi_config_608-623"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_38;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 656-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CA4), name("spi_config_624-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_39;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 672-687"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CA8), name("spi_config_640-655"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_40;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 688-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CAC), name("spi_config_656-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_41;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 704-719"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CB0), name("spi_config_672-687"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_42;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 720-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CB4), name("spi_config_688-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_43;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 736-751"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CB8), name("spi_config_704-719"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_44;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 752-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CBC), name("spi_config_720-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_45;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 768-783"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CC0), name("spi_config_736-751"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_46;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 784-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CC4), name("spi_config_752-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_47;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 800-815"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CC8), name("spi_config_768-783"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_48;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 816-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CCC), name("spi_config_784-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_49;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 832-847"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CD0), name("spi_config_800-815"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_50;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 848-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CD4), name("spi_config_816-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_51;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 864-879"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CD8), name("spi_config_832-847"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_52;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 880-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CDC), name("spi_config_848-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_53;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 896-911"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CE0), name("spi_config_864-879"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_54;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 912-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CE4), name("spi_config_880-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_55;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 928-943"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CE8), name("spi_config_896-911"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_56;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 944-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CEC), name("spi_config_912-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_57;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 960-975"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CF0), name("spi_config_928-943"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_58;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 976-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CF4), name("spi_config_944-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_59;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 992-1007"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CF8), name("spi_config_960-975"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_60;
        REGISTER { description("ICDICR: SPI Interrupt Configuration Register (RW))\n(Interrupt ID 1008-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD0CFC), name("spi_config_976-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_CONFIG_61;
#endif

        REGISTER { description("PPI Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D00), name("ppi_if0"),  groups("Distributor 0") } PPI_IF0;
        REGISTER { description("PPI Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD1D00), name("ppi_if1"),  groups("Distributor 1") } PPI_IF1;
        REGISTER { description("PPI Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD2D00), name("ppi_if2"),  groups("Distributor 2") } PPI_IF2;
        REGISTER { description("PPI Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD3D00), name("ppi_if3"),  groups("Distributor 3") } PPI_IF3;
        REGISTER { description("PPI Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD4D00), name("ppi_if4"),  groups("Distributor 4") } PPI_IF4;
        REGISTER { description("PPI Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD5D00), name("ppi_if5"),  groups("Distributor 5") } PPI_IF5;
        REGISTER { description("PPI Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD6D00), name("ppi_if6"),  groups("Distributor 6") } PPI_IF6;
        REGISTER { description("PPI Status Register (RO))\n(Interrupt ID 16-31"), read_function(debug_read), write_function(debug_write), reg_number(0xD7D00), name("ppi_if7"),  groups("Distributor 7") } PPI_IF7;

        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 32-63"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D04), name("spi_0-31"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_0;
#ifdef ALL_CADI_REGISTER
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 64-95"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D08), name("spi_32-63"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_1;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 96-127"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D0C), name("spi_64-95"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_2;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 128-159"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D10), name("spi_96-127"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_3;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 160-191"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D14), name("spi_128-159"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_4;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 192-223"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D18), name("spi_160-191"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_5;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 224-255"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D1C), name("spi_192-223"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_6;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 256-287"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D20), name("spi_224-255"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_7;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 288-319"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D24), name("spi_256-287"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_8;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 320-351"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D28), name("spi_288-319"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_9;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 352-383"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D2C), name("spi_320-351"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_10;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 384-415"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D30), name("spi_352-383"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_11;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 416-447"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D34), name("spi_384-415"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_12;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 448-479"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D38), name("spi_416-447"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_13;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 480-511"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D3C), name("spi_448-479"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_14;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 512-543"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D40), name("spi_480-511"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_15;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 544-575"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D44), name("spi_512-543"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_16;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 576-607"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D48), name("spi_544-575"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_17;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 608-639"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D4C), name("spi_576-607"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_18;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 640-671"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D50), name("spi_608-639"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_19;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 672-703"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D54), name("spi_640-671"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_20;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 704-735"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D58), name("spi_672-703"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_21;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 736-767"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D5C), name("spi_704-735"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_22;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 768-799"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D60), name("spi_736-767"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_23;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 800-831"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D64), name("spi_768-799"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_24;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 832-863"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D68), name("spi_800-831"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_25;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 864-895"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D6C), name("spi_832-863"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_26;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 896-927"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D70), name("spi_864-895"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_27;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 928-959"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D74), name("spi_896-927"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_28;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 960-991"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D78), name("spi_928-959"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_29;
        REGISTER { description("SPI Status Register (RO))\n(Interrupt ID 992-1019"), read_function(debug_read), write_function(debug_write), reg_number(0xD0D7C), name("spi_960-987"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SPI_30;
#endif

        REGISTER { description("Legacy Interrupt Register (R0)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0DD0), name("legacy_int0"), groups("Distributor 0")} LEGACY_INT0;
        REGISTER { description("Legacy Interrupt Register (R0)"), read_function(debug_read), write_function(debug_write), reg_number(0xD1DD0), name("legacy_int1"), groups("Distributor 1")} LEGACY_INT1;
        REGISTER { description("Legacy Interrupt Register (R0)"), read_function(debug_read), write_function(debug_write), reg_number(0xD2DD0), name("legacy_int2"), groups("Distributor 2")} LEGACY_INT2;
        REGISTER { description("Legacy Interrupt Register (R0)"), read_function(debug_read), write_function(debug_write), reg_number(0xD3DD0), name("legacy_int3"), groups("Distributor 3")} LEGACY_INT3;
        REGISTER { description("Legacy Interrupt Register (R0)"), read_function(debug_read), write_function(debug_write), reg_number(0xD4DD0), name("legacy_int4"), groups("Distributor 4")} LEGACY_INT4;
        REGISTER { description("Legacy Interrupt Register (R0)"), read_function(debug_read), write_function(debug_write), reg_number(0xD5DD0), name("legacy_int5"), groups("Distributor 5")} LEGACY_INT5;
        REGISTER { description("Legacy Interrupt Register (R0)"), read_function(debug_read), write_function(debug_write), reg_number(0xD6DD0), name("legacy_int6"), groups("Distributor 6")} LEGACY_INT6;
        REGISTER { description("Legacy Interrupt Register (R0)"), read_function(debug_read), write_function(debug_write), reg_number(0xD7DD0), name("legacy_int7"), groups("Distributor 7")} LEGACY_INT7;

        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0DE0), name("match_d0"), groups("Distributor 0") } MATCH_D0;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD1DE0), name("match_d1"), groups("Distributor 1") } MATCH_D1;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD2DE0), name("match_d2"), groups("Distributor 2") } MATCH_D2;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD3DE0), name("match_d3"), groups("Distributor 3") } MATCH_D3;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD4DE0), name("match_d4"), groups("Distributor 4") } MATCH_D4;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD5DE0), name("match_d5"), groups("Distributor 5") } MATCH_D5;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD6DE0), name("match_d6"), groups("Distributor 6") } MATCH_D6;
        REGISTER { description("Match Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD7DE0), name("match_d7"), groups("Distributor 7") } MATCH_D7;

        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0DE4), name("enable_d0"), groups("Distributor 0") } ENABLE_D0;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD1DE4), name("enable_d1"), groups("Distributor 1") } ENABLE_D1;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD2DE4), name("enable_d2"), groups("Distributor 2") } ENABLE_D2;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD3DE4), name("enable_d3"), groups("Distributor 3") } ENABLE_D3;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD4DE4), name("enable_d4"), groups("Distributor 4") } ENABLE_D4;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD5DE4), name("enable_d5"), groups("Distributor 5") } ENABLE_D5;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD6DE4), name("enable_d6"), groups("Distributor 6") } ENABLE_D6;
        REGISTER { description("Enable Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD7DE4), name("enable_d7"), groups("Distributor 7") } ENABLE_D7;

        REGISTER { description("ICDSGIR: Software Generated Interrupt Register (WO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0F00), name("sgi_control"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} SGI_CONTROL;
        
        REGISTER { description("Peripheral Identification Register 8 (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0FC0), name("periph_id_d_8"), bitwidth(8), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PERIPH_ID_D8;
        REGISTER { description("Peripheral Identification Register [7:4] (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0FD0), name("periph_id_d_4-7"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PERIPH_ID_D4_7;
        REGISTER { description("Peripheral Identification Register [3:0] (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0FE0), name("periph_id_d_0-3"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} PERIPH_ID_D0_3;

        REGISTER { description("PrimeCell Identification Register (RO)"), read_function(debug_read), write_function(debug_write), reg_number(0xD0FF0), name("component_id"), groups("Distributor 0", "Distributor 1", "Distributor 2", "Distributor 3", "Distributor 4", "Distributor 5", "Distributor 6", "Distributor 7")} COMPONENT_ID_D;
#endif
        
        PL390_GIC pl390;
    }

    connection
    {
        self.pvbus_distributor => busslave_distributor.pvbus_s;
        busslave_distributor.device => self.dev_distributor;
        self.pvbus_cpu => busslave_cpu.pvbus_s;
        busslave_cpu.device => self.dev_cpu;
    }
    
    // reset signal
    slave port<Signal> reset_in
    {
        behavior setValue(sg::Signal::State state)
        {
            if (state == sg::Signal::Set) self.reset(0);
        }
    }
    
    // Memory-mapped register interfaces
    slave port<PVBus> pvbus_distributor;
    slave port<PVBus> pvbus_cpu;

    // Output interrupt signals
    master port<Signal> nirq[8];
    master port<Signal> nfiq[8];
    
    // Input interrupt signals
    slave port<Signal> legacy_nirq[8]
    {
        behavior setValue(unsigned int portIndex, sg::Signal::State state)
        {
            if((int)portIndex < NUM_CPU) {
                PL390_GIC_TRACE("%s: legacy IRQ_CPU_%d -> %s\n", getInstanceName().c_str(), portIndex, (state==sg::Signal::Set)?"Set":"Clear");
                pl390.signal_port_legacy_irq_drive(portIndex, (state==sg::Signal::Clear)? 1: 0);
                self.updateOutputs(portIndex);
            }
        }
    }
    
    slave port<Signal> legacy_nfiq[8]
    {
        behavior setValue(unsigned int portIndex, sg::Signal::State state)
        {
            if((int)portIndex < NUM_CPU) {
                PL390_GIC_TRACE("%s: legacy FIQ_CPU_%d -> %s\n", getInstanceName().c_str(), portIndex, (state==sg::Signal::Set)?"Set":"Clear");
                pl390.signal_port_legacy_fiq_drive(portIndex, (state==sg::Signal::Clear)? 1: 0);
                self.updateOutputs(portIndex);
            }
        }
    }
    
    slave port<Signal> ppi_c0[16]
        { behavior setValue(unsigned int portIndex, sg::Signal::State state) { if((int)portIndex < NUM_PPI && NUM_CPU > 0) drivePPI(0, portIndex, state); } }
    slave port<Signal> ppi_c1[16]
        { behavior setValue(unsigned int portIndex, sg::Signal::State state) { if((int)portIndex < NUM_PPI && NUM_CPU > 1) drivePPI(1, portIndex, state); } }
    slave port<Signal> ppi_c2[16]
        { behavior setValue(unsigned int portIndex, sg::Signal::State state) { if((int)portIndex < NUM_PPI && NUM_CPU > 2) drivePPI(2, portIndex, state); } }
    slave port<Signal> ppi_c3[16]
        { behavior setValue(unsigned int portIndex, sg::Signal::State state) { if((int)portIndex < NUM_PPI && NUM_CPU > 3) drivePPI(3, portIndex, state); } }
    slave port<Signal> ppi_c4[16]
        { behavior setValue(unsigned int portIndex, sg::Signal::State state) { if((int)portIndex < NUM_PPI && NUM_CPU > 4) drivePPI(4, portIndex, state); } }
    slave port<Signal> ppi_c5[16]
        { behavior setValue(unsigned int portIndex, sg::Signal::State state) { if((int)portIndex < NUM_PPI && NUM_CPU > 5) drivePPI(5, portIndex, state); } }
    slave port<Signal> ppi_c6[16]
        { behavior setValue(unsigned int portIndex, sg::Signal::State state) { if((int)portIndex < NUM_PPI && NUM_CPU > 6) drivePPI(6, portIndex, state); } }
    slave port<Signal> ppi_c7[16]
        { behavior setValue(unsigned int portIndex, sg::Signal::State state) { if((int)portIndex < NUM_PPI && NUM_CPU > 7) drivePPI(7, portIndex, state); } }

    slave port<Signal> spi[988]
    {
        behavior setValue(unsigned int portIndex, sg::Signal::State state)
        {
            if((int)portIndex < NUM_SPI) {
                PL390_GIC_TRACE("%s: SPI[%d] -> %s\n", getInstanceName().c_str(), portIndex, (state==sg::Signal::Set)?"Set":"Clear");
                pl390.signal_port_irq_drive(IRQ_BASE_EXT+portIndex, 0 /*dummy*/, (state==sg::Signal::Set)? 1: 0);
                self.updateOutputs();
            }
        }
    }

    // Miscellaneous signals
    slave port<Signal> cfgsdisable
    {
        behavior setValue(sg::Signal::State state)
        {
            PL390_GIC_TRACE("%s: cfgdisable -> %s\n", getInstanceName().c_str(), (state==sg::Signal::Set)?"Set":"Clear");
            pl390.cfgsdisable_i((state==sg::Signal::Set)? 1: 0);
        }
    }
    slave port<ValueState> enable_d[8]
    {
        behavior setValue(unsigned int cpu, MxU32 value)
        {
            pl390.enable_d[cpu] = value;
        }
    }
    slave port<ValueState> match_d[8]
    {
        behavior setValue(unsigned int cpu, MxU32 value)
        {
            pl390.match_d[cpu] = value;
        }
    }
    slave port<ValueState> enable_c[8]
    {
        behavior setValue(unsigned int cpu, MxU32 value)
        {
            pl390.enable_c[cpu] = value;
        }
    }
    slave port<ValueState> match_c[8]
    {
        behavior setValue(unsigned int cpu, MxU32 value)
        {
            pl390.match_c[cpu] = value;
        }
    }

    internal slave port<PVDevice> dev_distributor
    {
        behavior read(pv::ReadTransaction tx) : pv::Tx_Result
        {
            int cpu = getDistributorInterfaceCpuId(tx);
            PL390_GIC_TRACE("%s: DistRd (cpu %i) master_id(0x%x) & enable_d(0x%x) %c= match_d(0x%x)\n", getInstanceName().c_str(), cpu,
                            (MxU32)(tx.getMasterID() & (((MxU64)1<<pl390.d_id_width)-1)),
                            (MxU32)(((cpu!=-1)? pl390.enable_d[cpu]: 0xffffffff) & (((MxU64)1<<pl390.d_id_width)-1)),
                            ((cpu!=-1)? '=': '!'),
                            (MxU32)(((cpu!=-1)? pl390.match_d[cpu]: 0xffffffff) & (((MxU64)1<<pl390.d_id_width)-1)) );
            if(cpu == -1) {
                switch (tx.getAccessWidth()) {
                case pv::ACCESS_8_BITS:  tx.setReturnData8(0);  break;
                case pv::ACCESS_16_BITS: tx.setReturnData16(0); break;
                case pv::ACCESS_32_BITS: tx.setReturnData32(0); break;
                default: /* 64 bits */   tx.setReturnData64(0); break;
                }
                return tx.readComplete();
            }
      
            int domain = tx.isNonSecure()? NONSECURE: SECURE;
            MxStatus status = MX_STATUS_ERROR;
            uint32_t data;
            
            if (tx.isAligned()) {
                switch (tx.getAccessWidth()) {
                case pv::ACCESS_8_BITS:
                    MxU8 data8;
                    status = pl390.distributor_read8(tx.getAddress(), data8, cpu, domain);
                    tx.setReturnData8(data8);
                    data = data8;
                    break;
                case pv::ACCESS_16_BITS:
                    MxU16 data16;
                    status = pl390.distributor_read16(tx.getAddress(), data16, cpu, domain);
                    tx.setReturnData16(data16);
                    data = data16;
                    break;
                case pv::ACCESS_32_BITS:
                    MxU32 data32;
                    status = pl390.distributor_read32(tx.getAddress(), data32, cpu, domain);
                    tx.setReturnData32(data32);
                    data = data32;
                    break;
                default:    // 64 bits
                    MxU64 data64;
                    status = pl390.distributor_read64(tx.getAddress(), data64, cpu, domain);
                    tx.setReturnData64(data64);
                    data = data64;
                    break;
                }
            } else {
                // If unaligned, we'd have to do a pair of register reads to make this work, so abort.
                PL390_GIC_TRACE("%s: DistRd (cpu %i) unaligned read of size %d to 0x%0x\n", getInstanceName().c_str(), cpu, tx.getAccessByteWidth(), (uint32_t)tx.getAddress());
                return tx.generateAbort();
            }
            
            self.updateOutputs(cpu);
            
            if (status == MX_STATUS_OK)
            {
                PL390_GIC_TRACE("%s: DistRd (cpu %i) %08x <- %s\n", getInstanceName().c_str(), cpu, data, pl390.DistRegName(tx.getAddress()));
                return tx.readComplete();
            }
            else 
            {
                PL390_GIC_TRACE("%s: ERROR in DistRd (cpu %i) %08x <- %s\n", getInstanceName().c_str(), cpu, data, pl390.DistRegName(tx.getAddress()));
                return tx.generateAbort();
            }
        }
        
        behavior write(pv::WriteTransaction tx) : pv::Tx_Result
        {
            int cpu = getDistributorInterfaceCpuId(tx);
            PL390_GIC_TRACE("%s: DistWr (cpu %i) master_id(0x%x) & enable_d(0x%x) %c= match_d(0x%x)\n", getInstanceName().c_str(), cpu,
                            (MxU32)(tx.getMasterID() & (((MxU64)1<<pl390.d_id_width)-1)),
                            (MxU32)(((cpu!=-1)? pl390.enable_d[cpu]: 0xffffffff) & (((MxU64)1<<pl390.d_id_width)-1)),
                            ((cpu!=-1)? '=': '!'),
                            (MxU32)(((cpu!=-1)? pl390.match_d[cpu]: 0xffffffff) & (((MxU64)1<<pl390.d_id_width)-1)) );
            if(cpu == -1) return tx.writeComplete();

            int domain = tx.isNonSecure()? NONSECURE: SECURE;
            MxStatus status = MX_STATUS_ERROR;
            
            if (tx.isAligned()) {
                switch (tx.getAccessWidth()) {
                case pv::ACCESS_8_BITS:
                    status = pl390.distributor_write8(tx.getAddress(), tx.getData8(), cpu, domain);
                    break;
                case pv::ACCESS_16_BITS:
                    status = pl390.distributor_write16(tx.getAddress() & ~0x1, tx.getData16(), cpu, domain);
                    break;
                case pv::ACCESS_32_BITS:
                    status = pl390.distributor_write32(tx.getAddress() & ~0x3, tx.getData32(), cpu, domain);
                    break;
                default:    // 64 bits
                    status = pl390.distributor_write64(tx.getAddress() & ~0x7, tx.getData64(), cpu, domain);
                    break;
                }
            } else {
                // If unaligned, we'd have to do a pair of register writes to make this work, so abort.
                PL390_GIC_TRACE("%s: DistWr (cpu %i) unaligned write of size %d to 0x%0x\n", getInstanceName().c_str(), cpu, tx.getAccessByteWidth(), (uint32_t)tx.getAddress());
                return tx.generateAbort();
            }
            
            self.updateOutputs(cpu);
            
            if (status == MX_STATUS_OK)
            {
                PL390_GIC_TRACE("%s: DistWr (cpu %i) %08x -> %s\n", getInstanceName().c_str(), cpu, tx.getData32(), pl390.DistRegName(tx.getAddress()));
                return tx.writeComplete();
            }
            else 
            {
                PL390_GIC_TRACE("%s: ERROR in DistWr (cpu %i) %08x -> %s\n",
                    getInstanceName().c_str(), cpu, tx.getData32(), pl390.DistRegName(tx.getAddress()));
                return tx.generateAbort();
            }
        }

        behavior debugRead(pv::ReadTransaction tx) : pv::Tx_Result
        {
            return dev_distributor.read(tx);
        }

        behavior debugWrite(pv::WriteTransaction tx) : pv::Tx_Result
        {
            return dev_distributor.write(tx);
        }        
    } // distributor slave port
    
    internal slave port<PVDevice> dev_cpu
    {
        behavior read(pv::ReadTransaction tx) : pv::Tx_Result
        {
            int cpu = getCpuInterfaceCpuId(tx);
            PL390_GIC_TRACE("%s: CpuIfRd (cpu %i) master_id(0x%x) & enable_c(0x%x) %c= match_c(0x%x)\n", getInstanceName().c_str(), cpu,
                            (MxU32)(tx.getMasterID() & (((MxU64)1<<pl390.c_id_width)-1)),
                            (MxU32)(((cpu!=-1)? pl390.enable_c[cpu]: 0xffffffff) & (((MxU64)1<<pl390.c_id_width)-1)),
                            ((cpu!=-1)? '=': '!'),
                            (MxU32)(((cpu!=-1)? pl390.match_c[cpu]: 0xffffffff) & (((MxU64)1<<pl390.c_id_width)-1)) );
            if(cpu == -1) {
                switch (tx.getAccessWidth()) {
                case pv::ACCESS_8_BITS:  tx.setReturnData8(0);  break;
                case pv::ACCESS_16_BITS: tx.setReturnData16(0); break;
                case pv::ACCESS_32_BITS: tx.setReturnData32(0); break;
                default: /* 64 bits */   tx.setReturnData64(0); break;
                }
                return tx.readComplete();
            }

            int domain = tx.isNonSecure()? NONSECURE: SECURE;
            MxStatus status = MX_STATUS_ERROR;
            MxU32 data;
            if (tx.isAligned()) {
                switch (tx.getAccessWidth()) {
                    case pv::ACCESS_8_BITS:
                        MxU8 data8;
                        status = pl390.cpuif_read8(tx.getAddress(), data8, cpu, domain);
                        tx.setReturnData8(data8);
                        data = data8;
                        break;
                    case pv::ACCESS_16_BITS:
                        MxU16 data16;
                        status = pl390.cpuif_read16(tx.getAddress() & ~0x1, data16, cpu, domain);
                        tx.setReturnData16(data16);
                        data = data16;
                        break;
                    case pv::ACCESS_32_BITS:
                        MxU32 data32;
                        status = pl390.cpuif_read32(tx.getAddress() & ~0x3, data32, cpu, domain);
                        tx.setReturnData32(data32);
                        data = data32;
                        break;
                    default:    // 64 bits
                        MxU64 data64;
                        status = pl390.cpuif_read64(tx.getAddress() & ~0x7, data64, cpu, domain);
                        tx.setReturnData64(data64);
                        data = data64;
                        break;
                }
            } else {
                // If unaligned, we'd have to do a pair of register reads to make this work, so abort.
                PL390_GIC_TRACE("%s: CpuIfRd (cpu %i) unaligned read of size %d to 0x%0x\n", getInstanceName().c_str(), cpu, tx.getAccessByteWidth(), (uint32_t)tx.getAddress());
                return tx.generateAbort();
            }

            self.updateOutputs();
            
            if (status == MX_STATUS_OK)
            {
                PL390_GIC_TRACE("%s: CpuIfRd (cpu %i) %08x <- %s\n", getInstanceName().c_str(), cpu,
                                data, pl390.CpuIfRegName(tx.getAddress()));
                return tx.readComplete();
            }
            else 
            {
                PL390_GIC_TRACE("%s: ERROR in CpuIfRd (cpu %i) %08x <- %s\n",
                                getInstanceName().c_str(), cpu,
                                data, pl390.CpuIfRegName(tx.getAddress()));
                return tx.generateAbort();
            }
        }
        
        behavior write(pv::WriteTransaction tx) : pv::Tx_Result
        {
            int cpu = getCpuInterfaceCpuId(tx);
            PL390_GIC_TRACE("%s: CpuIfWr (cpu %i) master_id(0x%x) & enable_c(0x%x) %c= match_c(0x%x)\n", getInstanceName().c_str(), cpu,
                            (MxU32)(tx.getMasterID() & (((MxU64)1<<pl390.c_id_width)-1)),
                            (MxU32)(((cpu!=-1)? pl390.enable_c[cpu]: 0xffffffff) & (((MxU64)1<<pl390.c_id_width)-1)),
                            ((cpu!=-1)? '=': '!'),
                            (MxU32)(((cpu!=-1)? pl390.match_c[cpu]: 0xffffffff) & (((MxU64)1<<pl390.c_id_width)-1)) );
            if(cpu == -1) return tx.writeComplete();

            int domain = tx.isNonSecure()? NONSECURE: SECURE;
            MxStatus status = MX_STATUS_ERROR;
            
            if (tx.isAligned())
            {
                switch (tx.getAccessWidth()) {
                    case pv::ACCESS_8_BITS:
                        status = pl390.cpuif_write8(tx.getAddress(), tx.getData8(), cpu, domain);
                        break;
                    case pv::ACCESS_16_BITS:
                        status = pl390.cpuif_write16(tx.getAddress() & ~0x1, tx.getData16(), cpu, domain);
                        break;
                    case pv::ACCESS_32_BITS:
                        status = pl390.cpuif_write32(tx.getAddress() & ~0x3, tx.getData32(), cpu, domain);
                        break;
                    default:    // 64 bits
                        status = pl390.cpuif_write64(tx.getAddress() & ~0x7, tx.getData64(), cpu, domain);
                        break;
                }
            } else {
                // If unaligned, we'd have to do a pair of register writes to make this work, so abort.
                PL390_GIC_TRACE("%s: CpuIfWr (cpu %i) unaligned write of size %d to 0x%0x\n", getInstanceName().c_str(), cpu, tx.getAccessByteWidth(), (uint32_t)tx.getAddress());
                return tx.generateAbort();
            }
            
            self.updateOutputs(cpu);
            
            if (status == MX_STATUS_OK)
            {
                PL390_GIC_TRACE("%s: CpuIfWr (cpu %i) %08x -> %s\n", getInstanceName().c_str(), cpu, tx.getData32(), pl390.CpuIfRegName(tx.getAddress()));
                return tx.writeComplete();
            }
            else 
            {
                PL390_GIC_TRACE("%s: ERROR in CpuIfWr (cpu %i) %08x -> %s\n",
                    getInstanceName().c_str(), cpu, tx.getData32(), pl390.CpuIfRegName(tx.getAddress()));
                return tx.generateAbort();
            }
        }

        behavior debugRead(pv::ReadTransaction tx) : pv::Tx_Result
        {
            return dev_cpu.read(tx);
        }

        behavior debugWrite(pv::WriteTransaction tx) : pv::Tx_Result
        {
            return dev_cpu.write(tx);
        }        
    } // cpu slave port

    behavior getDistributorInterfaceCpuId(pv::Transaction tx) : int32_t
    {
        uint32_t tx_id = tx.getMasterID();
        MxU32 mask = ((MxU64)1<<pl390.d_id_width)-1;
        for (int i = 0; i < NUM_CPU; ++i) {
            if ((((tx_id & pl390.enable_d[i]) ^ pl390.match_d[i]) & mask) == 0) return i;
        }
        PL390_GIC_TRACE("%s: no match master_id(0x%x) & enable_d == match_d found\n",
            getInstanceName().c_str(), (MxU32)(tx.getMasterID() & (((MxU64)1<<pl390.d_id_width)-1)));
        return -1;
    }

    behavior getCpuInterfaceCpuId(pv::Transaction tx) : int32_t
    {
        uint32_t tx_id = tx.getMasterID();
        MxU32 mask = ((MxU64)1<<pl390.c_id_width)-1;
        for (int i = 0; i < NUM_CPU; ++i) {
            if ((((tx_id & pl390.enable_c[i]) ^ pl390.match_c[i]) & mask) == 0) return i;
        }
        PL390_GIC_TRACE("%s: no match master_id(0x%x) & enable_c == match_c found\n",
            getInstanceName().c_str(), (MxU32)(tx.getMasterID() & (((MxU64)1<<pl390.c_id_width)-1)));
        return -1;
    }
    
    behavior updateOutputs(unsigned int cpu)
    {
        if (pl390.edge_irq_o[cpu]) {
            PL390_GIC_TRACE("%s: IRQ[%i] -> %s\n", getInstanceName().c_str(), cpu, pl390.irq_o[cpu] ?"Set":"Clear");
            if(nirq[cpu].setValue.implemented())
                nirq[cpu].setValue(pl390.irq_o[cpu] ? sg::Signal::Set : sg::Signal::Clear);
            pl390.edge_irq_o[cpu] = false;
        }
        if (pl390.edge_fiq_o[cpu]) {
            PL390_GIC_TRACE("%s: FIQ[%i] -> %s\n", getInstanceName().c_str(), cpu, pl390.fiq_o[cpu] ?"Set":"Clear");
            if(nfiq[cpu].setValue.implemented())
                nfiq[cpu].setValue(pl390.fiq_o[cpu] ? sg::Signal::Set : sg::Signal::Clear);
            pl390.edge_fiq_o[cpu] = false;
        }
    }
    
    behavior updateOutputs()
    {
        for(int cpu=0; cpu<NUM_CPU; ++cpu)
            updateOutputs(cpu);
    }
    
    behavior drivePPI(int cpu, unsigned int portIndex, sg::Signal::State state)
    {
        PL390_GIC_TRACE("%s: PPI_CPU_%d[%d] -> %s\n", getInstanceName().c_str(), cpu, portIndex, (state==sg::Signal::Set)?"Set":"Clear");
        pl390.signal_port_irq_drive(N_SOFTWARE_INT+portIndex, cpu, (state==sg::Signal::Set)? 1: 0);
        self.updateOutputs(cpu);
    }

    behavior init
    {
        // copy initial parameter values
        initFieldParam(pl390.match_d,  INIT_MATCH_D);
        initFieldParam(pl390.enable_d, INIT_ENABLE_D);
        initFieldParam(pl390.match_c,  INIT_MATCH_C);
        initFieldParam(pl390.enable_c, INIT_ENABLE_C);

        composition.init();
    }
    
    behavior terminate
    {
        // nothing
        // Explicitly invoke subcomponent's terminate() behavior.
        composition.terminate();
    }
    
    // reset is reset (no argument needed).
    behavior reset(int level)
    {
        composition.reset(level);
        
        // this would normally be a parameter passed to constructor GIC().
        pl390.n_cpus            = NUM_CPU;
        pl390.n_sgi             = NUM_SGI;
        pl390.n_ppi             = NUM_PPI;
        pl390.n_spi             = NUM_SPI;
        pl390.n_lspi            = NUM_LSPI;
        
        pl390.n_priority_levels = NUM_PRIORITY_LEVELS;
        
        pl390.trustzone_enabled = ENABLE_TRUSTZONE;
        pl390.legacy_fiq        = ENABLE_LEGACY_FIQ;
        pl390.legacy_irq        = ENABLE_LEGACY_IRQ;
        pl390.ppi_edge          = ENABLE_PPI_EDGE;
        
        pl390.if_type           = AXI_IF? 0: 1;
        pl390.arch_version      = ARCHITECTURE_VERSION;
        
        pl390.d_id_width        = D_ID_WIDTH;
        pl390.c_id_width        = C_ID_WIDTH;
                
        pl390.init();   //Reset is called inside
    }
    
    // debugger support - slightly more complicated than normal because of the way that register arrays are handled
    behavior debug_read(uint32_t reg_id, uint64_t* datap, bool side_effects) : CADIReturn_t
    {
        uint32_t address = reg_id & 0xFFE;
        int cpu = (reg_id & 0xF000) >> 12;
        int domain = (reg_id & 0x1)? NONSECURE: SECURE;
        MxStatus status = MX_STATUS_ERROR;
        
        MxU32 data32;
        if ((reg_id & 0xF0000) == 0xC0000) {
            switch(address) {
            case 0xFD0: // periph_id[7:4]
            case 0xFE0: // periph_id[3:0]
            case 0xFF0: // component_id[3:0]
                {
                    MxU32 data0=0, data1=0, data2=0, data3=0;
                                              status = pl390.cpuif_readDbg32(address+0x0, data0, cpu, domain);
                    if (status==MX_STATUS_OK) status = pl390.cpuif_readDbg32(address+0x4, data1, cpu, domain);
                    if (status==MX_STATUS_OK) status = pl390.cpuif_readDbg32(address+0x8, data2, cpu, domain);
                    if (status==MX_STATUS_OK) status = pl390.cpuif_readDbg32(address+0xc, data3, cpu, domain);
                    data32 = (data3<<24) | (data2<<16) | (data1<<8) | data0;
                }
                break;
            default:
                status = pl390.cpuif_readDbg32(address, data32, cpu, domain);
                break;
            }
        } else {
            switch(address) {
            case 0xFD0: // periph_id[7:4]
            case 0xFE0: // periph_id[3:0]
            case 0xFF0: // component_id[3:0]
                {
                    MxU32 data0=0, data1=0, data2=0, data3=0;
                                              status = pl390.distributor_readDbg32(address+0x0, data0, cpu, domain);
                    if (status==MX_STATUS_OK) status = pl390.distributor_readDbg32(address+0x4, data1, cpu, domain);
                    if (status==MX_STATUS_OK) status = pl390.distributor_readDbg32(address+0x8, data2, cpu, domain);
                    if (status==MX_STATUS_OK) status = pl390.distributor_readDbg32(address+0xc, data3, cpu, domain);
                    data32 = (data3<<24) | (data2<<16) | (data1<<8) | data0;
                }
                break;
            default:
                status = pl390.distributor_readDbg32(address, data32, cpu, domain);
                break;
            }
        }
        *datap = data32;
        
        return (status == MX_STATUS_OK)? eslapi::CADI_STATUS_OK: eslapi::CADI_STATUS_GeneralError;
    }
    
    behavior debug_write(uint32_t reg_id, const uint64_t* datap, bool side_effects) : CADIReturn_t
    {
        uint32_t address = reg_id & 0xFFE;
        int cpu = (reg_id & 0xF000) >> 12;
        int domain = (reg_id & 0x1)? NONSECURE: SECURE;
        MxStatus status = MX_STATUS_ERROR;
        
        if ((reg_id & 0xF0000) == 0xC0000) {
            status = pl390.cpuif_writeDbg32(address, (uint32_t)*datap, cpu, domain);
        } else {
            status = pl390.distributor_writeDbg32(address, (uint32_t)*datap, cpu, domain);
        }
        return (status == MX_STATUS_OK)? eslapi::CADI_STATUS_OK: eslapi::CADI_STATUS_GeneralError;
    }

    behavior debug_read16(uint32_t reg_id, uint64_t* datap, bool side_effects) : CADIReturn_t
    {
        uint32_t address = reg_id & 0xFFE;
        int cpu = (reg_id & 0xF000) >> 12;
        int domain = (reg_id & 0x1)? NONSECURE: SECURE;
        MxStatus status = MX_STATUS_ERROR;
        
        MxU16 data16;
        if ((reg_id & 0xF0000) == 0xC0000) {
            status = pl390.cpuif_readDbg16(address, data16, cpu, domain);
        } else {
            status = pl390.distributor_readDbg16(address, data16, cpu, domain);
        }
        *datap = data16;
        
        return (status == MX_STATUS_OK)? eslapi::CADI_STATUS_OK: eslapi::CADI_STATUS_GeneralError;
    }
    
    behavior debug_write16(uint32_t reg_id, const uint64_t* datap, bool side_effects) : CADIReturn_t
    {
        uint32_t address = reg_id & 0xFFE;
        int cpu = (reg_id & 0xF000) >> 12;
        int domain = (reg_id & 0x1)? NONSECURE: SECURE;
        MxStatus status = MX_STATUS_ERROR;
        
        if ((reg_id & 0xF0000) == 0xC0000) {
            status = pl390.cpuif_writeDbg16(address, (uint16_t)*datap, cpu, domain);
        } else {
            status = pl390.distributor_writeDbg16(address, (uint16_t)*datap, cpu, domain);
        }
        return (status == MX_STATUS_OK)? eslapi::CADI_STATUS_OK: eslapi::CADI_STATUS_GeneralError;
    }
}
